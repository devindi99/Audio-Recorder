
ADC_input.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e2  00800100  000040c0  00004154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000040c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  008001e2  008001e2  00004236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b38  00000000  00000000  000042a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00025436  00000000  00000000  00004de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004dc3  00000000  00000000  0002a216  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007185  00000000  00000000  0002efd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b28  00000000  00000000  00036160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000057f7  00000000  00000000  00038c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001159c  00000000  00000000  0003e47f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d70  00000000  00000000  0004fa1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__dtors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__vector_16>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__vector_18>
      4c:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <__vector_19>
      50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <_ZZN6SdFile10make83NameEPKcPhE3__c>:
      b8:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

000000c8 <__ctors_start>:
      c8:	02 03       	mulsu	r16, r18
      ca:	80 0b       	sbc	r24, r16
      cc:	22 0f       	add	r18, r18
      ce:	c5 1c       	adc	r12, r5

000000d0 <__ctors_end>:
      d0:	1c 03       	fmul	r17, r20

000000d2 <__dtors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	11 e0       	ldi	r17, 0x01	; 1
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e0 ec       	ldi	r30, 0xC0	; 192
      e6:	f0 e4       	ldi	r31, 0x40	; 64
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a2 3e       	cpi	r26, 0xE2	; 226
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	25 e0       	ldi	r18, 0x05	; 5
      f6:	a2 ee       	ldi	r26, 0xE2	; 226
      f8:	b1 e0       	ldi	r27, 0x01	; 1
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a5 33       	cpi	r26, 0x35	; 53
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>

00000104 <__do_global_ctors>:
     104:	10 e0       	ldi	r17, 0x00	; 0
     106:	c8 e6       	ldi	r28, 0x68	; 104
     108:	d0 e0       	ldi	r29, 0x00	; 0
     10a:	04 c0       	rjmp	.+8      	; 0x114 <__do_global_ctors+0x10>
     10c:	21 97       	sbiw	r28, 0x01	; 1
     10e:	fe 01       	movw	r30, r28
     110:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__tablejump2__>
     114:	c4 36       	cpi	r28, 0x64	; 100
     116:	d1 07       	cpc	r29, r17
     118:	c9 f7       	brne	.-14     	; 0x10c <__do_global_ctors+0x8>
     11a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <main>
     11e:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__do_global_dtors>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <_Z8i2c_initv>:
	delay(400);
}

void lcd_lef_sh()
{
	lcd_cmd(0x18);      //----Command for Left Shift
     126:	82 e6       	ldi	r24, 0x62	; 98
     128:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     12c:	84 e0       	ldi	r24, 0x04	; 4
     12e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     132:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     136:	08 95       	ret

00000138 <_Z9i2c_startv>:
     138:	84 ea       	ldi	r24, 0xA4	; 164
     13a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     13e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     142:	87 ff       	sbrs	r24, 7
     144:	fc cf       	rjmp	.-8      	; 0x13e <_Z9i2c_startv+0x6>
     146:	08 95       	ret

00000148 <_Z9i2c_writec>:
     148:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     14c:	84 e8       	ldi	r24, 0x84	; 132
     14e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     152:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     156:	87 ff       	sbrs	r24, 7
     158:	fc cf       	rjmp	.-8      	; 0x152 <_Z9i2c_writec+0xa>
     15a:	08 95       	ret

0000015c <_Z6togglev>:
     15c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     160:	82 60       	ori	r24, 0x02	; 2
     162:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     166:	84 e8       	ldi	r24, 0x84	; 132
     168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     16c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     170:	87 ff       	sbrs	r24, 7
     172:	fc cf       	rjmp	.-8      	; 0x16c <_Z6togglev+0x10>
     174:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     178:	8d 7f       	andi	r24, 0xFD	; 253
     17a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     17e:	84 e8       	ldi	r24, 0x84	; 132
     180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     184:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     188:	87 ff       	sbrs	r24, 7
     18a:	fc cf       	rjmp	.-8      	; 0x184 <_Z6togglev+0x28>
     18c:	08 95       	ret

0000018e <_Z10lcd_cmd_hfc>:
     18e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     192:	9e 7f       	andi	r25, 0xFE	; 254
     194:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     198:	94 e8       	ldi	r25, 0x84	; 132
     19a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     19e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1a2:	97 ff       	sbrs	r25, 7
     1a4:	fc cf       	rjmp	.-8      	; 0x19e <_Z10lcd_cmd_hfc+0x10>
     1a6:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1aa:	9f 70       	andi	r25, 0x0F	; 15
     1ac:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1b0:	94 e8       	ldi	r25, 0x84	; 132
     1b2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ba:	97 ff       	sbrs	r25, 7
     1bc:	fc cf       	rjmp	.-8      	; 0x1b6 <_Z10lcd_cmd_hfc+0x28>
     1be:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1c2:	80 7f       	andi	r24, 0xF0	; 240
     1c4:	89 2b       	or	r24, r25
     1c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1ca:	84 e8       	ldi	r24, 0x84	; 132
     1cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d4:	87 ff       	sbrs	r24, 7
     1d6:	fc cf       	rjmp	.-8      	; 0x1d0 <_Z10lcd_cmd_hfc+0x42>
     1d8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_Z6togglev>

000001dc <_Z7lcd_cmdc>:
     1dc:	cf 93       	push	r28
     1de:	c8 2f       	mov	r28, r24
     1e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1e4:	8e 7f       	andi	r24, 0xFE	; 254
     1e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1ea:	84 e8       	ldi	r24, 0x84	; 132
     1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1f4:	87 ff       	sbrs	r24, 7
     1f6:	fc cf       	rjmp	.-8      	; 0x1f0 <_Z7lcd_cmdc+0x14>
     1f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1fc:	8f 70       	andi	r24, 0x0F	; 15
     1fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     202:	84 e8       	ldi	r24, 0x84	; 132
     204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     208:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     20c:	87 ff       	sbrs	r24, 7
     20e:	fc cf       	rjmp	.-8      	; 0x208 <_Z7lcd_cmdc+0x2c>
     210:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     214:	9c 2f       	mov	r25, r28
     216:	90 7f       	andi	r25, 0xF0	; 240
     218:	89 2b       	or	r24, r25
     21a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     21e:	84 e8       	ldi	r24, 0x84	; 132
     220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     224:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     228:	87 ff       	sbrs	r24, 7
     22a:	fc cf       	rjmp	.-8      	; 0x224 <_Z7lcd_cmdc+0x48>
     22c:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z6togglev>
     230:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     234:	8f 70       	andi	r24, 0x0F	; 15
     236:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     23a:	84 e8       	ldi	r24, 0x84	; 132
     23c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     240:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     244:	87 ff       	sbrs	r24, 7
     246:	fc cf       	rjmp	.-8      	; 0x240 <_Z7lcd_cmdc+0x64>
     248:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     24c:	30 e1       	ldi	r19, 0x10	; 16
     24e:	c3 9f       	mul	r28, r19
     250:	c0 01       	movw	r24, r0
     252:	11 24       	eor	r1, r1
     254:	82 2b       	or	r24, r18
     256:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     25a:	84 e8       	ldi	r24, 0x84	; 132
     25c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     260:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     264:	87 ff       	sbrs	r24, 7
     266:	fc cf       	rjmp	.-8      	; 0x260 <_Z7lcd_cmdc+0x84>
     268:	cf 91       	pop	r28
     26a:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_Z6togglev>

0000026e <_Z7lcd_dwrc>:
     26e:	cf 93       	push	r28
     270:	c8 2f       	mov	r28, r24
     272:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     276:	81 60       	ori	r24, 0x01	; 1
     278:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     27c:	84 e8       	ldi	r24, 0x84	; 132
     27e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     282:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     286:	87 ff       	sbrs	r24, 7
     288:	fc cf       	rjmp	.-8      	; 0x282 <_Z7lcd_dwrc+0x14>
     28a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     28e:	8f 70       	andi	r24, 0x0F	; 15
     290:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     294:	84 e8       	ldi	r24, 0x84	; 132
     296:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     29a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     29e:	87 ff       	sbrs	r24, 7
     2a0:	fc cf       	rjmp	.-8      	; 0x29a <_Z7lcd_dwrc+0x2c>
     2a2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     2a6:	9c 2f       	mov	r25, r28
     2a8:	90 7f       	andi	r25, 0xF0	; 240
     2aa:	89 2b       	or	r24, r25
     2ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     2b0:	84 e8       	ldi	r24, 0x84	; 132
     2b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2ba:	87 ff       	sbrs	r24, 7
     2bc:	fc cf       	rjmp	.-8      	; 0x2b6 <_Z7lcd_dwrc+0x48>
     2be:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z6togglev>
     2c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     2c6:	8f 70       	andi	r24, 0x0F	; 15
     2c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     2cc:	84 e8       	ldi	r24, 0x84	; 132
     2ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2d6:	87 ff       	sbrs	r24, 7
     2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <_Z7lcd_dwrc+0x64>
     2da:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     2de:	30 e1       	ldi	r19, 0x10	; 16
     2e0:	c3 9f       	mul	r28, r19
     2e2:	c0 01       	movw	r24, r0
     2e4:	11 24       	eor	r1, r1
     2e6:	82 2b       	or	r24, r18
     2e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     2ec:	84 e8       	ldi	r24, 0x84	; 132
     2ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2f6:	87 ff       	sbrs	r24, 7
     2f8:	fc cf       	rjmp	.-8      	; 0x2f2 <_Z7lcd_dwrc+0x84>
     2fa:	cf 91       	pop	r28
     2fc:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_Z6togglev>

00000300 <_Z8lcd_initv>:
     300:	80 e3       	ldi	r24, 0x30	; 48
     302:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z10lcd_cmd_hfc>
     306:	80 e3       	ldi	r24, 0x30	; 48
     308:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z10lcd_cmd_hfc>
     30c:	80 e2       	ldi	r24, 0x20	; 32
     30e:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z10lcd_cmd_hfc>
     312:	88 e2       	ldi	r24, 0x28	; 40
     314:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
     31e:	86 e0       	ldi	r24, 0x06	; 6
     320:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
     324:	80 e8       	ldi	r24, 0x80	; 128
     326:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
     32a:	8f e0       	ldi	r24, 0x0F	; 15
     32c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_Z7lcd_cmdc>

00000330 <_Z7lcd_msgPc>:
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	ec 01       	movw	r28, r24
     336:	89 91       	ld	r24, Y+
     338:	88 23       	and	r24, r24
     33a:	19 f0       	breq	.+6      	; 0x342 <_Z7lcd_msgPc+0x12>
     33c:	0e 94 37 01 	call	0x26e	; 0x26e <_Z7lcd_dwrc>
     340:	fa cf       	rjmp	.-12     	; 0x336 <_Z7lcd_msgPc+0x6>
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <_ZN5SDLib4FileaSEOS0_>:
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

  class File : public Stream {
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	fb 01       	movw	r30, r22
     34e:	22 81       	ldd	r18, Z+2	; 0x02
     350:	33 81       	ldd	r19, Z+3	; 0x03
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     352:	dc 01       	movw	r26, r24
     354:	13 96       	adiw	r26, 0x03	; 3
     356:	3c 93       	st	X, r19
     358:	2e 93       	st	-X, r18
     35a:	12 97       	sbiw	r26, 0x02	; 2
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     35c:	44 81       	ldd	r20, Z+4	; 0x04
     35e:	55 81       	ldd	r21, Z+5	; 0x05
     360:	66 81       	ldd	r22, Z+6	; 0x06
     362:	77 81       	ldd	r23, Z+7	; 0x07
     364:	14 96       	adiw	r26, 0x04	; 4
     366:	4d 93       	st	X+, r20
     368:	5d 93       	st	X+, r21
     36a:	6d 93       	st	X+, r22
     36c:	7c 93       	st	X, r23
     36e:	17 97       	sbiw	r26, 0x07	; 7
     370:	40 85       	ldd	r20, Z+8	; 0x08
     372:	51 85       	ldd	r21, Z+9	; 0x09
     374:	62 85       	ldd	r22, Z+10	; 0x0a
     376:	73 85       	ldd	r23, Z+11	; 0x0b
     378:	18 96       	adiw	r26, 0x08	; 8
     37a:	4d 93       	st	X+, r20
     37c:	5d 93       	st	X+, r21
     37e:	6d 93       	st	X+, r22
     380:	7c 93       	st	X, r23
     382:	1b 97       	sbiw	r26, 0x0b	; 11
     384:	1c 96       	adiw	r26, 0x0c	; 12
     386:	ef 01       	movw	r28, r30
     388:	2c 96       	adiw	r28, 0x0c	; 12
     38a:	9c 01       	movw	r18, r24
     38c:	27 5e       	subi	r18, 0xE7	; 231
     38e:	3f 4f       	sbci	r19, 0xFF	; 255
     390:	49 91       	ld	r20, Y+
     392:	4d 93       	st	X+, r20
     394:	a2 17       	cp	r26, r18
     396:	b3 07       	cpc	r27, r19
     398:	d9 f7       	brne	.-10     	; 0x390 <_ZN5SDLib4FileaSEOS0_+0x48>
     39a:	21 8d       	ldd	r18, Z+25	; 0x19
     39c:	32 8d       	ldd	r19, Z+26	; 0x1a
     39e:	fc 01       	movw	r30, r24
     3a0:	32 8f       	std	Z+26, r19	; 0x1a
     3a2:	21 8f       	std	Z+25, r18	; 0x19
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <_Z8Navigatev>:
	}
}
		

void Navigate(){
	if (UPval==2)
     3aa:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <UPval>
     3ae:	82 30       	cpi	r24, 0x02	; 2
     3b0:	49 f4       	brne	.+18     	; 0x3c4 <_Z8Navigatev+0x1a>
	{
		lcd_cmd(0x80);
     3b2:	80 e8       	ldi	r24, 0x80	; 128
     3b4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		Row=1;
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <__data_end+0x1>
     3c0:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <__data_end>
		
	}
	if (DOWNval==4)
     3c4:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <DOWNval>
     3c8:	84 30       	cpi	r24, 0x04	; 4
     3ca:	49 f4       	brne	.+18     	; 0x3de <_Z8Navigatev+0x34>
	{
		lcd_cmd(0xC0);
     3cc:	80 ec       	ldi	r24, 0xC0	; 192
     3ce:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		Row=2;
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <__data_end+0x1>
     3da:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <__data_end>
     3de:	08 95       	ret

000003e0 <_Z4Menuv>:
		
	}
}
void Menu(){
	lcd_cmd(0x01);
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
	lcd_cmd(0x80);
     3e6:	80 e8       	ldi	r24, 0x80	; 128
     3e8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
	lcd_msg("Playback audio");
     3ec:	8d e0       	ldi	r24, 0x0D	; 13
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
	lcd_cmd(0xC0);
     3f4:	80 ec       	ldi	r24, 0xC0	; 192
     3f6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
	lcd_msg("Delete Audio");
     3fa:	8c e1       	ldi	r24, 0x1C	; 28
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
	Screen = 1;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Screen+0x1>
     40a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Screen>
	Row = 0;
     40e:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <__data_end+0x1>
     412:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
     416:	08 95       	ret

00000418 <_Z13PlayBackAudiov>:
}
void PlayBackAudio(){
	lcd_cmd(0x01);
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
	lcd_cmd(0x80);
     41e:	80 e8       	ldi	r24, 0x80	; 128
     420:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
	lcd_msg("Audio 1");
     424:	83 e6       	ldi	r24, 0x63	; 99
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
	lcd_cmd(0xC0);
     42c:	80 ec       	ldi	r24, 0xC0	; 192
     42e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
	lcd_msg("Audio 2");
     432:	81 e8       	ldi	r24, 0x81	; 129
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
	Screen = 2;
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Screen+0x1>
     442:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Screen>
	Row = 0;
     446:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <__data_end+0x1>
     44a:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
     44e:	08 95       	ret

00000450 <_Z11DeleteAudiov>:
}
void DeleteAudio(){
	lcd_cmd(0x01);
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
	lcd_cmd(0x80);
     456:	80 e8       	ldi	r24, 0x80	; 128
     458:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
	lcd_msg("Audio 1");
     45c:	83 e6       	ldi	r24, 0x63	; 99
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
	lcd_cmd(0xC0);
     464:	80 ec       	ldi	r24, 0xC0	; 192
     466:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
	lcd_msg("Audio 2");
     46a:	81 e8       	ldi	r24, 0x81	; 129
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
	Screen = 3;
     472:	83 e0       	ldi	r24, 0x03	; 3
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Screen+0x1>
     47a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Screen>
	Row = 0;
     47e:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <__data_end+0x1>
     482:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
     486:	08 95       	ret

00000488 <_Z9PlayClipIv>:
}
void PlayClipI(){
	if ((SELval == 8) && (Row == 1) && (Screen == 2)){
     488:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <SELval>
     48c:	88 30       	cpi	r24, 0x08	; 8
     48e:	39 f5       	brne	.+78     	; 0x4de <_Z9PlayClipIv+0x56>
     490:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
     494:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__data_end+0x1>
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	09 f5       	brne	.+66     	; 0x4de <_Z9PlayClipIv+0x56>
     49c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Screen>
     4a0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Screen+0x1>
     4a4:	02 97       	sbiw	r24, 0x02	; 2
     4a6:	d9 f4       	brne	.+54     	; 0x4de <_Z9PlayClipIv+0x56>
		lcd_cmd(0x01);
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_cmd(0x80);
     4ae:	80 e8       	ldi	r24, 0x80	; 128
     4b0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_msg("No Effect");
     4b4:	89 e2       	ldi	r24, 0x29	; 41
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
		lcd_cmd(0xC0);
     4bc:	80 ec       	ldi	r24, 0xC0	; 192
     4be:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_msg("Effect 1");
     4c2:	80 e7       	ldi	r24, 0x70	; 112
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
		Screen = 4;
     4ca:	84 e0       	ldi	r24, 0x04	; 4
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Screen+0x1>
     4d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Screen>
		Row =0;
     4d6:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <__data_end+0x1>
     4da:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
	}
	if ((SELval == 8) && (Row == 2) && (Screen == 2)){
     4de:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <SELval>
     4e2:	88 30       	cpi	r24, 0x08	; 8
     4e4:	39 f5       	brne	.+78     	; 0x534 <_Z9PlayClipIv+0xac>
     4e6:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
     4ea:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__data_end+0x1>
     4ee:	02 97       	sbiw	r24, 0x02	; 2
     4f0:	09 f5       	brne	.+66     	; 0x534 <_Z9PlayClipIv+0xac>
     4f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Screen>
     4f6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Screen+0x1>
     4fa:	02 97       	sbiw	r24, 0x02	; 2
     4fc:	d9 f4       	brne	.+54     	; 0x534 <_Z9PlayClipIv+0xac>
		lcd_cmd(0x01);
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_cmd(0x80);
     504:	80 e8       	ldi	r24, 0x80	; 128
     506:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_msg("No Effect");
     50a:	89 e2       	ldi	r24, 0x29	; 41
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
		lcd_cmd(0xC0);
     512:	80 ec       	ldi	r24, 0xC0	; 192
     514:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_msg("Effect 1");
     518:	80 e7       	ldi	r24, 0x70	; 112
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
		Screen = 5;
     520:	85 e0       	ldi	r24, 0x05	; 5
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Screen+0x1>
     528:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Screen>
		Row =0;
     52c:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <__data_end+0x1>
     530:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
     534:	08 95       	ret

00000536 <_Z11DeleteClipIv>:
		lcd_cmd(0xC0);
		lcd_msg("with Effect 1");
	}
}
void DeleteClipI(){
	if ((SELval == 8) && (Row != 0) && (Screen == 3)){
     536:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <SELval>
     53a:	88 30       	cpi	r24, 0x08	; 8
     53c:	39 f5       	brne	.+78     	; 0x58c <_Z11DeleteClipIv+0x56>
     53e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
     542:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__data_end+0x1>
     546:	89 2b       	or	r24, r25
     548:	09 f1       	breq	.+66     	; 0x58c <_Z11DeleteClipIv+0x56>
     54a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Screen>
     54e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Screen+0x1>
     552:	03 97       	sbiw	r24, 0x03	; 3
     554:	d9 f4       	brne	.+54     	; 0x58c <_Z11DeleteClipIv+0x56>
		lcd_cmd(0x01);
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_cmd(0x80);
     55c:	80 e8       	ldi	r24, 0x80	; 128
     55e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_msg("Press Select");
     562:	83 e3       	ldi	r24, 0x33	; 51
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
		lcd_cmd(0xC0);
     56a:	80 ec       	ldi	r24, 0xC0	; 192
     56c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_msg("to delete");
     570:	80 e4       	ldi	r24, 0x40	; 64
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
		Screen = 6;
     578:	86 e0       	ldi	r24, 0x06	; 6
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Screen+0x1>
     580:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Screen>
		Row = 0;
     584:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <__data_end+0x1>
     588:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
     58c:	08 95       	ret

0000058e <_Z12DeleteClipIIv>:
	}
}

void DeleteClipII(){
	if ((SELval == 8 ) && (Screen == 6)){
     58e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <SELval>
     592:	88 30       	cpi	r24, 0x08	; 8
     594:	d9 f4       	brne	.+54     	; 0x5cc <_Z12DeleteClipIIv+0x3e>
     596:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Screen>
     59a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Screen+0x1>
     59e:	06 97       	sbiw	r24, 0x06	; 6
     5a0:	a9 f4       	brne	.+42     	; 0x5cc <_Z12DeleteClipIIv+0x3e>
		lcd_cmd(0x01);
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_cmd(0x80);
     5a8:	80 e8       	ldi	r24, 0x80	; 128
     5aa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_msg("Deleted");
     5ae:	8a e4       	ldi	r24, 0x4A	; 74
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b6:	2f ef       	ldi	r18, 0xFF	; 255
     5b8:	83 ed       	ldi	r24, 0xD3	; 211
     5ba:	90 e3       	ldi	r25, 0x30	; 48
     5bc:	21 50       	subi	r18, 0x01	; 1
     5be:	80 40       	sbci	r24, 0x00	; 0
     5c0:	90 40       	sbci	r25, 0x00	; 0
     5c2:	e1 f7       	brne	.-8      	; 0x5bc <_Z12DeleteClipIIv+0x2e>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <_Z12DeleteClipIIv+0x38>
     5c6:	00 00       	nop
		_delay_ms(1000);
		Menu();
     5c8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <_Z4Menuv>
     5cc:	08 95       	ret

000005ce <_Z4Backv>:
	}
}
void Back(){
	if ((BACKval == 16) && ((Screen == 2) || (Screen == 3))){
     5ce:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <BACKval>
     5d2:	80 31       	cpi	r24, 0x10	; 16
     5d4:	49 f4       	brne	.+18     	; 0x5e8 <_Z4Backv+0x1a>
     5d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Screen>
     5da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Screen+0x1>
     5de:	02 97       	sbiw	r24, 0x02	; 2
     5e0:	02 97       	sbiw	r24, 0x02	; 2
     5e2:	10 f4       	brcc	.+4      	; 0x5e8 <_Z4Backv+0x1a>
		Menu();
     5e4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z4Menuv>
	}
	if ((BACKval == 16) && ((Screen == 4) || (Screen == 5))){
     5e8:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <BACKval>
     5ec:	80 31       	cpi	r24, 0x10	; 16
     5ee:	49 f4       	brne	.+18     	; 0x602 <_Z4Backv+0x34>
     5f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Screen>
     5f4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Screen+0x1>
     5f8:	04 97       	sbiw	r24, 0x04	; 4
     5fa:	02 97       	sbiw	r24, 0x02	; 2
     5fc:	10 f4       	brcc	.+4      	; 0x602 <_Z4Backv+0x34>
		PlayBackAudio();
     5fe:	0c 94 0c 02 	jmp	0x418	; 0x418 <_Z13PlayBackAudiov>
     602:	08 95       	ret

00000604 <_GLOBAL__sub_I__Z8i2c_initv>:
#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#endif
#ifndef sbi
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
#endif
String s = "";
     604:	64 e9       	ldi	r22, 0x94	; 148
     606:	71 e0       	ldi	r23, 0x01	; 1
     608:	8b e2       	ldi	r24, 0x2B	; 43
     60a:	92 e0       	ldi	r25, 0x02	; 2
     60c:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZN6StringC1EPKc>
char s2[]={};
int len;
File myfile,myfile_R;
     610:	80 e1       	ldi	r24, 0x10	; 16
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	0e 94 4c 09 	call	0x1298	; 0x1298 <_ZN5SDLib4FileC1Ev>
     618:	85 ef       	ldi	r24, 0xF5	; 245
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 4c 09 	call	0x1298	; 0x1298 <_ZN5SDLib4FileC1Ev>
const int chipselect = 10;
String line;
     620:	64 e9       	ldi	r22, 0x94	; 148
     622:	71 e0       	ldi	r23, 0x01	; 1
     624:	8f ee       	ldi	r24, 0xEF	; 239
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZN6StringC1EPKc>
String f_name =  "avr3.txt";
     62c:	62 e5       	ldi	r22, 0x52	; 82
     62e:	71 e0       	ldi	r23, 0x01	; 1
     630:	89 ee       	ldi	r24, 0xE9	; 233
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <_ZN6StringC1EPKc>

00000638 <_GLOBAL__sub_D__Z8i2c_initv>:
     638:	89 ee       	ldi	r24, 0xE9	; 233
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN6StringD1Ev>
String s = "";
char s2[]={};
int len;
File myfile,myfile_R;
const int chipselect = 10;
String line;
     640:	8f ee       	ldi	r24, 0xEF	; 239
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN6StringD1Ev>
#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#endif
#ifndef sbi
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
#endif
String s = "";
     648:	8b e2       	ldi	r24, 0x2B	; 43
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <_ZN6StringD1Ev>

00000650 <_Z10PlayClipIIv>:
		lcd_msg("Effect 1");
		Screen = 5;
		Row =0;
	}
}
void PlayClipII(){
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	6b 97       	sbiw	r28, 0x1b	; 27
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
	if ((SELval == 8) && (Row == 1) && (Screen == 4)){
     664:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <SELval>
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	09 f0       	breq	.+2      	; 0x66e <_Z10PlayClipIIv+0x1e>
     66c:	52 c0       	rjmp	.+164    	; 0x712 <_Z10PlayClipIIv+0xc2>
     66e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
     672:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__data_end+0x1>
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	09 f0       	breq	.+2      	; 0x67c <_Z10PlayClipIIv+0x2c>
     67a:	4f c0       	rjmp	.+158    	; 0x71a <_Z10PlayClipIIv+0xca>
     67c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Screen>
     680:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Screen+0x1>
     684:	04 97       	sbiw	r24, 0x04	; 4
     686:	09 f0       	breq	.+2      	; 0x68a <_Z10PlayClipIIv+0x3a>
     688:	48 c0       	rjmp	.+144    	; 0x71a <_Z10PlayClipIIv+0xca>
		lcd_cmd(0x01);
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_cmd(0x80);
     690:	80 e8       	ldi	r24, 0x80	; 128
     692:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_msg("Playing Audio 1");
     696:	8b e5       	ldi	r24, 0x5B	; 91
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
      // Open the specified file/directory with the supplied mode (e.g. read or
      // write, etc). Returns a File object for interacting with the file.
      // Note that currently only one file can be open at a time.
      File open(const char *filename, uint8_t mode = FILE_READ);
      File open(const String &filename, uint8_t mode = FILE_READ) {
        return open(filename.c_str(), mode);
     69e:	40 91 e9 01 	lds	r20, 0x01E9	; 0x8001e9 <f_name>
     6a2:	50 91 ea 01 	lds	r21, 0x01EA	; 0x8001ea <f_name+0x1>
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	6b e3       	ldi	r22, 0x3B	; 59
     6aa:	72 e0       	ldi	r23, 0x02	; 2
     6ac:	ce 01       	movw	r24, r28
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN5SDLib7SDClass4openEPKch>
		myfile_R = SD.open(f_name,FILE_READ);
     6b4:	be 01       	movw	r22, r28
     6b6:	6f 5f       	subi	r22, 0xFF	; 255
     6b8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ba:	85 ef       	ldi	r24, 0xF5	; 245
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN5SDLib4FileaSEOS0_>
		if (myfile_R) {
     6c2:	85 ef       	ldi	r24, 0xF5	; 245
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN5SDLib4FilecvbEv>
     6ca:	88 23       	and	r24, r24
     6cc:	11 f1       	breq	.+68     	; 0x712 <_Z10PlayClipIIv+0xc2>
			while (myfile_R.available()) {
     6ce:	85 ef       	ldi	r24, 0xF5	; 245
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN5SDLib4File9availableEv>
     6d6:	89 2b       	or	r24, r25
     6d8:	c1 f0       	breq	.+48     	; 0x70a <_Z10PlayClipIIv+0xba>
				line=myfile_R.readStringUntil(' ');
     6da:	40 e2       	ldi	r20, 0x20	; 32
     6dc:	65 ef       	ldi	r22, 0xF5	; 245
     6de:	71 e0       	ldi	r23, 0x01	; 1
     6e0:	ce 01       	movw	r24, r28
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	0e 94 9c 05 	call	0xb38	; 0xb38 <_ZN6Stream15readStringUntilEc>
     6e8:	be 01       	movw	r22, r28
     6ea:	6f 5f       	subi	r22, 0xFF	; 255
     6ec:	7f 4f       	sbci	r23, 0xFF	; 255
     6ee:	8f ee       	ldi	r24, 0xEF	; 239
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <_ZN6StringaSEOS_>
     6f6:	ce 01       	movw	r24, r28
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN6StringD1Ev>
				PORTD = line.toInt();
     6fe:	8f ee       	ldi	r24, 0xEF	; 239
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	0e 94 74 08 	call	0x10e8	; 0x10e8 <_ZNK6String5toIntEv>
     706:	6b b9       	out	0x0b, r22	; 11
		lcd_cmd(0x01);
		lcd_cmd(0x80);
		lcd_msg("Playing Audio 1");
		myfile_R = SD.open(f_name,FILE_READ);
		if (myfile_R) {
			while (myfile_R.available()) {
     708:	e2 cf       	rjmp	.-60     	; 0x6ce <_Z10PlayClipIIv+0x7e>
				line=myfile_R.readStringUntil(' ');
				PORTD = line.toInt();
				}
			myfile_R.close();
     70a:	85 ef       	ldi	r24, 0xF5	; 245
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN5SDLib4File5closeEv>
		}
	}
	if ((SELval == 8) && (Row == 2) && (Screen == 4)){
     712:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <SELval>
     716:	88 30       	cpi	r24, 0x08	; 8
     718:	e9 f4       	brne	.+58     	; 0x754 <_Z10PlayClipIIv+0x104>
     71a:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
     71e:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__data_end+0x1>
     722:	02 97       	sbiw	r24, 0x02	; 2
     724:	b9 f4       	brne	.+46     	; 0x754 <_Z10PlayClipIIv+0x104>
     726:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Screen>
     72a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Screen+0x1>
     72e:	04 97       	sbiw	r24, 0x04	; 4
     730:	89 f4       	brne	.+34     	; 0x754 <_Z10PlayClipIIv+0x104>
		lcd_cmd(0x01);
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_cmd(0x80);
     738:	80 e8       	ldi	r24, 0x80	; 128
     73a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_msg("Playing Audio 1");
     73e:	8b e5       	ldi	r24, 0x5B	; 91
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
		lcd_cmd(0xC0);
     746:	80 ec       	ldi	r24, 0xC0	; 192
     748:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_msg("with Effect 1");
     74c:	8b e6       	ldi	r24, 0x6B	; 107
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
	}
	if ((SELval == 8) && (Row == 1) && (Screen == 5)){
     754:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <SELval>
     758:	88 30       	cpi	r24, 0x08	; 8
     75a:	b1 f4       	brne	.+44     	; 0x788 <_Z10PlayClipIIv+0x138>
     75c:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
     760:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__data_end+0x1>
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	81 f4       	brne	.+32     	; 0x788 <_Z10PlayClipIIv+0x138>
     768:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Screen>
     76c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Screen+0x1>
     770:	05 97       	sbiw	r24, 0x05	; 5
     772:	51 f4       	brne	.+20     	; 0x788 <_Z10PlayClipIIv+0x138>
		lcd_cmd(0x01);
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_cmd(0x80);
     77a:	80 e8       	ldi	r24, 0x80	; 128
     77c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_msg("Playing Audio 2");
     780:	89 e7       	ldi	r24, 0x79	; 121
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
	}
	if ((SELval == 8) && (Row == 2) && (Screen == 5)){
     788:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <SELval>
     78c:	88 30       	cpi	r24, 0x08	; 8
     78e:	e9 f4       	brne	.+58     	; 0x7ca <_Z10PlayClipIIv+0x17a>
     790:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
     794:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__data_end+0x1>
     798:	02 97       	sbiw	r24, 0x02	; 2
     79a:	b9 f4       	brne	.+46     	; 0x7ca <_Z10PlayClipIIv+0x17a>
     79c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Screen>
     7a0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Screen+0x1>
     7a4:	05 97       	sbiw	r24, 0x05	; 5
     7a6:	89 f4       	brne	.+34     	; 0x7ca <_Z10PlayClipIIv+0x17a>
		lcd_cmd(0x01);
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_cmd(0x80);
     7ae:	80 e8       	ldi	r24, 0x80	; 128
     7b0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_msg("Playing Audio 2");
     7b4:	89 e7       	ldi	r24, 0x79	; 121
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
		lcd_cmd(0xC0);
     7bc:	80 ec       	ldi	r24, 0xC0	; 192
     7be:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
		lcd_msg("with Effect 1");
     7c2:	8b e6       	ldi	r24, 0x6B	; 107
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
	}
}
     7ca:	6b 96       	adiw	r28, 0x1b	; 27
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <_Z9Recordingv>:
		DeleteClipII();
		Back();
		
	}
}
void Recording(){
     7dc:	8f 92       	push	r8
     7de:	9f 92       	push	r9
     7e0:	af 92       	push	r10
     7e2:	bf 92       	push	r11
     7e4:	cf 92       	push	r12
     7e6:	df 92       	push	r13
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	6b 97       	sbiw	r28, 0x1b	; 27
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
	if (RECval ==1 ){
     804:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <RECval>
     808:	81 30       	cpi	r24, 0x01	; 1
     80a:	09 f0       	breq	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80c:	d7 c0       	rjmp	.+430    	; 0x9bc <__stack+0xbd>
     80e:	40 91 e9 01 	lds	r20, 0x01E9	; 0x8001e9 <f_name>
     812:	50 91 ea 01 	lds	r21, 0x01EA	; 0x8001ea <f_name+0x1>
     816:	27 e1       	ldi	r18, 0x17	; 23
     818:	6b e3       	ldi	r22, 0x3B	; 59
     81a:	72 e0       	ldi	r23, 0x02	; 2
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN5SDLib7SDClass4openEPKch>
		myfile = SD.open(f_name,FILE_WRITE);		
     824:	be 01       	movw	r22, r28
     826:	6f 5f       	subi	r22, 0xFF	; 255
     828:	7f 4f       	sbci	r23, 0xFF	; 255
     82a:	80 e1       	ldi	r24, 0x10	; 16
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN5SDLib4FileaSEOS0_>
			}
			RECval = PIND & (1<<PIND0);
			lcd_cmd(0x01);
			int y1=analogRead(A0);
		
			int mapped = map(y1, 0, 1023, 0, 255);
     832:	88 24       	eor	r8, r8
     834:	8a 94       	dec	r8
			else if (mapped<100) {
				char s2[] = {s[0],s[1],' '};
				myfile.write(s2,3);
			}
			else {
				char s2[] = {s[0],s[1],s[2],' '};
     836:	30 e2       	ldi	r19, 0x20	; 32
     838:	93 2e       	mov	r9, r19
	}
}
void Recording(){
	if (RECval ==1 ){
		myfile = SD.open(f_name,FILE_WRITE);		
		while ( RECval == 1 )
     83a:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <RECval>
     83e:	81 30       	cpi	r24, 0x01	; 1
     840:	09 f0       	breq	.+2      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     842:	9f c0       	rjmp	.+318    	; 0x982 <__stack+0x83>
		{
			lcd_cmd(0x01);
     844:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
			lcd_msg("Recording");
     848:	89 e8       	ldi	r24, 0x89	; 137
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
     850:	05 e0       	ldi	r16, 0x05	; 5
     852:	10 e0       	ldi	r17, 0x00	; 0
			for (int i = 0; i <= 4; i++){
				lcd_msg(".");
     854:	83 e9       	ldi	r24, 0x93	; 147
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
     85c:	2f ef       	ldi	r18, 0xFF	; 255
     85e:	80 e7       	ldi	r24, 0x70	; 112
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	21 50       	subi	r18, 0x01	; 1
     864:	80 40       	sbci	r24, 0x00	; 0
     866:	90 40       	sbci	r25, 0x00	; 0
     868:	e1 f7       	brne	.-8      	; 0x862 <__DATA_REGION_LENGTH__+0x62>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
     86c:	00 00       	nop
     86e:	01 50       	subi	r16, 0x01	; 1
     870:	11 09       	sbc	r17, r1
		myfile = SD.open(f_name,FILE_WRITE);		
		while ( RECval == 1 )
		{
			lcd_cmd(0x01);
			lcd_msg("Recording");
			for (int i = 0; i <= 4; i++){
     872:	81 f7       	brne	.-32     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
				lcd_msg(".");
				_delay_ms(50);
			}
			RECval = PIND & (1<<PIND0);
     874:	89 b1       	in	r24, 0x09	; 9
     876:	81 70       	andi	r24, 0x01	; 1
     878:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <RECval>
			lcd_cmd(0x01);
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7lcd_cmdc>
			int y1=analogRead(A0);
     882:	8e e0       	ldi	r24, 0x0E	; 14
     884:	0e 94 18 06 	call	0xc30	; 0xc30 <analogRead>
		
			int mapped = map(y1, 0, 1023, 0, 255);
     888:	bc 01       	movw	r22, r24
     88a:	99 0f       	add	r25, r25
     88c:	88 0b       	sbc	r24, r24
     88e:	99 0b       	sbc	r25, r25
     890:	1f 92       	push	r1
     892:	1f 92       	push	r1
     894:	1f 92       	push	r1
     896:	8f 92       	push	r8
     898:	a1 2c       	mov	r10, r1
     89a:	b1 2c       	mov	r11, r1
     89c:	65 01       	movw	r12, r10
     89e:	ee 24       	eor	r14, r14
     8a0:	ea 94       	dec	r14
     8a2:	13 e0       	ldi	r17, 0x03	; 3
     8a4:	f1 2e       	mov	r15, r17
     8a6:	00 e0       	ldi	r16, 0x00	; 0
     8a8:	10 e0       	ldi	r17, 0x00	; 0
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	a9 01       	movw	r20, r18
     8b0:	0e 94 c9 06 	call	0xd92	; 0xd92 <_Z3maplllll>
     8b4:	8b 01       	movw	r16, r22
			s.concat(mapped);
     8b6:	8b e2       	ldi	r24, 0x2B	; 43
     8b8:	92 e0       	ldi	r25, 0x02	; 2
     8ba:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZN6String6concatEi>

			if (mapped<10) {
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0a 30       	cpi	r16, 0x0A	; 10
     8c8:	11 05       	cpc	r17, r1
     8ca:	7c f4       	brge	.+30     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
				char s2[] = {s[0],' '};
     8cc:	1a 82       	std	Y+2, r1	; 0x02
     8ce:	19 82       	std	Y+1, r1	; 0x01
     8d0:	9a 82       	std	Y+2, r9	; 0x02
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	8b e2       	ldi	r24, 0x2B	; 43
     8d8:	92 e0       	ldi	r25, 0x02	; 2
     8da:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN6StringixEj>
     8de:	fc 01       	movw	r30, r24
     8e0:	80 81       	ld	r24, Z
     8e2:	89 83       	std	Y+1, r24	; 0x01
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     8e4:	42 e0       	ldi	r20, 0x02	; 2
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	3e c0       	rjmp	.+124    	; 0x966 <__stack+0x67>
				myfile.write(s2,2);
			}
			else if (mapped<100) {
     8ea:	04 36       	cpi	r16, 0x64	; 100
     8ec:	11 05       	cpc	r17, r1
     8ee:	cc f4       	brge	.+50     	; 0x922 <__stack+0x23>
				char s2[] = {s[0],s[1],' '};
     8f0:	19 82       	std	Y+1, r1	; 0x01
     8f2:	1a 82       	std	Y+2, r1	; 0x02
     8f4:	1b 82       	std	Y+3, r1	; 0x03
     8f6:	9b 82       	std	Y+3, r9	; 0x03
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	8b e2       	ldi	r24, 0x2B	; 43
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN6StringixEj>
     904:	fc 01       	movw	r30, r24
     906:	80 81       	ld	r24, Z
     908:	89 83       	std	Y+1, r24	; 0x01
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	8b e2       	ldi	r24, 0x2B	; 43
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN6StringixEj>
     916:	fc 01       	movw	r30, r24
     918:	80 81       	ld	r24, Z
     91a:	8a 83       	std	Y+2, r24	; 0x02
     91c:	43 e0       	ldi	r20, 0x03	; 3
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	22 c0       	rjmp	.+68     	; 0x966 <__stack+0x67>
				myfile.write(s2,3);
			}
			else {
				char s2[] = {s[0],s[1],s[2],' '};
     922:	19 82       	std	Y+1, r1	; 0x01
     924:	1a 82       	std	Y+2, r1	; 0x02
     926:	1b 82       	std	Y+3, r1	; 0x03
     928:	1c 82       	std	Y+4, r1	; 0x04
     92a:	9c 82       	std	Y+4, r9	; 0x04
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	8b e2       	ldi	r24, 0x2B	; 43
     932:	92 e0       	ldi	r25, 0x02	; 2
     934:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN6StringixEj>
     938:	fc 01       	movw	r30, r24
     93a:	80 81       	ld	r24, Z
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	61 e0       	ldi	r22, 0x01	; 1
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	8b e2       	ldi	r24, 0x2B	; 43
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN6StringixEj>
     94a:	fc 01       	movw	r30, r24
     94c:	80 81       	ld	r24, Z
     94e:	8a 83       	std	Y+2, r24	; 0x02
     950:	62 e0       	ldi	r22, 0x02	; 2
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	8b e2       	ldi	r24, 0x2B	; 43
     956:	92 e0       	ldi	r25, 0x02	; 2
     958:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN6StringixEj>
     95c:	fc 01       	movw	r30, r24
     95e:	80 81       	ld	r24, Z
     960:	8b 83       	std	Y+3, r24	; 0x03
     962:	44 e0       	ldi	r20, 0x04	; 4
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	be 01       	movw	r22, r28
     968:	6f 5f       	subi	r22, 0xFF	; 255
     96a:	7f 4f       	sbci	r23, 0xFF	; 255
     96c:	80 e1       	ldi	r24, 0x10	; 16
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	0e 94 a7 08 	call	0x114e	; 0x114e <_ZN5SDLib4File5writeEPKhj>
				myfile.write(s2,4);
			}
			s="";
     974:	64 e9       	ldi	r22, 0x94	; 148
     976:	71 e0       	ldi	r23, 0x01	; 1
     978:	8b e2       	ldi	r24, 0x2B	; 43
     97a:	92 e0       	ldi	r25, 0x02	; 2
     97c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_ZN6StringaSEPKc>
     980:	5c cf       	rjmp	.-328    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
		}
	myfile.close();
     982:	80 e1       	ldi	r24, 0x10	; 16
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN5SDLib4File5closeEv>
	lcd_msg("File Saved");
     98a:	85 e9       	ldi	r24, 0x95	; 149
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
     992:	ff ef       	ldi	r31, 0xFF	; 255
     994:	23 ed       	ldi	r18, 0xD3	; 211
     996:	80 e3       	ldi	r24, 0x30	; 48
     998:	f1 50       	subi	r31, 0x01	; 1
     99a:	20 40       	sbci	r18, 0x00	; 0
     99c:	80 40       	sbci	r24, 0x00	; 0
     99e:	e1 f7       	brne	.-8      	; 0x998 <__stack+0x99>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <__stack+0xa3>
     9a2:	00 00       	nop
	_delay_ms(1000);
	Menu();
     9a4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z4Menuv>
	Row=0;
     9a8:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <__data_end+0x1>
     9ac:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
	Screen=1;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Screen+0x1>
     9b8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Screen>
	}
}
     9bc:	6b 96       	adiw	r28, 0x1b	; 27
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	cf 90       	pop	r12
     9d8:	bf 90       	pop	r11
     9da:	af 90       	pop	r10
     9dc:	9f 90       	pop	r9
     9de:	8f 90       	pop	r8
     9e0:	08 95       	ret

000009e2 <main>:
void DeleteClipII();
void Back();

int main(void)
{
	 DDRD = 225;
     9e2:	81 ee       	ldi	r24, 0xE1	; 225
     9e4:	8a b9       	out	0x0a, r24	; 10
	 DDRD &=~((1<<PIND0)|(1<<PIND1)|(1<<PIND2)|(1<<PIND3)|(1<<PIND4)) ;
     9e6:	8a b1       	in	r24, 0x0a	; 10
     9e8:	80 7e       	andi	r24, 0xE0	; 224
     9ea:	8a b9       	out	0x0a, r24	; 10
	 while (!Serial){
		 ;
	 }*/
	 #if FASTADC
	 // set prescale to 16
	 sbi(ADCSRA,ADPS2) ;
     9ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9f0:	84 60       	ori	r24, 0x04	; 4
     9f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	 cbi(ADCSRA,ADPS1) ;
     9f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9fa:	8d 7f       	andi	r24, 0xFD	; 253
     9fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	 cbi(ADCSRA,ADPS0) ;
     a00:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a04:	8e 7f       	andi	r24, 0xFE	; 254
     a06:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	 #endif
	 if(!SD.begin(chipselect)){
     a0a:	6a e0       	ldi	r22, 0x0A	; 10
     a0c:	8b e3       	ldi	r24, 0x3B	; 59
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN5SDLib7SDClass5beginEh>
     a14:	81 11       	cpse	r24, r1
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <main+0x38>
     a18:	ff cf       	rjmp	.-2      	; 0xa18 <main+0x36>
		 //Serial.println("Card failed or not present !");
		 while(1);
	 }
	 
	
	i2c_init();
     a1a:	0e 94 93 00 	call	0x126	; 0x126 <_Z8i2c_initv>
	i2c_start();
     a1e:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9i2c_startv>
	i2c_write(0x70);
     a22:	80 e7       	ldi	r24, 0x70	; 112
     a24:	0e 94 a4 00 	call	0x148	; 0x148 <_Z9i2c_writec>
	lcd_init();
     a28:	0e 94 80 01 	call	0x300	; 0x300 <_Z8lcd_initv>
	lcd_msg("Voice Recorder");
     a2c:	80 ea       	ldi	r24, 0xA0	; 160
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 98 01 	call	0x330	; 0x330 <_Z7lcd_msgPc>
     a34:	2f ef       	ldi	r18, 0xFF	; 255
     a36:	80 e7       	ldi	r24, 0x70	; 112
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	21 50       	subi	r18, 0x01	; 1
     a3c:	80 40       	sbci	r24, 0x00	; 0
     a3e:	90 40       	sbci	r25, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <main+0x58>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <main+0x62>
     a44:	00 00       	nop
	_delay_ms(50);
	Menu();
     a46:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z4Menuv>
	/* Replace with your application code */
	while (1)
	{
		
		RECval = PIND & (1<<PIND0); /*1*/
     a4a:	89 b1       	in	r24, 0x09	; 9
     a4c:	81 70       	andi	r24, 0x01	; 1
     a4e:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <RECval>
		UPval = PIND & (1<<PIND1);/*2*/
     a52:	89 b1       	in	r24, 0x09	; 9
     a54:	82 70       	andi	r24, 0x02	; 2
     a56:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <UPval>
		DOWNval = PIND & (1<<PIND2);//4
     a5a:	89 b1       	in	r24, 0x09	; 9
     a5c:	84 70       	andi	r24, 0x04	; 4
     a5e:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <DOWNval>
		SELval = PIND & (1<<PIND3);//8
     a62:	89 b1       	in	r24, 0x09	; 9
     a64:	88 70       	andi	r24, 0x08	; 8
     a66:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <SELval>
		BACKval = PIND & (1<<PIND4); //16
     a6a:	89 b1       	in	r24, 0x09	; 9
     a6c:	80 71       	andi	r24, 0x10	; 16
     a6e:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <BACKval>
		
		Recording();
     a72:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_Z9Recordingv>
		Navigate();
     a76:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_Z8Navigatev>
		if ((SELval == 8) && (Screen == 1) && (Row == 1)){
     a7a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <SELval>
     a7e:	88 30       	cpi	r24, 0x08	; 8
     a80:	71 f4       	brne	.+28     	; 0xa9e <main+0xbc>
     a82:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Screen>
     a86:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Screen+0x1>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	41 f4       	brne	.+16     	; 0xa9e <main+0xbc>
     a8e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
     a92:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__data_end+0x1>
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	11 f4       	brne	.+4      	; 0xa9e <main+0xbc>
			PlayBackAudio();
     a9a:	0e 94 0c 02 	call	0x418	; 0x418 <_Z13PlayBackAudiov>
		}
		if ((SELval == 8) && (Screen == 1) && (Row == 2)){
     a9e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <SELval>
     aa2:	88 30       	cpi	r24, 0x08	; 8
     aa4:	71 f4       	brne	.+28     	; 0xac2 <main+0xe0>
     aa6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Screen>
     aaa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Screen+0x1>
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	41 f4       	brne	.+16     	; 0xac2 <main+0xe0>
     ab2:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
     ab6:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__data_end+0x1>
     aba:	02 97       	sbiw	r24, 0x02	; 2
     abc:	11 f4       	brne	.+4      	; 0xac2 <main+0xe0>
			DeleteAudio();
     abe:	0e 94 28 02 	call	0x450	; 0x450 <_Z11DeleteAudiov>
		}
		PlayClipI();
     ac2:	0e 94 44 02 	call	0x488	; 0x488 <_Z9PlayClipIv>
		PlayClipII();
     ac6:	0e 94 28 03 	call	0x650	; 0x650 <_Z10PlayClipIIv>
		DeleteClipI();
     aca:	0e 94 9b 02 	call	0x536	; 0x536 <_Z11DeleteClipIv>
		DeleteClipII();
     ace:	0e 94 c7 02 	call	0x58e	; 0x58e <_Z12DeleteClipIIv>
		Back();
     ad2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_Z4Backv>
	lcd_init();
	lcd_msg("Voice Recorder");
	_delay_ms(50);
	Menu();
	/* Replace with your application code */
	while (1)
     ad6:	b9 cf       	rjmp	.-142    	; 0xa4a <main+0x68>

00000ad8 <_ZN6Stream9timedReadEv>:
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
     ae2:	0e 94 0c 06 	call	0xc18	; 0xc18 <millis>
     ae6:	68 87       	std	Y+8, r22	; 0x08
     ae8:	79 87       	std	Y+9, r23	; 0x09
     aea:	8a 87       	std	Y+10, r24	; 0x0a
     aec:	9b 87       	std	Y+11, r25	; 0x0b
     aee:	e8 81       	ld	r30, Y
     af0:	f9 81       	ldd	r31, Y+1	; 0x01
     af2:	02 84       	ldd	r0, Z+10	; 0x0a
     af4:	f3 85       	ldd	r31, Z+11	; 0x0b
     af6:	e0 2d       	mov	r30, r0
     af8:	ce 01       	movw	r24, r28
     afa:	09 95       	icall
     afc:	97 ff       	sbrs	r25, 7
     afe:	17 c0       	rjmp	.+46     	; 0xb2e <_ZN6Stream9timedReadEv+0x56>
     b00:	0e 94 0c 06 	call	0xc18	; 0xc18 <millis>
     b04:	08 85       	ldd	r16, Y+8	; 0x08
     b06:	19 85       	ldd	r17, Y+9	; 0x09
     b08:	2a 85       	ldd	r18, Y+10	; 0x0a
     b0a:	3b 85       	ldd	r19, Y+11	; 0x0b
     b0c:	dc 01       	movw	r26, r24
     b0e:	cb 01       	movw	r24, r22
     b10:	80 1b       	sub	r24, r16
     b12:	91 0b       	sbc	r25, r17
     b14:	a2 0b       	sbc	r26, r18
     b16:	b3 0b       	sbc	r27, r19
     b18:	0c 81       	ldd	r16, Y+4	; 0x04
     b1a:	1d 81       	ldd	r17, Y+5	; 0x05
     b1c:	2e 81       	ldd	r18, Y+6	; 0x06
     b1e:	3f 81       	ldd	r19, Y+7	; 0x07
     b20:	80 17       	cp	r24, r16
     b22:	91 07       	cpc	r25, r17
     b24:	a2 07       	cpc	r26, r18
     b26:	b3 07       	cpc	r27, r19
     b28:	10 f3       	brcs	.-60     	; 0xaee <_ZN6Stream9timedReadEv+0x16>
     b2a:	8f ef       	ldi	r24, 0xFF	; 255
     b2c:	9f ef       	ldi	r25, 0xFF	; 255
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	08 95       	ret

00000b38 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	ec 01       	movw	r28, r24
     b46:	7b 01       	movw	r14, r22
     b48:	04 2f       	mov	r16, r20
  String ret;
     b4a:	64 e9       	ldi	r22, 0x94	; 148
     b4c:	71 e0       	ldi	r23, 0x01	; 1
     b4e:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZN6StringC1EPKc>
  int c = timedRead();
     b52:	c7 01       	movw	r24, r14
     b54:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
     b58:	10 e0       	ldi	r17, 0x00	; 0
     b5a:	97 fd       	sbrc	r25, 7
     b5c:	0b c0       	rjmp	.+22     	; 0xb74 <_ZN6Stream15readStringUntilEc+0x3c>
     b5e:	80 17       	cp	r24, r16
     b60:	91 07       	cpc	r25, r17
     b62:	41 f0       	breq	.+16     	; 0xb74 <_ZN6Stream15readStringUntilEc+0x3c>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     b64:	68 2f       	mov	r22, r24
     b66:	ce 01       	movw	r24, r28
     b68:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
     b6c:	c7 01       	movw	r24, r14
     b6e:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN6Stream9timedReadEv>

String Stream::readStringUntil(char terminator)
{
  String ret;
  int c = timedRead();
  while (c >= 0 && c != terminator)
     b72:	f3 cf       	rjmp	.-26     	; 0xb5a <_ZN6Stream15readStringUntilEc+0x22>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
     b74:	ce 01       	movw	r24, r28
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	08 95       	ret

00000b84 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	2f 93       	push	r18
     b90:	3f 93       	push	r19
     b92:	8f 93       	push	r24
     b94:	9f 93       	push	r25
     b96:	af 93       	push	r26
     b98:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     b9a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <timer0_millis>
     b9e:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <timer0_millis+0x1>
     ba2:	a0 91 34 02 	lds	r26, 0x0234	; 0x800234 <timer0_millis+0x2>
     ba6:	b0 91 35 02 	lds	r27, 0x0235	; 0x800235 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     baa:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     bae:	23 e0       	ldi	r18, 0x03	; 3
     bb0:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     bb2:	2d 37       	cpi	r18, 0x7D	; 125
     bb4:	20 f4       	brcc	.+8      	; 0xbbe <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	a1 1d       	adc	r26, r1
     bba:	b1 1d       	adc	r27, r1
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     bbe:	26 e8       	ldi	r18, 0x86	; 134
     bc0:	23 0f       	add	r18, r19
		m += 1;
     bc2:	02 96       	adiw	r24, 0x02	; 2
     bc4:	a1 1d       	adc	r26, r1
     bc6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     bc8:	20 93 31 02 	sts	0x0231, r18	; 0x800231 <timer0_fract>
	timer0_millis = m;
     bcc:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <timer0_millis>
     bd0:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <timer0_millis+0x1>
     bd4:	a0 93 34 02 	sts	0x0234, r26	; 0x800234 <timer0_millis+0x2>
     bd8:	b0 93 35 02 	sts	0x0235, r27	; 0x800235 <timer0_millis+0x3>
	timer0_overflow_count++;
     bdc:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <timer0_overflow_count>
     be0:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <timer0_overflow_count+0x1>
     be4:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <timer0_overflow_count+0x2>
     be8:	b0 91 39 02 	lds	r27, 0x0239	; 0x800239 <timer0_overflow_count+0x3>
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	a1 1d       	adc	r26, r1
     bf0:	b1 1d       	adc	r27, r1
     bf2:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <timer0_overflow_count>
     bf6:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <timer0_overflow_count+0x1>
     bfa:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <timer0_overflow_count+0x2>
     bfe:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <timer0_overflow_count+0x3>
}
     c02:	bf 91       	pop	r27
     c04:	af 91       	pop	r26
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	3f 91       	pop	r19
     c0c:	2f 91       	pop	r18
     c0e:	0f 90       	pop	r0
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	0f 90       	pop	r0
     c14:	1f 90       	pop	r1
     c16:	18 95       	reti

00000c18 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     c18:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     c1a:	f8 94       	cli
	m = timer0_millis;
     c1c:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <timer0_millis>
     c20:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <timer0_millis+0x1>
     c24:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <timer0_millis+0x2>
     c28:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <timer0_millis+0x3>
	SREG = oldSREG;
     c2c:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     c2e:	08 95       	ret

00000c30 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     c30:	8e 30       	cpi	r24, 0x0E	; 14
     c32:	08 f0       	brcs	.+2      	; 0xc36 <analogRead+0x6>
     c34:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     c36:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <analog_reference>
     c3a:	90 e4       	ldi	r25, 0x40	; 64
     c3c:	29 9f       	mul	r18, r25
     c3e:	90 01       	movw	r18, r0
     c40:	11 24       	eor	r1, r1
     c42:	87 70       	andi	r24, 0x07	; 7
     c44:	82 2b       	or	r24, r18
     c46:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     c4a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c4e:	80 64       	ori	r24, 0x40	; 64
     c50:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     c54:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c58:	86 fd       	sbrc	r24, 6
     c5a:	fc cf       	rjmp	.-8      	; 0xc54 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     c5c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
     c60:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     c64:	90 e0       	ldi	r25, 0x00	; 0
}
     c66:	92 2b       	or	r25, r18
     c68:	08 95       	ret

00000c6a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     c6a:	83 30       	cpi	r24, 0x03	; 3
     c6c:	81 f0       	breq	.+32     	; 0xc8e <turnOffPWM+0x24>
     c6e:	28 f4       	brcc	.+10     	; 0xc7a <turnOffPWM+0x10>
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	99 f0       	breq	.+38     	; 0xc9a <turnOffPWM+0x30>
     c74:	82 30       	cpi	r24, 0x02	; 2
     c76:	a1 f0       	breq	.+40     	; 0xca0 <turnOffPWM+0x36>
     c78:	08 95       	ret
     c7a:	87 30       	cpi	r24, 0x07	; 7
     c7c:	a9 f0       	breq	.+42     	; 0xca8 <turnOffPWM+0x3e>
     c7e:	88 30       	cpi	r24, 0x08	; 8
     c80:	b9 f0       	breq	.+46     	; 0xcb0 <turnOffPWM+0x46>
     c82:	84 30       	cpi	r24, 0x04	; 4
     c84:	d1 f4       	brne	.+52     	; 0xcba <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     c86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     c8a:	8f 7d       	andi	r24, 0xDF	; 223
     c8c:	03 c0       	rjmp	.+6      	; 0xc94 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     c8e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     c92:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     c94:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     c98:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     c9a:	84 b5       	in	r24, 0x24	; 36
     c9c:	8f 77       	andi	r24, 0x7F	; 127
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     ca0:	84 b5       	in	r24, 0x24	; 36
     ca2:	8f 7d       	andi	r24, 0xDF	; 223
     ca4:	84 bd       	out	0x24, r24	; 36
     ca6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     ca8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     cac:	8f 77       	andi	r24, 0x7F	; 127
     cae:	03 c0       	rjmp	.+6      	; 0xcb6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     cb0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     cb4:	8f 7d       	andi	r24, 0xDF	; 223
     cb6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     cba:	08 95       	ret

00000cbc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	fc 01       	movw	r30, r24
     cc4:	e4 58       	subi	r30, 0x84	; 132
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     cca:	fc 01       	movw	r30, r24
     ccc:	e0 57       	subi	r30, 0x70	; 112
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     cd2:	88 23       	and	r24, r24
     cd4:	61 f1       	breq	.+88     	; 0xd2e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	fc 01       	movw	r30, r24
     cde:	e2 55       	subi	r30, 0x52	; 82
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	c5 91       	lpm	r28, Z+
     ce4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     ce6:	fc 01       	movw	r30, r24
     ce8:	ec 55       	subi	r30, 0x5C	; 92
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	a5 91       	lpm	r26, Z+
     cee:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     cf0:	61 11       	cpse	r22, r1
     cf2:	09 c0       	rjmp	.+18     	; 0xd06 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     cf4:	9f b7       	in	r25, 0x3f	; 63
                cli();
     cf6:	f8 94       	cli
		*reg &= ~bit;
     cf8:	88 81       	ld	r24, Y
     cfa:	20 95       	com	r18
     cfc:	82 23       	and	r24, r18
     cfe:	88 83       	st	Y, r24
		*out &= ~bit;
     d00:	ec 91       	ld	r30, X
     d02:	2e 23       	and	r18, r30
     d04:	0b c0       	rjmp	.+22     	; 0xd1c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     d06:	62 30       	cpi	r22, 0x02	; 2
     d08:	61 f4       	brne	.+24     	; 0xd22 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     d0a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     d0c:	f8 94       	cli
		*reg &= ~bit;
     d0e:	88 81       	ld	r24, Y
     d10:	32 2f       	mov	r19, r18
     d12:	30 95       	com	r19
     d14:	83 23       	and	r24, r19
     d16:	88 83       	st	Y, r24
		*out |= bit;
     d18:	ec 91       	ld	r30, X
     d1a:	2e 2b       	or	r18, r30
     d1c:	2c 93       	st	X, r18
		SREG = oldSREG;
     d1e:	9f bf       	out	0x3f, r25	; 63
     d20:	06 c0       	rjmp	.+12     	; 0xd2e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     d22:	8f b7       	in	r24, 0x3f	; 63
                cli();
     d24:	f8 94       	cli
		*reg |= bit;
     d26:	e8 81       	ld	r30, Y
     d28:	2e 2b       	or	r18, r30
     d2a:	28 83       	st	Y, r18
		SREG = oldSREG;
     d2c:	8f bf       	out	0x3f, r24	; 63
	}
}
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	f9 01       	movw	r30, r18
     d40:	e8 59       	subi	r30, 0x98	; 152
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     d46:	f9 01       	movw	r30, r18
     d48:	e4 58       	subi	r30, 0x84	; 132
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     d4e:	f9 01       	movw	r30, r18
     d50:	e0 57       	subi	r30, 0x70	; 112
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     d56:	cc 23       	and	r28, r28
     d58:	c1 f0       	breq	.+48     	; 0xd8a <digitalWrite+0x56>
     d5a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     d5c:	81 11       	cpse	r24, r1
     d5e:	0e 94 35 06 	call	0xc6a	; 0xc6a <turnOffPWM>

	out = portOutputRegister(port);
     d62:	ec 2f       	mov	r30, r28
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	ec 55       	subi	r30, 0x5C	; 92
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	a5 91       	lpm	r26, Z+
     d70:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     d72:	9f b7       	in	r25, 0x3f	; 63
	cli();
     d74:	f8 94       	cli

	if (val == LOW) {
     d76:	11 11       	cpse	r17, r1
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <digitalWrite+0x4e>
		*out &= ~bit;
     d7a:	8c 91       	ld	r24, X
     d7c:	d0 95       	com	r29
     d7e:	d8 23       	and	r29, r24
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <digitalWrite+0x52>
	} else {
		*out |= bit;
     d82:	ec 91       	ld	r30, X
     d84:	de 2b       	or	r29, r30
     d86:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     d88:	9f bf       	out	0x3f, r25	; 63
}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
     d92:	4f 92       	push	r4
     d94:	5f 92       	push	r5
     d96:	6f 92       	push	r6
     d98:	7f 92       	push	r7
     d9a:	af 92       	push	r10
     d9c:	bf 92       	push	r11
     d9e:	cf 92       	push	r12
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	29 01       	movw	r4, r18
     db4:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     db6:	9b 01       	movw	r18, r22
     db8:	ac 01       	movw	r20, r24
     dba:	24 19       	sub	r18, r4
     dbc:	35 09       	sbc	r19, r5
     dbe:	46 09       	sbc	r20, r6
     dc0:	57 09       	sbc	r21, r7
     dc2:	89 89       	ldd	r24, Y+17	; 0x11
     dc4:	9a 89       	ldd	r25, Y+18	; 0x12
     dc6:	ab 89       	ldd	r26, Y+19	; 0x13
     dc8:	bc 89       	ldd	r27, Y+20	; 0x14
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	6a 19       	sub	r22, r10
     dd0:	7b 09       	sbc	r23, r11
     dd2:	8c 09       	sbc	r24, r12
     dd4:	9d 09       	sbc	r25, r13
     dd6:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__mulsi3>
     dda:	a8 01       	movw	r20, r16
     ddc:	97 01       	movw	r18, r14
     dde:	24 19       	sub	r18, r4
     de0:	35 09       	sbc	r19, r5
     de2:	46 09       	sbc	r20, r6
     de4:	57 09       	sbc	r21, r7
     de6:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <__divmodsi4>
     dea:	ca 01       	movw	r24, r20
     dec:	b9 01       	movw	r22, r18
     dee:	6a 0d       	add	r22, r10
     df0:	7b 1d       	adc	r23, r11
     df2:	8c 1d       	adc	r24, r12
     df4:	9d 1d       	adc	r25, r13
}
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	ff 90       	pop	r15
     e00:	ef 90       	pop	r14
     e02:	df 90       	pop	r13
     e04:	cf 90       	pop	r12
     e06:	bf 90       	pop	r11
     e08:	af 90       	pop	r10
     e0a:	7f 90       	pop	r7
     e0c:	6f 90       	pop	r6
     e0e:	5f 90       	pop	r5
     e10:	4f 90       	pop	r4
     e12:	08 95       	ret

00000e14 <_ZNK6String14StringIfHelperEv>:
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
}
     e14:	08 95       	ret

00000e16 <_ZN6StringD1Ev>:
     e16:	fc 01       	movw	r30, r24
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	11 f0       	breq	.+4      	; 0xe24 <_ZN6StringD1Ev+0xe>
     e20:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <free>
     e24:	08 95       	ret

00000e26 <_ZN6String10invalidateEv>:
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	ec 01       	movw	r28, r24
     e2c:	88 81       	ld	r24, Y
     e2e:	99 81       	ldd	r25, Y+1	; 0x01
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	11 f0       	breq	.+4      	; 0xe38 <_ZN6String10invalidateEv+0x12>
     e34:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <free>
     e38:	19 82       	std	Y+1, r1	; 0x01
     e3a:	18 82       	st	Y, r1
     e3c:	1d 82       	std	Y+5, r1	; 0x05
     e3e:	1c 82       	std	Y+4, r1	; 0x04
     e40:	1b 82       	std	Y+3, r1	; 0x03
     e42:	1a 82       	std	Y+2, r1	; 0x02
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	08 95       	ret

00000e4a <_ZN6String12changeBufferEj>:
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	ec 01       	movw	r28, r24
     e54:	8b 01       	movw	r16, r22
     e56:	6f 5f       	subi	r22, 0xFF	; 255
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	88 81       	ld	r24, Y
     e5c:	99 81       	ldd	r25, Y+1	; 0x01
     e5e:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <realloc>
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	31 f0       	breq	.+12     	; 0xe72 <_ZN6String12changeBufferEj+0x28>
     e66:	99 83       	std	Y+1, r25	; 0x01
     e68:	88 83       	st	Y, r24
     e6a:	1b 83       	std	Y+3, r17	; 0x03
     e6c:	0a 83       	std	Y+2, r16	; 0x02
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <_ZN6String12changeBufferEj+0x2a>
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	08 95       	ret

00000e7e <_ZN6String7reserveEj>:
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	ec 01       	movw	r28, r24
     e84:	88 81       	ld	r24, Y
     e86:	99 81       	ldd	r25, Y+1	; 0x01
     e88:	89 2b       	or	r24, r25
     e8a:	29 f0       	breq	.+10     	; 0xe96 <_ZN6String7reserveEj+0x18>
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	9b 81       	ldd	r25, Y+3	; 0x03
     e90:	86 17       	cp	r24, r22
     e92:	97 07       	cpc	r25, r23
     e94:	60 f4       	brcc	.+24     	; 0xeae <_ZN6String7reserveEj+0x30>
     e96:	ce 01       	movw	r24, r28
     e98:	0e 94 25 07 	call	0xe4a	; 0xe4a <_ZN6String12changeBufferEj>
     e9c:	88 23       	and	r24, r24
     e9e:	41 f0       	breq	.+16     	; 0xeb0 <_ZN6String7reserveEj+0x32>
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	9d 81       	ldd	r25, Y+5	; 0x05
     ea4:	89 2b       	or	r24, r25
     ea6:	19 f4       	brne	.+6      	; 0xeae <_ZN6String7reserveEj+0x30>
     ea8:	e8 81       	ld	r30, Y
     eaa:	f9 81       	ldd	r31, Y+1	; 0x01
     eac:	10 82       	st	Z, r1
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <_ZN6String4copyEPKcj>:
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	ec 01       	movw	r28, r24
     ec4:	7b 01       	movw	r14, r22
     ec6:	8a 01       	movw	r16, r20
     ec8:	ba 01       	movw	r22, r20
     eca:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN6String7reserveEj>
     ece:	81 11       	cpse	r24, r1
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <_ZN6String4copyEPKcj+0x24>
     ed2:	ce 01       	movw	r24, r28
     ed4:	0e 94 13 07 	call	0xe26	; 0xe26 <_ZN6String10invalidateEv>
     ed8:	07 c0       	rjmp	.+14     	; 0xee8 <_ZN6String4copyEPKcj+0x32>
     eda:	1d 83       	std	Y+5, r17	; 0x05
     edc:	0c 83       	std	Y+4, r16	; 0x04
     ede:	b7 01       	movw	r22, r14
     ee0:	88 81       	ld	r24, Y
     ee2:	99 81       	ldd	r25, Y+1	; 0x01
     ee4:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <strcpy>
     ee8:	ce 01       	movw	r24, r28
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	08 95       	ret

00000ef8 <_ZN6StringC1EPKc>:
     ef8:	fc 01       	movw	r30, r24
     efa:	11 82       	std	Z+1, r1	; 0x01
     efc:	10 82       	st	Z, r1
     efe:	13 82       	std	Z+3, r1	; 0x03
     f00:	12 82       	std	Z+2, r1	; 0x02
     f02:	15 82       	std	Z+5, r1	; 0x05
     f04:	14 82       	std	Z+4, r1	; 0x04
     f06:	61 15       	cp	r22, r1
     f08:	71 05       	cpc	r23, r1
     f0a:	51 f0       	breq	.+20     	; 0xf20 <_ZN6StringC1EPKc+0x28>
     f0c:	fb 01       	movw	r30, r22
     f0e:	01 90       	ld	r0, Z+
     f10:	00 20       	and	r0, r0
     f12:	e9 f7       	brne	.-6      	; 0xf0e <_ZN6StringC1EPKc+0x16>
     f14:	31 97       	sbiw	r30, 0x01	; 1
     f16:	af 01       	movw	r20, r30
     f18:	46 1b       	sub	r20, r22
     f1a:	57 0b       	sbc	r21, r23
     f1c:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <_ZN6String4copyEPKcj>
     f20:	08 95       	ret

00000f22 <_ZN6String4moveERS_>:
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	8c 01       	movw	r16, r24
     f2c:	eb 01       	movw	r28, r22
     f2e:	fc 01       	movw	r30, r24
     f30:	80 81       	ld	r24, Z
     f32:	91 81       	ldd	r25, Z+1	; 0x01
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	d1 f0       	breq	.+52     	; 0xf6c <_ZN6String4moveERS_+0x4a>
     f38:	68 81       	ld	r22, Y
     f3a:	79 81       	ldd	r23, Y+1	; 0x01
     f3c:	61 15       	cp	r22, r1
     f3e:	71 05       	cpc	r23, r1
     f40:	99 f0       	breq	.+38     	; 0xf68 <_ZN6String4moveERS_+0x46>
     f42:	2a e0       	ldi	r18, 0x0A	; 10
     f44:	37 e0       	ldi	r19, 0x07	; 7
     f46:	23 2b       	or	r18, r19
     f48:	79 f0       	breq	.+30     	; 0xf68 <_ZN6String4moveERS_+0x46>
     f4a:	42 81       	ldd	r20, Z+2	; 0x02
     f4c:	53 81       	ldd	r21, Z+3	; 0x03
     f4e:	2c 81       	ldd	r18, Y+4	; 0x04
     f50:	3d 81       	ldd	r19, Y+5	; 0x05
     f52:	42 17       	cp	r20, r18
     f54:	53 07       	cpc	r21, r19
     f56:	40 f0       	brcs	.+16     	; 0xf68 <_ZN6String4moveERS_+0x46>
     f58:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <strcpy>
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	f8 01       	movw	r30, r16
     f62:	95 83       	std	Z+5, r25	; 0x05
     f64:	84 83       	std	Z+4, r24	; 0x04
     f66:	13 c0       	rjmp	.+38     	; 0xf8e <_ZN6String4moveERS_+0x6c>
     f68:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <free>
     f6c:	88 81       	ld	r24, Y
     f6e:	99 81       	ldd	r25, Y+1	; 0x01
     f70:	f8 01       	movw	r30, r16
     f72:	91 83       	std	Z+1, r25	; 0x01
     f74:	80 83       	st	Z, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	9b 81       	ldd	r25, Y+3	; 0x03
     f7a:	93 83       	std	Z+3, r25	; 0x03
     f7c:	82 83       	std	Z+2, r24	; 0x02
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	9d 81       	ldd	r25, Y+5	; 0x05
     f82:	95 83       	std	Z+5, r25	; 0x05
     f84:	84 83       	std	Z+4, r24	; 0x04
     f86:	19 82       	std	Y+1, r1	; 0x01
     f88:	18 82       	st	Y, r1
     f8a:	1b 82       	std	Y+3, r1	; 0x03
     f8c:	1a 82       	std	Y+2, r1	; 0x02
     f8e:	1d 82       	std	Y+5, r1	; 0x05
     f90:	1c 82       	std	Y+4, r1	; 0x04
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	08 95       	ret

00000f9c <_ZN6StringaSEOS_>:
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	ec 01       	movw	r28, r24
     fa2:	86 17       	cp	r24, r22
     fa4:	97 07       	cpc	r25, r23
     fa6:	11 f0       	breq	.+4      	; 0xfac <_ZN6StringaSEOS_+0x10>
     fa8:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN6String4moveERS_>
     fac:	ce 01       	movw	r24, r28
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	08 95       	ret

00000fb4 <_ZN6StringaSEPKc>:
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	ec 01       	movw	r28, r24
     fba:	61 15       	cp	r22, r1
     fbc:	71 05       	cpc	r23, r1
     fbe:	59 f0       	breq	.+22     	; 0xfd6 <_ZN6StringaSEPKc+0x22>
     fc0:	fb 01       	movw	r30, r22
     fc2:	01 90       	ld	r0, Z+
     fc4:	00 20       	and	r0, r0
     fc6:	e9 f7       	brne	.-6      	; 0xfc2 <_ZN6StringaSEPKc+0xe>
     fc8:	31 97       	sbiw	r30, 0x01	; 1
     fca:	af 01       	movw	r20, r30
     fcc:	46 1b       	sub	r20, r22
     fce:	57 0b       	sbc	r21, r23
     fd0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN6String4copyEPKcj>
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <_ZN6StringaSEPKc+0x26>
     fd6:	0e 94 13 07 	call	0xe26	; 0xe26 <_ZN6String10invalidateEv>
     fda:	ce 01       	movw	r24, r28
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <_ZN6String6concatEPKcj>:
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	61 15       	cp	r22, r1
     ff0:	71 05       	cpc	r23, r1
     ff2:	11 f4       	brne	.+4      	; 0xff8 <_ZN6String6concatEPKcj+0x16>
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	1c c0       	rjmp	.+56     	; 0x1030 <_ZN6String6concatEPKcj+0x4e>
     ff8:	41 15       	cp	r20, r1
     ffa:	51 05       	cpc	r21, r1
     ffc:	c1 f0       	breq	.+48     	; 0x102e <_ZN6String6concatEPKcj+0x4c>
     ffe:	7b 01       	movw	r14, r22
    1000:	ec 01       	movw	r28, r24
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	8a 01       	movw	r16, r20
    1008:	08 0f       	add	r16, r24
    100a:	19 1f       	adc	r17, r25
    100c:	b8 01       	movw	r22, r16
    100e:	ce 01       	movw	r24, r28
    1010:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN6String7reserveEj>
    1014:	88 23       	and	r24, r24
    1016:	71 f3       	breq	.-36     	; 0xff4 <_ZN6String6concatEPKcj+0x12>
    1018:	28 81       	ld	r18, Y
    101a:	39 81       	ldd	r19, Y+1	; 0x01
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	9d 81       	ldd	r25, Y+5	; 0x05
    1020:	b7 01       	movw	r22, r14
    1022:	82 0f       	add	r24, r18
    1024:	93 1f       	adc	r25, r19
    1026:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <strcpy>
    102a:	1d 83       	std	Y+5, r17	; 0x05
    102c:	0c 83       	std	Y+4, r16	; 0x04
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	08 95       	ret

0000103e <_ZN6String6concatEc>:
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	00 d0       	rcall	.+0      	; 0x1044 <_ZN6String6concatEc+0x6>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	69 83       	std	Y+1, r22	; 0x01
    104a:	1a 82       	std	Y+2, r1	; 0x02
    104c:	41 e0       	ldi	r20, 0x01	; 1
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	be 01       	movw	r22, r28
    1052:	6f 5f       	subi	r22, 0xFF	; 255
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6String6concatEPKcj>
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <_ZN6String6concatEi>:
    1064:	ef 92       	push	r14
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	28 97       	sbiw	r28, 0x08	; 8
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	7c 01       	movw	r14, r24
    1082:	cb 01       	movw	r24, r22
    1084:	4a e0       	ldi	r20, 0x0A	; 10
    1086:	8e 01       	movw	r16, r28
    1088:	0f 5f       	subi	r16, 0xFF	; 255
    108a:	1f 4f       	sbci	r17, 0xFF	; 255
    108c:	b8 01       	movw	r22, r16
    108e:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <__itoa_ncheck>
    1092:	f8 01       	movw	r30, r16
    1094:	01 90       	ld	r0, Z+
    1096:	00 20       	and	r0, r0
    1098:	e9 f7       	brne	.-6      	; 0x1094 <_ZN6String6concatEi+0x30>
    109a:	31 97       	sbiw	r30, 0x01	; 1
    109c:	af 01       	movw	r20, r30
    109e:	40 1b       	sub	r20, r16
    10a0:	51 0b       	sbc	r21, r17
    10a2:	b8 01       	movw	r22, r16
    10a4:	c7 01       	movw	r24, r14
    10a6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN6String6concatEPKcj>
    10aa:	28 96       	adiw	r28, 0x08	; 8
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	08 95       	ret

000010c4 <_ZN6StringixEj>:
    10c4:	fc 01       	movw	r30, r24
    10c6:	24 81       	ldd	r18, Z+4	; 0x04
    10c8:	35 81       	ldd	r19, Z+5	; 0x05
    10ca:	62 17       	cp	r22, r18
    10cc:	73 07       	cpc	r23, r19
    10ce:	20 f4       	brcc	.+8      	; 0x10d8 <_ZN6StringixEj+0x14>
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	29 f4       	brne	.+10     	; 0x10e2 <_ZN6StringixEj+0x1e>
    10d8:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <_ZZN6StringixEjE19dummy_writable_char>
    10dc:	8a e3       	ldi	r24, 0x3A	; 58
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	08 95       	ret
    10e2:	86 0f       	add	r24, r22
    10e4:	97 1f       	adc	r25, r23
    10e6:	08 95       	ret

000010e8 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    10e8:	fc 01       	movw	r30, r24
    10ea:	80 81       	ld	r24, Z
    10ec:	91 81       	ldd	r25, Z+1	; 0x01
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	11 f0       	breq	.+4      	; 0x10f6 <_ZNK6String5toIntEv+0xe>
    10f2:	0c 94 74 1f 	jmp	0x3ee8	; 0x3ee8 <atol>
	return 0;
}
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	cb 01       	movw	r24, r22
    10fc:	08 95       	ret

000010fe <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    10fe:	08 95       	ret

00001100 <_ZN5SDLib4File5writeEh>:
  if (! _file) {
    return false;
  }

  return _file->seekSet(pos);
}
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	1f 92       	push	r1
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	69 83       	std	Y+1, r22	; 0x01
    110c:	dc 01       	movw	r26, r24
    110e:	ed 91       	ld	r30, X+
    1110:	fc 91       	ld	r31, X
    1112:	02 80       	ldd	r0, Z+2	; 0x02
    1114:	f3 81       	ldd	r31, Z+3	; 0x03
    1116:	e0 2d       	mov	r30, r0
    1118:	41 e0       	ldi	r20, 0x01	; 1
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	be 01       	movw	r22, r28
    111e:	6f 5f       	subi	r22, 0xFF	; 255
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	09 95       	icall
    1124:	0f 90       	pop	r0
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	08 95       	ret

0000112c <_ZN5SDLib4File17availableForWriteEv>:
    112c:	dc 01       	movw	r26, r24
    112e:	59 96       	adiw	r26, 0x19	; 25
    1130:	8d 91       	ld	r24, X+
    1132:	9c 91       	ld	r25, X
    1134:	5a 97       	sbiw	r26, 0x1a	; 26
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	39 f0       	breq	.+14     	; 0x1148 <_ZN5SDLib4File17availableForWriteEv+0x1c>
    113a:	dc 01       	movw	r26, r24
    113c:	ed 91       	ld	r30, X+
    113e:	fc 91       	ld	r31, X
    1140:	04 80       	ldd	r0, Z+4	; 0x04
    1142:	f5 81       	ldd	r31, Z+5	; 0x05
    1144:	e0 2d       	mov	r30, r0
    1146:	09 94       	ijmp
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	08 95       	ret

0000114e <_ZN5SDLib4File5writeEPKhj>:
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	ec 01       	movw	r28, r24
    1154:	89 8d       	ldd	r24, Y+25	; 0x19
    1156:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	39 f4       	brne	.+14     	; 0x116a <_ZN5SDLib4File5writeEPKhj+0x1c>
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9b 83       	std	Y+3, r25	; 0x03
    1162:	8a 83       	std	Y+2, r24	; 0x02
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0b c0       	rjmp	.+22     	; 0x1180 <_ZN5SDLib4File5writeEPKhj+0x32>
    116a:	fc 01       	movw	r30, r24
    116c:	13 82       	std	Z+3, r1	; 0x03
    116e:	12 82       	std	Z+2, r1	; 0x02
    1170:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN6SdFile5writeEPKvj>
    1174:	e9 8d       	ldd	r30, Y+25	; 0x19
    1176:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1178:	22 81       	ldd	r18, Z+2	; 0x02
    117a:	33 81       	ldd	r19, Z+3	; 0x03
    117c:	23 2b       	or	r18, r19
    117e:	71 f7       	brne	.-36     	; 0x115c <_ZN5SDLib4File5writeEPKhj+0xe>
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	08 95       	ret

00001186 <_ZN5SDLib4File5flushEv>:
    1186:	fc 01       	movw	r30, r24
    1188:	81 8d       	ldd	r24, Z+25	; 0x19
    118a:	92 8d       	ldd	r25, Z+26	; 0x1a
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	19 f0       	breq	.+6      	; 0x1196 <_ZN5SDLib4File5flushEv+0x10>
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <_ZN6SdFile4syncEh>
    1196:	08 95       	ret

00001198 <_ZN6SdFile4readEv>:
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	1f 92       	push	r1
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	41 e0       	ldi	r20, 0x01	; 1
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	be 01       	movw	r22, r28
    11a8:	6f 5f       	subi	r22, 0xFF	; 255
    11aa:	7f 4f       	sbci	r23, 0xFF	; 255
    11ac:	0e 94 55 10 	call	0x20aa	; 0x20aa <_ZN6SdFile4readEPvj>
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	19 f4       	brne	.+6      	; 0x11ba <_ZN6SdFile4readEv+0x22>
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <_ZN6SdFile4readEv+0x26>
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	9f ef       	ldi	r25, 0xFF	; 255
    11be:	0f 90       	pop	r0
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <_ZN5SDLib4File4readEv>:
    11c6:	fc 01       	movw	r30, r24
    11c8:	81 8d       	ldd	r24, Z+25	; 0x19
    11ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	11 f0       	breq	.+4      	; 0x11d4 <_ZN5SDLib4File4readEv+0xe>
    11d0:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <_ZN6SdFile4readEv>
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	9f ef       	ldi	r25, 0xFF	; 255
    11d8:	08 95       	ret

000011da <_ZN5SDLib4File4peekEv>:
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	fc 01       	movw	r30, r24
    11e4:	81 8d       	ldd	r24, Z+25	; 0x19
    11e6:	92 8d       	ldd	r25, Z+26	; 0x1a
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	b9 f0       	breq	.+46     	; 0x121a <_ZN5SDLib4File4peekEv+0x40>
    11ec:	ef 01       	movw	r28, r30
    11ee:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN6SdFile4readEv>
    11f2:	8c 01       	movw	r16, r24
    11f4:	0f 3f       	cpi	r16, 0xFF	; 255
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	18 07       	cpc	r17, r24
    11fa:	91 f0       	breq	.+36     	; 0x1220 <_ZN5SDLib4File4peekEv+0x46>
    11fc:	89 8d       	ldd	r24, Y+25	; 0x19
    11fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1200:	fc 01       	movw	r30, r24
    1202:	42 85       	ldd	r20, Z+10	; 0x0a
    1204:	53 85       	ldd	r21, Z+11	; 0x0b
    1206:	64 85       	ldd	r22, Z+12	; 0x0c
    1208:	75 85       	ldd	r23, Z+13	; 0x0d
    120a:	41 50       	subi	r20, 0x01	; 1
    120c:	51 09       	sbc	r21, r1
    120e:	61 09       	sbc	r22, r1
    1210:	71 09       	sbc	r23, r1
    1212:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN6SdFile7seekSetEm>
    1216:	c8 01       	movw	r24, r16
    1218:	05 c0       	rjmp	.+10     	; 0x1224 <_ZN5SDLib4File4peekEv+0x4a>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <_ZN5SDLib4File4peekEv+0x4a>
    1220:	8f ef       	ldi	r24, 0xFF	; 255
    1222:	9f ef       	ldi	r25, 0xFF	; 255
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	08 95       	ret

0000122e <_ZN5SDLib4FileC1E6SdFilePKc>:
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	ec 01       	movw	r28, r24
    123c:	7b 01       	movw	r14, r22
    123e:	8a 01       	movw	r16, r20
    1240:	1b 82       	std	Y+3, r1	; 0x03
    1242:	1a 82       	std	Y+2, r1	; 0x02
    1244:	88 ee       	ldi	r24, 0xE8	; 232
    1246:	93 e0       	ldi	r25, 0x03	; 3
    1248:	a0 e0       	ldi	r26, 0x00	; 0
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	8c 83       	std	Y+4, r24	; 0x04
    124e:	9d 83       	std	Y+5, r25	; 0x05
    1250:	ae 83       	std	Y+6, r26	; 0x06
    1252:	bf 83       	std	Y+7, r27	; 0x07
    1254:	83 eb       	ldi	r24, 0xB3	; 179
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	99 83       	std	Y+1, r25	; 0x01
    125a:	88 83       	st	Y, r24
    125c:	8d e1       	ldi	r24, 0x1D	; 29
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <malloc>
    1264:	9a 8f       	std	Y+26, r25	; 0x1a
    1266:	89 8f       	std	Y+25, r24	; 0x19
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	79 f0       	breq	.+30     	; 0x128a <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
    126c:	2d e1       	ldi	r18, 0x1D	; 29
    126e:	f7 01       	movw	r30, r14
    1270:	dc 01       	movw	r26, r24
    1272:	01 90       	ld	r0, Z+
    1274:	0d 92       	st	X+, r0
    1276:	2a 95       	dec	r18
    1278:	e1 f7       	brne	.-8      	; 0x1272 <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
    127a:	4c e0       	ldi	r20, 0x0C	; 12
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	b8 01       	movw	r22, r16
    1280:	ce 01       	movw	r24, r28
    1282:	0c 96       	adiw	r24, 0x0c	; 12
    1284:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <strncpy>
    1288:	18 8e       	std	Y+24, r1	; 0x18
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	ef 90       	pop	r14
    1296:	08 95       	ret

00001298 <_ZN5SDLib4FileC1Ev>:
    1298:	fc 01       	movw	r30, r24
    129a:	13 82       	std	Z+3, r1	; 0x03
    129c:	12 82       	std	Z+2, r1	; 0x02
    129e:	88 ee       	ldi	r24, 0xE8	; 232
    12a0:	93 e0       	ldi	r25, 0x03	; 3
    12a2:	a0 e0       	ldi	r26, 0x00	; 0
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	84 83       	std	Z+4, r24	; 0x04
    12a8:	95 83       	std	Z+5, r25	; 0x05
    12aa:	a6 83       	std	Z+6, r26	; 0x06
    12ac:	b7 83       	std	Z+7, r27	; 0x07
    12ae:	83 eb       	ldi	r24, 0xB3	; 179
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	91 83       	std	Z+1, r25	; 0x01
    12b4:	80 83       	st	Z, r24
    12b6:	12 8e       	std	Z+26, r1	; 0x1a
    12b8:	11 8e       	std	Z+25, r1	; 0x19
    12ba:	14 86       	std	Z+12, r1	; 0x0c
    12bc:	08 95       	ret

000012be <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) {
    12be:	dc 01       	movw	r26, r24
    12c0:	59 96       	adiw	r26, 0x19	; 25
    12c2:	ed 91       	ld	r30, X+
    12c4:	fc 91       	ld	r31, X
    12c6:	5a 97       	sbiw	r26, 0x1a	; 26
    12c8:	30 97       	sbiw	r30, 0x00	; 0
    12ca:	29 f0       	breq	.+10     	; 0x12d6 <_ZN5SDLib4File8positionEv+0x18>
    uint32_t curCluster(void) const {
      return curCluster_;
    }
    /** \return The current position for a file or directory. */
    uint32_t curPosition(void) const {
      return curPosition_;
    12cc:	62 85       	ldd	r22, Z+10	; 0x0a
    12ce:	73 85       	ldd	r23, Z+11	; 0x0b
    12d0:	84 85       	ldd	r24, Z+12	; 0x0c
    12d2:	95 85       	ldd	r25, Z+13	; 0x0d
    return -1;
  }
  return _file->curPosition();
    12d4:	08 95       	ret
  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) {
    return -1;
    12d6:	6f ef       	ldi	r22, 0xFF	; 255
    12d8:	7f ef       	ldi	r23, 0xFF	; 255
    12da:	cb 01       	movw	r24, r22
  }
  return _file->curPosition();
}
    12dc:	08 95       	ret

000012de <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) {
    12de:	dc 01       	movw	r26, r24
    12e0:	59 96       	adiw	r26, 0x19	; 25
    12e2:	ed 91       	ld	r30, X+
    12e4:	fc 91       	ld	r31, X
    12e6:	5a 97       	sbiw	r26, 0x1a	; 26
    12e8:	30 97       	sbiw	r30, 0x00	; 0
    12ea:	29 f0       	breq	.+10     	; 0x12f6 <_ZN5SDLib4File4sizeEv+0x18>
      return dirIndex_;
    }
    static void dirName(const dir_t& dir, char* name);
    /** \return The total number of bytes in a file or directory. */
    uint32_t fileSize(void) const {
      return fileSize_;
    12ec:	63 89       	ldd	r22, Z+19	; 0x13
    12ee:	74 89       	ldd	r23, Z+20	; 0x14
    12f0:	85 89       	ldd	r24, Z+21	; 0x15
    12f2:	96 89       	ldd	r25, Z+22	; 0x16
    return 0;
  }
  return _file->fileSize();
    12f4:	08 95       	ret
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) {
    return 0;
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	cb 01       	movw	r24, r22
  }
  return _file->fileSize();
}
    12fc:	08 95       	ret

000012fe <_ZN5SDLib4File9availableEv>:
    return _file->read(buf, nbyte);
  }
  return 0;
}

int File::available() {
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
  if (! _file) {
    130a:	fc 01       	movw	r30, r24
    130c:	21 8d       	ldd	r18, Z+25	; 0x19
    130e:	32 8d       	ldd	r19, Z+26	; 0x1a
    1310:	23 2b       	or	r18, r19
    1312:	d9 f0       	breq	.+54     	; 0x134a <_ZN5SDLib4File9availableEv+0x4c>
    1314:	ec 01       	movw	r28, r24
    return 0;
  }

  uint32_t n = size() - position();
    1316:	0e 94 6f 09 	call	0x12de	; 0x12de <_ZN5SDLib4File4sizeEv>
    131a:	6b 01       	movw	r12, r22
    131c:	7c 01       	movw	r14, r24
    131e:	ce 01       	movw	r24, r28
    1320:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    1324:	a7 01       	movw	r20, r14
    1326:	96 01       	movw	r18, r12
    1328:	26 1b       	sub	r18, r22
    132a:	37 0b       	sbc	r19, r23
    132c:	48 0b       	sbc	r20, r24
    132e:	59 0b       	sbc	r21, r25
    1330:	da 01       	movw	r26, r20
    1332:	c9 01       	movw	r24, r18
    1334:	81 15       	cp	r24, r1
    1336:	30 e8       	ldi	r19, 0x80	; 128
    1338:	93 07       	cpc	r25, r19
    133a:	a1 05       	cpc	r26, r1
    133c:	b1 05       	cpc	r27, r1
    133e:	38 f0       	brcs	.+14     	; 0x134e <_ZN5SDLib4File9availableEv+0x50>
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	9f e7       	ldi	r25, 0x7F	; 127
    1344:	a0 e0       	ldi	r26, 0x00	; 0
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	02 c0       	rjmp	.+4      	; 0x134e <_ZN5SDLib4File9availableEv+0x50>
  return 0;
}

int File::available() {
  if (! _file) {
    return 0;
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
  }

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	08 95       	ret

0000135c <_ZN5SDLib4File5closeEv>:
    return 0;
  }
  return _file->fileSize();
}

void File::close() {
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	ec 01       	movw	r28, r24
  if (_file) {
    1362:	89 8d       	ldd	r24, Y+25	; 0x19
    1364:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	41 f0       	breq	.+16     	; 0x137a <_ZN5SDLib4File5closeEv+0x1e>
    _file->close();
    136a:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN6SdFile5closeEv>
    free(_file);
    136e:	89 8d       	ldd	r24, Y+25	; 0x19
    1370:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1372:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <free>
    _file = 0;
    1376:	1a 8e       	std	Y+26, r1	; 0x1a
    1378:	19 8e       	std	Y+25, r1	; 0x19
      nfilecount--;
      Serial.print("Deleted ");
      Serial.println(nfilecount, DEC);
    */
  }
}
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) {
    1380:	dc 01       	movw	r26, r24
    1382:	59 96       	adiw	r26, 0x19	; 25
    1384:	ed 91       	ld	r30, X+
    1386:	fc 91       	ld	r31, X
    1388:	5a 97       	sbiw	r26, 0x1a	; 26
    138a:	30 97       	sbiw	r30, 0x00	; 0
    138c:	21 f0       	breq	.+8      	; 0x1396 <_ZN5SDLib4FilecvbEv+0x16>
    uint8_t isFile(void) const {
      return type_ == FAT_FILE_TYPE_NORMAL;
    }
    /** \return True if this is a SdFile for an open file/directory else false. */
    uint8_t isOpen(void) const {
      return type_ != FAT_FILE_TYPE_CLOSED;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	95 81       	ldd	r25, Z+5	; 0x05
    1392:	91 11       	cpse	r25, r1
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <_ZN5SDLib4FilecvbEv+0x18>
    return  _file->isOpen();
  }
  return false;
    1396:	80 e0       	ldi	r24, 0x00	; 0
}
    1398:	08 95       	ret

0000139a <_ZN8SdVolume4initEP7Sd2Card>:

  void File::rewindDirectory(void) {
    if (isDirectory()) {
      _file->rewind();
    }
  }
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	ec 01       	movw	r28, r24
    13a4:	8b 01       	movw	r16, r22
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <_ZN8SdVolume4initEP7Sd2Cardh>
    13ac:	81 11       	cpse	r24, r1
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <_ZN8SdVolume4initEP7Sd2Card+0x28>
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	b8 01       	movw	r22, r16
    13b4:	ce 01       	movw	r24, r28
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <_ZN8SdVolume4initEP7Sd2Cardh>
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	08 95       	ret

000013ce <_ZN5SDLib7SDClass5beginEh>:
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	ec 01       	movw	r28, r24
    13d8:	16 2f       	mov	r17, r22
    13da:	8f a5       	ldd	r24, Y+47	; 0x2f
    13dc:	88 23       	and	r24, r24
    13de:	21 f0       	breq	.+8      	; 0x13e8 <_ZN5SDLib7SDClass5beginEh+0x1a>
    13e0:	ce 01       	movw	r24, r28
    13e2:	8a 96       	adiw	r24, 0x2a	; 42
    13e4:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN6SdFile5closeEv>
    13e8:	41 2f       	mov	r20, r17
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	ce 01       	movw	r24, r28
    13ee:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN7Sd2Card4initEhh>
    13f2:	88 23       	and	r24, r24
    13f4:	89 f0       	breq	.+34     	; 0x1418 <_ZN5SDLib7SDClass5beginEh+0x4a>
    13f6:	8e 01       	movw	r16, r28
    13f8:	04 5f       	subi	r16, 0xF4	; 244
    13fa:	1f 4f       	sbci	r17, 0xFF	; 255
    13fc:	be 01       	movw	r22, r28
    13fe:	c8 01       	movw	r24, r16
    1400:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN8SdVolume4initEP7Sd2Card>
    1404:	88 23       	and	r24, r24
    1406:	41 f0       	breq	.+16     	; 0x1418 <_ZN5SDLib7SDClass5beginEh+0x4a>
    1408:	b8 01       	movw	r22, r16
    140a:	ce 01       	movw	r24, r28
    140c:	8a 96       	adiw	r24, 0x2a	; 42
    140e:	0e 94 04 10 	call	0x2008	; 0x2008 <_ZN6SdFile8openRootEP8SdVolume>
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	81 11       	cpse	r24, r1
    1416:	01 c0       	rjmp	.+2      	; 0x141a <_ZN5SDLib7SDClass5beginEh+0x4c>
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	89 2f       	mov	r24, r25
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	08 95       	ret

00001426 <_ZN6SdFileC1ERKS_>:
    1426:	fc 01       	movw	r30, r24
    1428:	db 01       	movw	r26, r22
    142a:	12 96       	adiw	r26, 0x02	; 2
    142c:	8d 91       	ld	r24, X+
    142e:	9c 91       	ld	r25, X
    1430:	13 97       	sbiw	r26, 0x03	; 3
    1432:	93 83       	std	Z+3, r25	; 0x03
    1434:	82 83       	std	Z+2, r24	; 0x02
    1436:	87 ec       	ldi	r24, 0xC7	; 199
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	91 83       	std	Z+1, r25	; 0x01
    143c:	80 83       	st	Z, r24
    143e:	14 96       	adiw	r26, 0x04	; 4
    1440:	8c 91       	ld	r24, X
    1442:	14 97       	sbiw	r26, 0x04	; 4
    1444:	84 83       	std	Z+4, r24	; 0x04
    1446:	15 96       	adiw	r26, 0x05	; 5
    1448:	8c 91       	ld	r24, X
    144a:	15 97       	sbiw	r26, 0x05	; 5
    144c:	85 83       	std	Z+5, r24	; 0x05
    144e:	16 96       	adiw	r26, 0x06	; 6
    1450:	4d 91       	ld	r20, X+
    1452:	5d 91       	ld	r21, X+
    1454:	6d 91       	ld	r22, X+
    1456:	7c 91       	ld	r23, X
    1458:	19 97       	sbiw	r26, 0x09	; 9
    145a:	46 83       	std	Z+6, r20	; 0x06
    145c:	57 83       	std	Z+7, r21	; 0x07
    145e:	60 87       	std	Z+8, r22	; 0x08
    1460:	71 87       	std	Z+9, r23	; 0x09
    1462:	1a 96       	adiw	r26, 0x0a	; 10
    1464:	4d 91       	ld	r20, X+
    1466:	5d 91       	ld	r21, X+
    1468:	6d 91       	ld	r22, X+
    146a:	7c 91       	ld	r23, X
    146c:	1d 97       	sbiw	r26, 0x0d	; 13
    146e:	42 87       	std	Z+10, r20	; 0x0a
    1470:	53 87       	std	Z+11, r21	; 0x0b
    1472:	64 87       	std	Z+12, r22	; 0x0c
    1474:	75 87       	std	Z+13, r23	; 0x0d
    1476:	1e 96       	adiw	r26, 0x0e	; 14
    1478:	4d 91       	ld	r20, X+
    147a:	5d 91       	ld	r21, X+
    147c:	6d 91       	ld	r22, X+
    147e:	7c 91       	ld	r23, X
    1480:	51 97       	sbiw	r26, 0x11	; 17
    1482:	46 87       	std	Z+14, r20	; 0x0e
    1484:	57 87       	std	Z+15, r21	; 0x0f
    1486:	60 8b       	std	Z+16, r22	; 0x10
    1488:	71 8b       	std	Z+17, r23	; 0x11
    148a:	52 96       	adiw	r26, 0x12	; 18
    148c:	8c 91       	ld	r24, X
    148e:	52 97       	sbiw	r26, 0x12	; 18
    1490:	82 8b       	std	Z+18, r24	; 0x12
    1492:	53 96       	adiw	r26, 0x13	; 19
    1494:	4d 91       	ld	r20, X+
    1496:	5d 91       	ld	r21, X+
    1498:	6d 91       	ld	r22, X+
    149a:	7c 91       	ld	r23, X
    149c:	56 97       	sbiw	r26, 0x16	; 22
    149e:	43 8b       	std	Z+19, r20	; 0x13
    14a0:	54 8b       	std	Z+20, r21	; 0x14
    14a2:	65 8b       	std	Z+21, r22	; 0x15
    14a4:	76 8b       	std	Z+22, r23	; 0x16
    14a6:	57 96       	adiw	r26, 0x17	; 23
    14a8:	4d 91       	ld	r20, X+
    14aa:	5d 91       	ld	r21, X+
    14ac:	6d 91       	ld	r22, X+
    14ae:	7c 91       	ld	r23, X
    14b0:	5a 97       	sbiw	r26, 0x1a	; 26
    14b2:	47 8b       	std	Z+23, r20	; 0x17
    14b4:	50 8f       	std	Z+24, r21	; 0x18
    14b6:	61 8f       	std	Z+25, r22	; 0x19
    14b8:	72 8f       	std	Z+26, r23	; 0x1a
    14ba:	5b 96       	adiw	r26, 0x1b	; 27
    14bc:	8d 91       	ld	r24, X+
    14be:	9c 91       	ld	r25, X
    14c0:	5c 97       	sbiw	r26, 0x1c	; 28
    14c2:	94 8f       	std	Z+28, r25	; 0x1c
    14c4:	83 8f       	std	Z+27, r24	; 0x1b
    14c6:	08 95       	ret

000014c8 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
    14c8:	4f 92       	push	r4
    14ca:	5f 92       	push	r5
    14cc:	6f 92       	push	r6
    14ce:	7f 92       	push	r7
    14d0:	8f 92       	push	r8
    14d2:	9f 92       	push	r9
    14d4:	af 92       	push	r10
    14d6:	bf 92       	push	r11
    14d8:	cf 92       	push	r12
    14da:	df 92       	push	r13
    14dc:	ef 92       	push	r14
    14de:	ff 92       	push	r15
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	c7 54       	subi	r28, 0x47	; 71
    14ee:	d1 09       	sbc	r29, r1
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	5c 01       	movw	r10, r24
    14fc:	4a 01       	movw	r8, r20
    14fe:	39 01       	movw	r6, r18
    1500:	19 a2       	std	Y+33, r1	; 0x21
    1502:	18 a2       	std	Y+32, r1	; 0x20
    1504:	87 ec       	ldi	r24, 0xC7	; 199
    1506:	91 e0       	ldi	r25, 0x01	; 1
    1508:	9f 8f       	std	Y+31, r25	; 0x1f
    150a:	8e 8f       	std	Y+30, r24	; 0x1e
    150c:	1b a2       	std	Y+35, r1	; 0x23
    150e:	1c 82       	std	Y+4, r1	; 0x04
    1510:	1b 82       	std	Y+3, r1	; 0x03
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	1e 82       	std	Y+6, r1	; 0x06
    1518:	64 5f       	subi	r22, 0xF4	; 244
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	6e 01       	movw	r12, r28
    151e:	8e e1       	ldi	r24, 0x1E	; 30
    1520:	c8 0e       	add	r12, r24
    1522:	d1 1c       	adc	r13, r1
    1524:	c6 01       	movw	r24, r12
    1526:	0e 94 04 10 	call	0x2008	; 0x2008 <_ZN6SdFile8openRootEP8SdVolume>
    152a:	74 01       	movw	r14, r8
    152c:	8e 01       	movw	r16, r28
    152e:	0f 5f       	subi	r16, 0xFF	; 255
    1530:	1f 4f       	sbci	r17, 0xFF	; 255
    1532:	5c 2c       	mov	r5, r12
    1534:	4d 2c       	mov	r4, r13
    1536:	6f e2       	ldi	r22, 0x2F	; 47
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	c7 01       	movw	r24, r14
    153c:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <strchr>
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	09 f4       	brne	.+2      	; 0x1546 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x7e>
    1544:	43 c0       	rjmp	.+134    	; 0x15cc <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x104>
    1546:	f7 01       	movw	r30, r14
    1548:	20 81       	ld	r18, Z
    154a:	2f 32       	cpi	r18, 0x2F	; 47
    154c:	71 f4       	brne	.+28     	; 0x156a <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xa2>
    154e:	ff ef       	ldi	r31, 0xFF	; 255
    1550:	ef 1a       	sub	r14, r31
    1552:	ff 0a       	sbc	r15, r31
    1554:	90 2f       	mov	r25, r16
    1556:	81 2f       	mov	r24, r17
    1558:	05 2d       	mov	r16, r5
    155a:	14 2d       	mov	r17, r4
    155c:	2c 01       	movw	r4, r24
    155e:	c2 01       	movw	r24, r4
    1560:	50 2e       	mov	r5, r16
    1562:	41 2e       	mov	r4, r17
    1564:	09 2f       	mov	r16, r25
    1566:	18 2f       	mov	r17, r24
    1568:	e6 cf       	rjmp	.-52     	; 0x1536 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6e>
    156a:	8e 19       	sub	r24, r14
    156c:	8d 30       	cpi	r24, 0x0D	; 13
    156e:	08 f0       	brcs	.+2      	; 0x1572 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xaa>
    1570:	8c e0       	ldi	r24, 0x0C	; 12
    1572:	c8 2e       	mov	r12, r24
    1574:	d1 2c       	mov	r13, r1
    1576:	a6 01       	movw	r20, r12
    1578:	b7 01       	movw	r22, r14
    157a:	ce 01       	movw	r24, r28
    157c:	cb 96       	adiw	r24, 0x3b	; 59
    157e:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <strncpy>
    1582:	eb e3       	ldi	r30, 0x3B	; 59
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	ec 0f       	add	r30, r28
    1588:	fd 1f       	adc	r31, r29
    158a:	ec 0d       	add	r30, r12
    158c:	fd 1d       	adc	r31, r13
    158e:	10 82       	st	Z, r1
    1590:	c8 01       	movw	r24, r16
    1592:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN6SdFile5closeEv>
    1596:	21 e0       	ldi	r18, 0x01	; 1
    1598:	ae 01       	movw	r20, r28
    159a:	45 5c       	subi	r20, 0xC5	; 197
    159c:	5f 4f       	sbci	r21, 0xFF	; 255
    159e:	65 2d       	mov	r22, r5
    15a0:	74 2d       	mov	r23, r4
    15a2:	c8 01       	movw	r24, r16
    15a4:	0e 94 07 14 	call	0x280e	; 0x280e <_ZN6SdFile4openEPS_PKch>
    15a8:	81 11       	cpse	r24, r1
    15aa:	09 c0       	rjmp	.+18     	; 0x15be <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    15ac:	f5 01       	movw	r30, r10
    15ae:	13 82       	std	Z+3, r1	; 0x03
    15b0:	12 82       	std	Z+2, r1	; 0x02
    15b2:	87 ec       	ldi	r24, 0xC7	; 199
    15b4:	91 e0       	ldi	r25, 0x01	; 1
    15b6:	91 83       	std	Z+1, r25	; 0x01
    15b8:	80 83       	st	Z, r24
    15ba:	15 82       	std	Z+5, r1	; 0x05
    15bc:	11 c0       	rjmp	.+34     	; 0x15e0 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x118>
    15be:	ec 0c       	add	r14, r12
    15c0:	fd 1c       	adc	r15, r13
    15c2:	85 2d       	mov	r24, r5
    15c4:	94 2d       	mov	r25, r4
    15c6:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN6SdFile5closeEv>
    15ca:	c9 cf       	rjmp	.-110    	; 0x155e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x96>
    15cc:	e8 18       	sub	r14, r8
    15ce:	f9 08       	sbc	r15, r9
    15d0:	f3 01       	movw	r30, r6
    15d2:	f1 82       	std	Z+1, r15	; 0x01
    15d4:	e0 82       	st	Z, r14
    15d6:	65 2d       	mov	r22, r5
    15d8:	74 2d       	mov	r23, r4
    15da:	c5 01       	movw	r24, r10
    15dc:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN6SdFileC1ERKS_>
    15e0:	c5 01       	movw	r24, r10
    15e2:	c9 5b       	subi	r28, 0xB9	; 185
    15e4:	df 4f       	sbci	r29, 0xFF	; 255
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	df 90       	pop	r13
    15fe:	cf 90       	pop	r12
    1600:	bf 90       	pop	r11
    1602:	af 90       	pop	r10
    1604:	9f 90       	pop	r9
    1606:	8f 90       	pop	r8
    1608:	7f 90       	pop	r7
    160a:	6f 90       	pop	r6
    160c:	5f 90       	pop	r5
    160e:	4f 90       	pop	r4
    1610:	08 95       	ret

00001612 <_ZN5SDLib7SDClass4openEPKch>:
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	c9 55       	subi	r28, 0x59	; 89
    1626:	d1 09       	sbc	r29, r1
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	7c 01       	movw	r14, r24
    1634:	8a 01       	movw	r16, r20
    1636:	d2 2e       	mov	r13, r18
    1638:	9e 01       	movw	r18, r28
    163a:	28 5a       	subi	r18, 0xA8	; 168
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	ce 01       	movw	r24, r28
    1640:	cb 96       	adiw	r24, 0x3b	; 59
    1642:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
    1646:	6a 96       	adiw	r28, 0x1a	; 26
    1648:	8e ad       	ldd	r24, Y+62	; 0x3e
    164a:	9f ad       	ldd	r25, Y+63	; 0x3f
    164c:	6a 97       	sbiw	r28, 0x1a	; 26
    164e:	08 0f       	add	r16, r24
    1650:	19 1f       	adc	r17, r25
    1652:	f8 01       	movw	r30, r16
    1654:	80 81       	ld	r24, Z
    1656:	81 11       	cpse	r24, r1
    1658:	0a c0       	rjmp	.+20     	; 0x166e <_ZN5SDLib7SDClass4openEPKch+0x5c>
    165a:	be 01       	movw	r22, r28
    165c:	65 5c       	subi	r22, 0xC5	; 197
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	ce 01       	movw	r24, r28
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN6SdFileC1ERKS_>
    1668:	41 ec       	ldi	r20, 0xC1	; 193
    166a:	51 e0       	ldi	r21, 0x01	; 1
    166c:	33 c0       	rjmp	.+102    	; 0x16d4 <_ZN5SDLib7SDClass4openEPKch+0xc2>
    166e:	19 a2       	std	Y+33, r1	; 0x21
    1670:	18 a2       	std	Y+32, r1	; 0x20
    1672:	87 ec       	ldi	r24, 0xC7	; 199
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	9f 8f       	std	Y+31, r25	; 0x1f
    1678:	8e 8f       	std	Y+30, r24	; 0x1e
    167a:	1b a2       	std	Y+35, r1	; 0x23
    167c:	21 96       	adiw	r28, 0x01	; 1
    167e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1680:	21 97       	sbiw	r28, 0x01	; 1
    1682:	81 11       	cpse	r24, r1
    1684:	04 c0       	rjmp	.+8      	; 0x168e <_ZN5SDLib7SDClass4openEPKch+0x7c>
    1686:	c7 01       	movw	r24, r14
    1688:	0e 94 4c 09 	call	0x1298	; 0x1298 <_ZN5SDLib4FileC1Ev>
    168c:	29 c0       	rjmp	.+82     	; 0x16e0 <_ZN5SDLib7SDClass4openEPKch+0xce>
    168e:	2d 2d       	mov	r18, r13
    1690:	a8 01       	movw	r20, r16
    1692:	be 01       	movw	r22, r28
    1694:	65 5c       	subi	r22, 0xC5	; 197
    1696:	7f 4f       	sbci	r23, 0xFF	; 255
    1698:	ce 01       	movw	r24, r28
    169a:	4e 96       	adiw	r24, 0x1e	; 30
    169c:	0e 94 07 14 	call	0x280e	; 0x280e <_ZN6SdFile4openEPS_PKch>
    16a0:	88 23       	and	r24, r24
    16a2:	89 f3       	breq	.-30     	; 0x1686 <_ZN5SDLib7SDClass4openEPKch+0x74>
    16a4:	ce 01       	movw	r24, r28
    16a6:	cb 96       	adiw	r24, 0x3b	; 59
    16a8:	0e 94 8d 12 	call	0x251a	; 0x251a <_ZN6SdFile5closeEv>
    16ac:	8d 2d       	mov	r24, r13
    16ae:	86 70       	andi	r24, 0x06	; 6
    16b0:	86 30       	cpi	r24, 0x06	; 6
    16b2:	41 f4       	brne	.+16     	; 0x16c4 <_ZN5SDLib7SDClass4openEPKch+0xb2>
    16b4:	49 a9       	ldd	r20, Y+49	; 0x31
    16b6:	5a a9       	ldd	r21, Y+50	; 0x32
    16b8:	6b a9       	ldd	r22, Y+51	; 0x33
    16ba:	7c a9       	ldd	r23, Y+52	; 0x34
    16bc:	ce 01       	movw	r24, r28
    16be:	4e 96       	adiw	r24, 0x1e	; 30
    16c0:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN6SdFile7seekSetEm>
    16c4:	be 01       	movw	r22, r28
    16c6:	62 5e       	subi	r22, 0xE2	; 226
    16c8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ca:	ce 01       	movw	r24, r28
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN6SdFileC1ERKS_>
    16d2:	a8 01       	movw	r20, r16
    16d4:	be 01       	movw	r22, r28
    16d6:	6f 5f       	subi	r22, 0xFF	; 255
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	c7 01       	movw	r24, r14
    16dc:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN5SDLib4FileC1E6SdFilePKc>
    16e0:	c7 01       	movw	r24, r14
    16e2:	c7 5a       	subi	r28, 0xA7	; 167
    16e4:	df 4f       	sbci	r29, 0xFF	; 255
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	ff 90       	pop	r15
    16fa:	ef 90       	pop	r14
    16fc:	df 90       	pop	r13
    16fe:	08 95       	ret

00001700 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
   \brief Raw access to SD and SDHC flash memory cards.
*/
class Sd2Card {
  public:
    /** Construct an instance of Sd2Card. */
    Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    1700:	eb e3       	ldi	r30, 0x3B	; 59
    1702:	f2 e0       	ldi	r31, 0x02	; 2
    1704:	15 82       	std	Z+5, r1	; 0x05
    1706:	16 82       	std	Z+6, r1	; 0x06
    1708:	11 86       	std	Z+9, r1	; 0x09
    170a:	13 86       	std	Z+11, r1	; 0x0b
   \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
*/
class SdVolume {
  public:
    /** Create an instance of SdVolume */
    SdVolume(void) : allocSearchStart_(2), fatType_(0) {}
    170c:	82 e0       	ldi	r24, 0x02	; 2
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	a0 e0       	ldi	r26, 0x00	; 0
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	84 87       	std	Z+12, r24	; 0x0c
    1716:	95 87       	std	Z+13, r25	; 0x0d
    1718:	a6 87       	std	Z+14, r26	; 0x0e
    171a:	b7 87       	std	Z+15, r27	; 0x0f
    171c:	13 a2       	std	Z+35, r1	; 0x23
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    171e:	15 a6       	std	Z+45, r1	; 0x2d
    1720:	14 a6       	std	Z+44, r1	; 0x2c
   \brief Access FAT16 and FAT32 files on SD and SDHC cards.
*/
class SdFile : public Print {
  public:
    /** Create an instance of SdFile. */
    SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1722:	87 ec       	ldi	r24, 0xC7	; 199
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	93 a7       	std	Z+43, r25	; 0x2b
    1728:	82 a7       	std	Z+42, r24	; 0x2a
    172a:	17 a6       	std	Z+47, r1	; 0x2f
    172c:	08 95       	ret

0000172e <_ZN8SPIClass14endTransactionEv.part.3>:

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    172e:	9f b7       	in	r25, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	20 91 92 04 	lds	r18, 0x0492	; 0x800492 <_ZN8SPIClass13interruptModeE>
    1736:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <_ZN8SPIClass13interruptSaveE>
    173a:	21 30       	cpi	r18, 0x01	; 1
    173c:	19 f4       	brne	.+6      	; 0x1744 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    173e:	8d bb       	out	0x1d, r24	; 29
    1740:	9f bf       	out	0x3f, r25	; 63
    1742:	08 95       	ret
    1744:	8f bf       	out	0x3f, r24	; 63
    1746:	08 95       	ret

00001748 <_ZN11SPISettingsC1Emhh>:
    1748:	0f 93       	push	r16
    174a:	fc 01       	movw	r30, r24
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	92 e1       	ldi	r25, 0x12	; 18
    1750:	aa e7       	ldi	r26, 0x7A	; 122
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	48 17       	cp	r20, r24
    1758:	59 07       	cpc	r21, r25
    175a:	6a 07       	cpc	r22, r26
    175c:	7b 07       	cpc	r23, r27
    175e:	40 f4       	brcc	.+16     	; 0x1770 <_ZN11SPISettingsC1Emhh+0x28>
    1760:	b6 95       	lsr	r27
    1762:	a7 95       	ror	r26
    1764:	97 95       	ror	r25
    1766:	87 95       	ror	r24
    1768:	3f 5f       	subi	r19, 0xFF	; 255
    176a:	36 30       	cpi	r19, 0x06	; 6
    176c:	a1 f7       	brne	.-24     	; 0x1756 <_ZN11SPISettingsC1Emhh+0xe>
    176e:	37 e0       	ldi	r19, 0x07	; 7
    1770:	91 e0       	ldi	r25, 0x01	; 1
    1772:	93 27       	eor	r25, r19
    1774:	22 23       	and	r18, r18
    1776:	11 f0       	breq	.+4      	; 0x177c <_ZN11SPISettingsC1Emhh+0x34>
    1778:	20 e5       	ldi	r18, 0x50	; 80
    177a:	01 c0       	rjmp	.+2      	; 0x177e <_ZN11SPISettingsC1Emhh+0x36>
    177c:	20 e7       	ldi	r18, 0x70	; 112
    177e:	0c 70       	andi	r16, 0x0C	; 12
    1780:	89 2f       	mov	r24, r25
    1782:	86 95       	lsr	r24
    1784:	08 2b       	or	r16, r24
    1786:	02 2b       	or	r16, r18
    1788:	00 83       	st	Z, r16
    178a:	91 70       	andi	r25, 0x01	; 1
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	0f 91       	pop	r16
    1790:	08 95       	ret

00001792 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    1792:	20 91 92 04 	lds	r18, 0x0492	; 0x800492 <_ZN8SPIClass13interruptModeE>
    1796:	22 23       	and	r18, r18
    1798:	99 f0       	breq	.+38     	; 0x17c0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    179a:	4f b7       	in	r20, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	20 91 92 04 	lds	r18, 0x0492	; 0x800492 <_ZN8SPIClass13interruptModeE>
    17a2:	21 30       	cpi	r18, 0x01	; 1
    17a4:	59 f4       	brne	.+22     	; 0x17bc <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    17a6:	2d b3       	in	r18, 0x1d	; 29
    17a8:	20 93 90 04 	sts	0x0490, r18	; 0x800490 <_ZN8SPIClass13interruptSaveE>
    17ac:	3d b3       	in	r19, 0x1d	; 29
    17ae:	20 91 91 04 	lds	r18, 0x0491	; 0x800491 <_ZN8SPIClass13interruptMaskE>
    17b2:	20 95       	com	r18
    17b4:	23 23       	and	r18, r19
    17b6:	2d bb       	out	0x1d, r18	; 29
    17b8:	4f bf       	out	0x3f, r20	; 63
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    17bc:	40 93 90 04 	sts	0x0490, r20	; 0x800490 <_ZN8SPIClass13interruptSaveE>
    17c0:	8c bd       	out	0x2c, r24	; 44
    17c2:	9d bd       	out	0x2d, r25	; 45
    17c4:	08 95       	ret

000017c6 <_ZN8SPIClass8transferEh>:
    17c6:	8e bd       	out	0x2e, r24	; 46
    17c8:	00 00       	nop
    17ca:	0d b4       	in	r0, 0x2d	; 45
    17cc:	07 fe       	sbrs	r0, 7
    17ce:	fd cf       	rjmp	.-6      	; 0x17ca <_ZN8SPIClass8transferEh+0x4>
    17d0:	8e b5       	in	r24, 0x2e	; 46
    17d2:	08 95       	ret

000017d4 <_ZL6spiRecv>:
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <_ZN8SPIClass8transferEh>

000017da <_ZN7Sd2Card14chipSelectHighEv>:
    17da:	61 e0       	ldi	r22, 0x01	; 1
    17dc:	fc 01       	movw	r30, r24
    17de:	84 81       	ldd	r24, Z+4	; 0x04
    17e0:	0e 94 9a 06 	call	0xd34	; 0xd34 <digitalWrite>
    17e4:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <_ZL20chip_select_asserted>
    17e8:	88 23       	and	r24, r24
    17ea:	39 f0       	breq	.+14     	; 0x17fa <_ZN7Sd2Card14chipSelectHighEv+0x20>
    17ec:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <_ZL20chip_select_asserted>
    17f0:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <_ZN8SPIClass13interruptModeE>
    17f4:	81 11       	cpse	r24, r1
    17f6:	0c 94 97 0b 	jmp	0x172e	; 0x172e <_ZN8SPIClass14endTransactionEv.part.3>
    17fa:	08 95       	ret

000017fc <_ZN7Sd2Card13chipSelectLowEv>:
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	ec 01       	movw	r28, r24
    1802:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <_ZL20chip_select_asserted>
    1806:	81 11       	cpse	r24, r1
    1808:	09 c0       	rjmp	.+18     	; 0x181c <_ZN7Sd2Card13chipSelectLowEv+0x20>
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <_ZL20chip_select_asserted>
    1810:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZL8settings>
    1814:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <_ZL8settings+0x1>
    1818:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN8SPIClass16beginTransactionE11SPISettings>
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	8c 81       	ldd	r24, Y+4	; 0x04
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <digitalWrite>

00001828 <_ZN7Sd2Card7readEndEv>:
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	ec 01       	movw	r28, r24
    182e:	8e 81       	ldd	r24, Y+6	; 0x06
    1830:	88 23       	and	r24, r24
    1832:	89 f0       	breq	.+34     	; 0x1856 <_ZN7Sd2Card7readEndEv+0x2e>
    1834:	8f 81       	ldd	r24, Y+7	; 0x07
    1836:	98 85       	ldd	r25, Y+8	; 0x08
    1838:	9c 01       	movw	r18, r24
    183a:	2f 5f       	subi	r18, 0xFF	; 255
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	38 87       	std	Y+8, r19	; 0x08
    1840:	2f 83       	std	Y+7, r18	; 0x07
    1842:	82 30       	cpi	r24, 0x02	; 2
    1844:	92 40       	sbci	r25, 0x02	; 2
    1846:	18 f4       	brcc	.+6      	; 0x184e <_ZN7Sd2Card7readEndEv+0x26>
    1848:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    184c:	f3 cf       	rjmp	.-26     	; 0x1834 <_ZN7Sd2Card7readEndEv+0xc>
    184e:	ce 01       	movw	r24, r28
    1850:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN7Sd2Card14chipSelectHighEv>
    1854:	1e 82       	std	Y+6, r1	; 0x06
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	08 95       	ret

0000185c <_ZN7Sd2Card10setSckRateEh>:
    185c:	0f 93       	push	r16
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	00 d0       	rcall	.+0      	; 0x1864 <_ZN7Sd2Card10setSckRateEh+0x8>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	67 30       	cpi	r22, 0x07	; 7
    186a:	28 f0       	brcs	.+10     	; 0x1876 <_ZN7Sd2Card10setSckRateEh+0x1a>
    186c:	26 e1       	ldi	r18, 0x16	; 22
    186e:	fc 01       	movw	r30, r24
    1870:	25 83       	std	Z+5, r18	; 0x05
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	47 c0       	rjmp	.+142    	; 0x1904 <_ZN7Sd2Card10setSckRateEh+0xa8>
    1876:	62 30       	cpi	r22, 0x02	; 2
    1878:	f9 f0       	breq	.+62     	; 0x18b8 <_ZN7Sd2Card10setSckRateEh+0x5c>
    187a:	58 f4       	brcc	.+22     	; 0x1892 <_ZN7Sd2Card10setSckRateEh+0x36>
    187c:	66 23       	and	r22, r22
    187e:	a9 f0       	breq	.+42     	; 0x18aa <_ZN7Sd2Card10setSckRateEh+0x4e>
    1880:	61 30       	cpi	r22, 0x01	; 1
    1882:	79 f5       	brne	.+94     	; 0x18e2 <_ZN7Sd2Card10setSckRateEh+0x86>
    1884:	00 e0       	ldi	r16, 0x00	; 0
    1886:	21 e0       	ldi	r18, 0x01	; 1
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	59 e0       	ldi	r21, 0x09	; 9
    188c:	6d e3       	ldi	r22, 0x3D	; 61
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	2e c0       	rjmp	.+92     	; 0x18ee <_ZN7Sd2Card10setSckRateEh+0x92>
    1892:	64 30       	cpi	r22, 0x04	; 4
    1894:	f9 f0       	breq	.+62     	; 0x18d4 <_ZN7Sd2Card10setSckRateEh+0x78>
    1896:	b8 f0       	brcs	.+46     	; 0x18c6 <_ZN7Sd2Card10setSckRateEh+0x6a>
    1898:	65 30       	cpi	r22, 0x05	; 5
    189a:	19 f5       	brne	.+70     	; 0x18e2 <_ZN7Sd2Card10setSckRateEh+0x86>
    189c:	00 e0       	ldi	r16, 0x00	; 0
    189e:	21 e0       	ldi	r18, 0x01	; 1
    18a0:	40 e9       	ldi	r20, 0x90	; 144
    18a2:	50 ed       	ldi	r21, 0xD0	; 208
    18a4:	63 e0       	ldi	r22, 0x03	; 3
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	22 c0       	rjmp	.+68     	; 0x18ee <_ZN7Sd2Card10setSckRateEh+0x92>
    18aa:	00 e0       	ldi	r16, 0x00	; 0
    18ac:	21 e0       	ldi	r18, 0x01	; 1
    18ae:	40 e4       	ldi	r20, 0x40	; 64
    18b0:	58 e7       	ldi	r21, 0x78	; 120
    18b2:	6d e7       	ldi	r22, 0x7D	; 125
    18b4:	71 e0       	ldi	r23, 0x01	; 1
    18b6:	1b c0       	rjmp	.+54     	; 0x18ee <_ZN7Sd2Card10setSckRateEh+0x92>
    18b8:	00 e0       	ldi	r16, 0x00	; 0
    18ba:	21 e0       	ldi	r18, 0x01	; 1
    18bc:	40 e8       	ldi	r20, 0x80	; 128
    18be:	54 e8       	ldi	r21, 0x84	; 132
    18c0:	6e e1       	ldi	r22, 0x1E	; 30
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	14 c0       	rjmp	.+40     	; 0x18ee <_ZN7Sd2Card10setSckRateEh+0x92>
    18c6:	00 e0       	ldi	r16, 0x00	; 0
    18c8:	21 e0       	ldi	r18, 0x01	; 1
    18ca:	40 e4       	ldi	r20, 0x40	; 64
    18cc:	52 e4       	ldi	r21, 0x42	; 66
    18ce:	6f e0       	ldi	r22, 0x0F	; 15
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	0d c0       	rjmp	.+26     	; 0x18ee <_ZN7Sd2Card10setSckRateEh+0x92>
    18d4:	00 e0       	ldi	r16, 0x00	; 0
    18d6:	21 e0       	ldi	r18, 0x01	; 1
    18d8:	40 e2       	ldi	r20, 0x20	; 32
    18da:	51 ea       	ldi	r21, 0xA1	; 161
    18dc:	67 e0       	ldi	r22, 0x07	; 7
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	06 c0       	rjmp	.+12     	; 0x18ee <_ZN7Sd2Card10setSckRateEh+0x92>
    18e2:	00 e0       	ldi	r16, 0x00	; 0
    18e4:	21 e0       	ldi	r18, 0x01	; 1
    18e6:	48 e4       	ldi	r20, 0x48	; 72
    18e8:	58 ee       	ldi	r21, 0xE8	; 232
    18ea:	61 e0       	ldi	r22, 0x01	; 1
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	ce 01       	movw	r24, r28
    18f0:	01 96       	adiw	r24, 0x01	; 1
    18f2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN11SPISettingsC1Emhh>
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	9a 81       	ldd	r25, Y+2	; 0x02
    18fa:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <_ZL8settings+0x1>
    18fe:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <_ZL8settings>
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	0f 91       	pop	r16
    190e:	08 95       	ret

00001910 <_ZN7Sd2Card11waitNotBusyEj>:
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	eb 01       	movw	r28, r22
    191a:	0e 94 0c 06 	call	0xc18	; 0xc18 <millis>
    191e:	8b 01       	movw	r16, r22
    1920:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    1924:	8f 3f       	cpi	r24, 0xFF	; 255
    1926:	49 f0       	breq	.+18     	; 0x193a <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    1928:	0e 94 0c 06 	call	0xc18	; 0xc18 <millis>
    192c:	60 1b       	sub	r22, r16
    192e:	71 0b       	sbc	r23, r17
    1930:	6c 17       	cp	r22, r28
    1932:	7d 07       	cpc	r23, r29
    1934:	a8 f3       	brcs	.-22     	; 0x1920 <_ZN7Sd2Card11waitNotBusyEj+0x10>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	01 c0       	rjmp	.+2      	; 0x193c <_ZN7Sd2Card11waitNotBusyEj+0x2c>
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	08 95       	ret

00001946 <_ZN7Sd2Card11cardCommandEhm>:
    1946:	8f 92       	push	r8
    1948:	9f 92       	push	r9
    194a:	af 92       	push	r10
    194c:	bf 92       	push	r11
    194e:	ff 92       	push	r15
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	ec 01       	movw	r28, r24
    195a:	f6 2e       	mov	r15, r22
    195c:	49 01       	movw	r8, r18
    195e:	5a 01       	movw	r10, r20
    1960:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZN7Sd2Card7readEndEv>
    1964:	ce 01       	movw	r24, r28
    1966:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN7Sd2Card13chipSelectLowEv>
    196a:	6c e2       	ldi	r22, 0x2C	; 44
    196c:	71 e0       	ldi	r23, 0x01	; 1
    196e:	ce 01       	movw	r24, r28
    1970:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN7Sd2Card11waitNotBusyEj>
    1974:	8f 2d       	mov	r24, r15
    1976:	80 64       	ori	r24, 0x40	; 64
    1978:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_ZN8SPIClass8transferEh>
    197c:	08 e1       	ldi	r16, 0x18	; 24
    197e:	10 e0       	ldi	r17, 0x00	; 0
    1980:	d5 01       	movw	r26, r10
    1982:	c4 01       	movw	r24, r8
    1984:	00 2e       	mov	r0, r16
    1986:	04 c0       	rjmp	.+8      	; 0x1990 <_ZN7Sd2Card11cardCommandEhm+0x4a>
    1988:	b6 95       	lsr	r27
    198a:	a7 95       	ror	r26
    198c:	97 95       	ror	r25
    198e:	87 95       	ror	r24
    1990:	0a 94       	dec	r0
    1992:	d2 f7       	brpl	.-12     	; 0x1988 <_ZN7Sd2Card11cardCommandEhm+0x42>
    1994:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_ZN8SPIClass8transferEh>
    1998:	08 50       	subi	r16, 0x08	; 8
    199a:	11 09       	sbc	r17, r1
    199c:	08 3f       	cpi	r16, 0xF8	; 248
    199e:	8f ef       	ldi	r24, 0xFF	; 255
    19a0:	18 07       	cpc	r17, r24
    19a2:	71 f7       	brne	.-36     	; 0x1980 <_ZN7Sd2Card11cardCommandEhm+0x3a>
    19a4:	ff 20       	and	r15, r15
    19a6:	29 f0       	breq	.+10     	; 0x19b2 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    19a8:	88 e0       	ldi	r24, 0x08	; 8
    19aa:	f8 12       	cpse	r15, r24
    19ac:	04 c0       	rjmp	.+8      	; 0x19b6 <_ZN7Sd2Card11cardCommandEhm+0x70>
    19ae:	87 e8       	ldi	r24, 0x87	; 135
    19b0:	03 c0       	rjmp	.+6      	; 0x19b8 <_ZN7Sd2Card11cardCommandEhm+0x72>
    19b2:	85 e9       	ldi	r24, 0x95	; 149
    19b4:	01 c0       	rjmp	.+2      	; 0x19b8 <_ZN7Sd2Card11cardCommandEhm+0x72>
    19b6:	8f ef       	ldi	r24, 0xFF	; 255
    19b8:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_ZN8SPIClass8transferEh>
    19bc:	10 e0       	ldi	r17, 0x00	; 0
    19be:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    19c2:	8a 87       	std	Y+10, r24	; 0x0a
    19c4:	87 ff       	sbrs	r24, 7
    19c6:	04 c0       	rjmp	.+8      	; 0x19d0 <_ZN7Sd2Card11cardCommandEhm+0x8a>
    19c8:	1f 3f       	cpi	r17, 0xFF	; 255
    19ca:	11 f0       	breq	.+4      	; 0x19d0 <_ZN7Sd2Card11cardCommandEhm+0x8a>
    19cc:	1f 5f       	subi	r17, 0xFF	; 255
    19ce:	f7 cf       	rjmp	.-18     	; 0x19be <_ZN7Sd2Card11cardCommandEhm+0x78>
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	9f 90       	pop	r9
    19e0:	8f 90       	pop	r8
    19e2:	08 95       	ret

000019e4 <_ZN7Sd2Card4initEhh>:
    19e4:	7f 92       	push	r7
    19e6:	8f 92       	push	r8
    19e8:	9f 92       	push	r9
    19ea:	af 92       	push	r10
    19ec:	bf 92       	push	r11
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <_ZN7Sd2Card4initEhh+0x1c>
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	7c 01       	movw	r14, r24
    1a06:	76 2e       	mov	r7, r22
    1a08:	fc 01       	movw	r30, r24
    1a0a:	13 86       	std	Z+11, r1	; 0x0b
    1a0c:	11 86       	std	Z+9, r1	; 0x09
    1a0e:	16 82       	std	Z+6, r1	; 0x06
    1a10:	15 82       	std	Z+5, r1	; 0x05
    1a12:	44 83       	std	Z+4, r20	; 0x04
    1a14:	0e 94 0c 06 	call	0xc18	; 0xc18 <millis>
    1a18:	6b 01       	movw	r12, r22
    1a1a:	61 e0       	ldi	r22, 0x01	; 1
    1a1c:	f7 01       	movw	r30, r14
    1a1e:	84 81       	ldd	r24, Z+4	; 0x04
    1a20:	0e 94 5e 06 	call	0xcbc	; 0xcbc <pinMode>
    1a24:	61 e0       	ldi	r22, 0x01	; 1
    1a26:	f7 01       	movw	r30, r14
    1a28:	84 81       	ldd	r24, Z+4	; 0x04
    1a2a:	0e 94 9a 06 	call	0xd34	; 0xd34 <digitalWrite>
    1a2e:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <_ZN8SPIClass5beginEv>
    1a32:	00 e0       	ldi	r16, 0x00	; 0
    1a34:	21 e0       	ldi	r18, 0x01	; 1
    1a36:	40 e9       	ldi	r20, 0x90	; 144
    1a38:	50 ed       	ldi	r21, 0xD0	; 208
    1a3a:	63 e0       	ldi	r22, 0x03	; 3
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	ce 01       	movw	r24, r28
    1a40:	01 96       	adiw	r24, 0x01	; 1
    1a42:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN11SPISettingsC1Emhh>
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4a:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <_ZL8settings+0x1>
    1a4e:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <_ZL8settings>
    1a52:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN8SPIClass16beginTransactionE11SPISettings>
    1a56:	1a e0       	ldi	r17, 0x0A	; 10
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_ZN8SPIClass8transferEh>
    1a5e:	11 50       	subi	r17, 0x01	; 1
    1a60:	d9 f7       	brne	.-10     	; 0x1a58 <_ZN7Sd2Card4initEhh+0x74>
    1a62:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <_ZN8SPIClass13interruptModeE>
    1a66:	81 11       	cpse	r24, r1
    1a68:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN8SPIClass14endTransactionEv.part.3>
    1a6c:	c7 01       	movw	r24, r14
    1a6e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN7Sd2Card13chipSelectLowEv>
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	a9 01       	movw	r20, r18
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	c7 01       	movw	r24, r14
    1a7c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Sd2Card11cardCommandEhm>
    1a80:	08 2f       	mov	r16, r24
    1a82:	f7 01       	movw	r30, r14
    1a84:	82 87       	std	Z+10, r24	; 0x0a
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	49 f0       	breq	.+18     	; 0x1a9c <_ZN7Sd2Card4initEhh+0xb8>
    1a8a:	0e 94 0c 06 	call	0xc18	; 0xc18 <millis>
    1a8e:	6c 19       	sub	r22, r12
    1a90:	7d 09       	sbc	r23, r13
    1a92:	61 3d       	cpi	r22, 0xD1	; 209
    1a94:	77 40       	sbci	r23, 0x07	; 7
    1a96:	68 f3       	brcs	.-38     	; 0x1a72 <_ZN7Sd2Card4initEhh+0x8e>
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	50 c0       	rjmp	.+160    	; 0x1b3c <_ZN7Sd2Card4initEhh+0x158>
    1a9c:	2a ea       	ldi	r18, 0xAA	; 170
    1a9e:	31 e0       	ldi	r19, 0x01	; 1
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	50 e0       	ldi	r21, 0x00	; 0
    1aa4:	68 e0       	ldi	r22, 0x08	; 8
    1aa6:	c7 01       	movw	r24, r14
    1aa8:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Sd2Card11cardCommandEhm>
    1aac:	82 ff       	sbrs	r24, 2
    1aae:	03 c0       	rjmp	.+6      	; 0x1ab6 <_ZN7Sd2Card4initEhh+0xd2>
    1ab0:	f7 01       	movw	r30, r14
    1ab2:	03 87       	std	Z+11, r16	; 0x0b
    1ab4:	0e c0       	rjmp	.+28     	; 0x1ad2 <_ZN7Sd2Card4initEhh+0xee>
    1ab6:	04 e0       	ldi	r16, 0x04	; 4
    1ab8:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    1abc:	f7 01       	movw	r30, r14
    1abe:	82 87       	std	Z+10, r24	; 0x0a
    1ac0:	01 50       	subi	r16, 0x01	; 1
    1ac2:	d1 f7       	brne	.-12     	; 0x1ab8 <_ZN7Sd2Card4initEhh+0xd4>
    1ac4:	8a 3a       	cpi	r24, 0xAA	; 170
    1ac6:	11 f0       	breq	.+4      	; 0x1acc <_ZN7Sd2Card4initEhh+0xe8>
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	39 c0       	rjmp	.+114    	; 0x1b3e <_ZN7Sd2Card4initEhh+0x15a>
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	f7 01       	movw	r30, r14
    1ad0:	83 87       	std	Z+11, r24	; 0x0b
    1ad2:	f7 01       	movw	r30, r14
    1ad4:	83 85       	ldd	r24, Z+11	; 0x0b
    1ad6:	82 30       	cpi	r24, 0x02	; 2
    1ad8:	21 f0       	breq	.+8      	; 0x1ae2 <_ZN7Sd2Card4initEhh+0xfe>
    1ada:	81 2c       	mov	r8, r1
    1adc:	91 2c       	mov	r9, r1
    1ade:	54 01       	movw	r10, r8
    1ae0:	05 c0       	rjmp	.+10     	; 0x1aec <_ZN7Sd2Card4initEhh+0x108>
    1ae2:	81 2c       	mov	r8, r1
    1ae4:	91 2c       	mov	r9, r1
    1ae6:	a1 2c       	mov	r10, r1
    1ae8:	80 e4       	ldi	r24, 0x40	; 64
    1aea:	b8 2e       	mov	r11, r24
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	a9 01       	movw	r20, r18
    1af2:	67 e3       	ldi	r22, 0x37	; 55
    1af4:	c7 01       	movw	r24, r14
    1af6:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Sd2Card11cardCommandEhm>
    1afa:	a5 01       	movw	r20, r10
    1afc:	94 01       	movw	r18, r8
    1afe:	69 e2       	ldi	r22, 0x29	; 41
    1b00:	c7 01       	movw	r24, r14
    1b02:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Sd2Card11cardCommandEhm>
    1b06:	f7 01       	movw	r30, r14
    1b08:	82 87       	std	Z+10, r24	; 0x0a
    1b0a:	88 23       	and	r24, r24
    1b0c:	49 f0       	breq	.+18     	; 0x1b20 <_ZN7Sd2Card4initEhh+0x13c>
    1b0e:	0e 94 0c 06 	call	0xc18	; 0xc18 <millis>
    1b12:	6c 19       	sub	r22, r12
    1b14:	7d 09       	sbc	r23, r13
    1b16:	61 3d       	cpi	r22, 0xD1	; 209
    1b18:	77 40       	sbci	r23, 0x07	; 7
    1b1a:	40 f3       	brcs	.-48     	; 0x1aec <_ZN7Sd2Card4initEhh+0x108>
    1b1c:	88 e0       	ldi	r24, 0x08	; 8
    1b1e:	0e c0       	rjmp	.+28     	; 0x1b3c <_ZN7Sd2Card4initEhh+0x158>
    1b20:	f7 01       	movw	r30, r14
    1b22:	83 85       	ldd	r24, Z+11	; 0x0b
    1b24:	82 30       	cpi	r24, 0x02	; 2
    1b26:	f1 f4       	brne	.+60     	; 0x1b64 <_ZN7Sd2Card4initEhh+0x180>
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	a9 01       	movw	r20, r18
    1b2e:	6a e3       	ldi	r22, 0x3A	; 58
    1b30:	c7 01       	movw	r24, r14
    1b32:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Sd2Card11cardCommandEhm>
    1b36:	88 23       	and	r24, r24
    1b38:	39 f0       	breq	.+14     	; 0x1b48 <_ZN7Sd2Card4initEhh+0x164>
    1b3a:	86 e0       	ldi	r24, 0x06	; 6
    1b3c:	f7 01       	movw	r30, r14
    1b3e:	85 83       	std	Z+5, r24	; 0x05
    1b40:	c7 01       	movw	r24, r14
    1b42:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN7Sd2Card14chipSelectHighEv>
    1b46:	16 c0       	rjmp	.+44     	; 0x1b74 <_ZN7Sd2Card4initEhh+0x190>
    1b48:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    1b4c:	80 7c       	andi	r24, 0xC0	; 192
    1b4e:	80 3c       	cpi	r24, 0xC0	; 192
    1b50:	19 f4       	brne	.+6      	; 0x1b58 <_ZN7Sd2Card4initEhh+0x174>
    1b52:	83 e0       	ldi	r24, 0x03	; 3
    1b54:	f7 01       	movw	r30, r14
    1b56:	83 87       	std	Z+11, r24	; 0x0b
    1b58:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    1b5c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    1b60:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    1b64:	c7 01       	movw	r24, r14
    1b66:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN7Sd2Card14chipSelectHighEv>
    1b6a:	67 2d       	mov	r22, r7
    1b6c:	c7 01       	movw	r24, r14
    1b6e:	0e 94 2e 0c 	call	0x185c	; 0x185c <_ZN7Sd2Card10setSckRateEh>
    1b72:	18 2f       	mov	r17, r24
    1b74:	81 2f       	mov	r24, r17
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	df 90       	pop	r13
    1b88:	cf 90       	pop	r12
    1b8a:	bf 90       	pop	r11
    1b8c:	af 90       	pop	r10
    1b8e:	9f 90       	pop	r9
    1b90:	8f 90       	pop	r8
    1b92:	7f 90       	pop	r7
    1b94:	08 95       	ret

00001b96 <_ZN7Sd2Card14waitStartBlockEv>:
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	ec 01       	movw	r28, r24
    1ba0:	0e 94 0c 06 	call	0xc18	; 0xc18 <millis>
    1ba4:	8b 01       	movw	r16, r22
    1ba6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    1baa:	8a 87       	std	Y+10, r24	; 0x0a
    1bac:	8f 3f       	cpi	r24, 0xFF	; 255
    1bae:	49 f4       	brne	.+18     	; 0x1bc2 <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    1bb0:	0e 94 0c 06 	call	0xc18	; 0xc18 <millis>
    1bb4:	60 1b       	sub	r22, r16
    1bb6:	71 0b       	sbc	r23, r17
    1bb8:	6d 32       	cpi	r22, 0x2D	; 45
    1bba:	71 40       	sbci	r23, 0x01	; 1
    1bbc:	a0 f3       	brcs	.-24     	; 0x1ba6 <_ZN7Sd2Card14waitStartBlockEv+0x10>
    1bbe:	8f e0       	ldi	r24, 0x0F	; 15
    1bc0:	03 c0       	rjmp	.+6      	; 0x1bc8 <_ZN7Sd2Card14waitStartBlockEv+0x32>
    1bc2:	8e 3f       	cpi	r24, 0xFE	; 254
    1bc4:	39 f0       	breq	.+14     	; 0x1bd4 <_ZN7Sd2Card14waitStartBlockEv+0x3e>
    1bc6:	8d e0       	ldi	r24, 0x0D	; 13
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
    1bca:	ce 01       	movw	r24, r28
    1bcc:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN7Sd2Card14chipSelectHighEv>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	01 c0       	rjmp	.+2      	; 0x1bd6 <_ZN7Sd2Card14waitStartBlockEv+0x40>
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	08 95       	ret

00001be0 <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    1be0:	cf 92       	push	r12
    1be2:	df 92       	push	r13
    1be4:	ef 92       	push	r14
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	ec 01       	movw	r28, r24
    1bf2:	69 01       	movw	r12, r18
    1bf4:	c8 01       	movw	r24, r16
    1bf6:	82 0f       	add	r24, r18
    1bf8:	93 1f       	adc	r25, r19
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	92 40       	sbci	r25, 0x02	; 2
    1bfe:	08 f0       	brcs	.+2      	; 0x1c02 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    1c00:	5c c0       	rjmp	.+184    	; 0x1cba <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1c02:	8e 81       	ldd	r24, Y+6	; 0x06
    1c04:	88 23       	and	r24, r24
    1c06:	71 f0       	breq	.+28     	; 0x1c24 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    1c08:	88 81       	ld	r24, Y
    1c0a:	99 81       	ldd	r25, Y+1	; 0x01
    1c0c:	aa 81       	ldd	r26, Y+2	; 0x02
    1c0e:	bb 81       	ldd	r27, Y+3	; 0x03
    1c10:	84 17       	cp	r24, r20
    1c12:	95 07       	cpc	r25, r21
    1c14:	a6 07       	cpc	r26, r22
    1c16:	b7 07       	cpc	r27, r23
    1c18:	29 f4       	brne	.+10     	; 0x1c24 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    1c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1c:	98 85       	ldd	r25, Y+8	; 0x08
    1c1e:	c8 16       	cp	r12, r24
    1c20:	d9 06       	cpc	r13, r25
    1c22:	10 f5       	brcc	.+68     	; 0x1c68 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
    1c24:	48 83       	st	Y, r20
    1c26:	59 83       	std	Y+1, r21	; 0x01
    1c28:	6a 83       	std	Y+2, r22	; 0x02
    1c2a:	7b 83       	std	Y+3, r23	; 0x03
    1c2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c2e:	83 30       	cpi	r24, 0x03	; 3
    1c30:	39 f0       	breq	.+14     	; 0x1c40 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    1c32:	89 e0       	ldi	r24, 0x09	; 9
    1c34:	44 0f       	add	r20, r20
    1c36:	55 1f       	adc	r21, r21
    1c38:	66 1f       	adc	r22, r22
    1c3a:	77 1f       	adc	r23, r23
    1c3c:	8a 95       	dec	r24
    1c3e:	d1 f7       	brne	.-12     	; 0x1c34 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    1c40:	9a 01       	movw	r18, r20
    1c42:	ab 01       	movw	r20, r22
    1c44:	61 e1       	ldi	r22, 0x11	; 17
    1c46:	ce 01       	movw	r24, r28
    1c48:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Sd2Card11cardCommandEhm>
    1c4c:	88 23       	and	r24, r24
    1c4e:	19 f0       	breq	.+6      	; 0x1c56 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x76>
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	8d 83       	std	Y+5, r24	; 0x05
    1c54:	32 c0       	rjmp	.+100    	; 0x1cba <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1c56:	ce 01       	movw	r24, r28
    1c58:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <_ZN7Sd2Card14waitStartBlockEv>
    1c5c:	88 23       	and	r24, r24
    1c5e:	69 f1       	breq	.+90     	; 0x1cba <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1c60:	18 86       	std	Y+8, r1	; 0x08
    1c62:	1f 82       	std	Y+7, r1	; 0x07
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	8e 83       	std	Y+6, r24	; 0x06
    1c68:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6a:	98 85       	ldd	r25, Y+8	; 0x08
    1c6c:	8c 15       	cp	r24, r12
    1c6e:	9d 05       	cpc	r25, r13
    1c70:	40 f4       	brcc	.+16     	; 0x1c82 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    1c72:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    1c76:	8f 81       	ldd	r24, Y+7	; 0x07
    1c78:	98 85       	ldd	r25, Y+8	; 0x08
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	98 87       	std	Y+8, r25	; 0x08
    1c7e:	8f 83       	std	Y+7, r24	; 0x07
    1c80:	f3 cf       	rjmp	.-26     	; 0x1c68 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
    1c82:	67 01       	movw	r12, r14
    1c84:	e0 0e       	add	r14, r16
    1c86:	f1 1e       	adc	r15, r17
    1c88:	ce 14       	cp	r12, r14
    1c8a:	df 04       	cpc	r13, r15
    1c8c:	31 f0       	breq	.+12     	; 0x1c9a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xba>
    1c8e:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    1c92:	f6 01       	movw	r30, r12
    1c94:	81 93       	st	Z+, r24
    1c96:	6f 01       	movw	r12, r30
    1c98:	f7 cf       	rjmp	.-18     	; 0x1c88 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa8>
    1c9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c9c:	98 85       	ldd	r25, Y+8	; 0x08
    1c9e:	08 0f       	add	r16, r24
    1ca0:	19 1f       	adc	r17, r25
    1ca2:	18 87       	std	Y+8, r17	; 0x08
    1ca4:	0f 83       	std	Y+7, r16	; 0x07
    1ca6:	89 85       	ldd	r24, Y+9	; 0x09
    1ca8:	88 23       	and	r24, r24
    1caa:	19 f0       	breq	.+6      	; 0x1cb2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd2>
    1cac:	01 15       	cp	r16, r1
    1cae:	12 40       	sbci	r17, 0x02	; 2
    1cb0:	48 f0       	brcs	.+18     	; 0x1cc4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZN7Sd2Card7readEndEv>
    1cb8:	05 c0       	rjmp	.+10     	; 0x1cc4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
    1cba:	ce 01       	movw	r24, r28
    1cbc:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN7Sd2Card14chipSelectHighEv>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	01 c0       	rjmp	.+2      	; 0x1cc6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe6>
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	ff 90       	pop	r15
    1cd0:	ef 90       	pop	r14
    1cd2:	df 90       	pop	r13
    1cd4:	cf 90       	pop	r12
    1cd6:	08 95       	ret

00001cd8 <_ZN7Sd2Card8readDataEmjjPh>:
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	01 15       	cp	r16, r1
    1ce2:	11 05       	cpc	r17, r1
    1ce4:	19 f0       	breq	.+6      	; 0x1cec <_ZN7Sd2Card8readDataEmjjPh+0x14>
    1ce6:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    1cea:	01 c0       	rjmp	.+2      	; 0x1cee <_ZN7Sd2Card8readDataEmjjPh+0x16>
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	1f 91       	pop	r17
    1cf0:	0f 91       	pop	r16
    1cf2:	ff 90       	pop	r15
    1cf4:	ef 90       	pop	r14
    1cf6:	08 95       	ret

00001cf8 <_ZN7Sd2Card9readBlockEmPh>:
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	79 01       	movw	r14, r18
    1d02:	00 e0       	ldi	r16, 0x00	; 0
    1d04:	12 e0       	ldi	r17, 0x02	; 2
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    1d0e:	1f 91       	pop	r17
    1d10:	0f 91       	pop	r16
    1d12:	ff 90       	pop	r15
    1d14:	ef 90       	pop	r14
    1d16:	08 95       	ret

00001d18 <_ZN7Sd2Card9writeDataEhPKh>:
    1d18:	ef 92       	push	r14
    1d1a:	ff 92       	push	r15
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	8c 01       	movw	r16, r24
    1d26:	86 2f       	mov	r24, r22
    1d28:	7a 01       	movw	r14, r20
    1d2a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_ZN8SPIClass8transferEh>
    1d2e:	e7 01       	movw	r28, r14
    1d30:	8e ef       	ldi	r24, 0xFE	; 254
    1d32:	f8 1a       	sub	r15, r24
    1d34:	89 91       	ld	r24, Y+
    1d36:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_ZN8SPIClass8transferEh>
    1d3a:	ce 15       	cp	r28, r14
    1d3c:	df 05       	cpc	r29, r15
    1d3e:	d1 f7       	brne	.-12     	; 0x1d34 <_ZN7Sd2Card9writeDataEhPKh+0x1c>
    1d40:	8f ef       	ldi	r24, 0xFF	; 255
    1d42:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_ZN8SPIClass8transferEh>
    1d46:	8f ef       	ldi	r24, 0xFF	; 255
    1d48:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_ZN8SPIClass8transferEh>
    1d4c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    1d50:	f8 01       	movw	r30, r16
    1d52:	82 87       	std	Z+10, r24	; 0x0a
    1d54:	8f 71       	andi	r24, 0x1F	; 31
    1d56:	85 30       	cpi	r24, 0x05	; 5
    1d58:	39 f0       	breq	.+14     	; 0x1d68 <_ZN7Sd2Card9writeDataEhPKh+0x50>
    1d5a:	81 e1       	ldi	r24, 0x11	; 17
    1d5c:	85 83       	std	Z+5, r24	; 0x05
    1d5e:	c8 01       	movw	r24, r16
    1d60:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN7Sd2Card14chipSelectHighEv>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <_ZN7Sd2Card9writeDataEhPKh+0x52>
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	1f 91       	pop	r17
    1d70:	0f 91       	pop	r16
    1d72:	ff 90       	pop	r15
    1d74:	ef 90       	pop	r14
    1d76:	08 95       	ret

00001d78 <_ZN7Sd2Card10writeBlockEmPKhh>:
    1d78:	ef 92       	push	r14
    1d7a:	ff 92       	push	r15
    1d7c:	0f 93       	push	r16
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	ec 01       	movw	r28, r24
    1d84:	79 01       	movw	r14, r18
    1d86:	41 15       	cp	r20, r1
    1d88:	51 05       	cpc	r21, r1
    1d8a:	61 05       	cpc	r22, r1
    1d8c:	71 05       	cpc	r23, r1
    1d8e:	11 f4       	brne	.+4      	; 0x1d94 <_ZN7Sd2Card10writeBlockEmPKhh+0x1c>
    1d90:	82 e1       	ldi	r24, 0x12	; 18
    1d92:	39 c0       	rjmp	.+114    	; 0x1e06 <_ZN7Sd2Card10writeBlockEmPKhh+0x8e>
    1d94:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d96:	83 30       	cpi	r24, 0x03	; 3
    1d98:	39 f0       	breq	.+14     	; 0x1da8 <_ZN7Sd2Card10writeBlockEmPKhh+0x30>
    1d9a:	89 e0       	ldi	r24, 0x09	; 9
    1d9c:	44 0f       	add	r20, r20
    1d9e:	55 1f       	adc	r21, r21
    1da0:	66 1f       	adc	r22, r22
    1da2:	77 1f       	adc	r23, r23
    1da4:	8a 95       	dec	r24
    1da6:	d1 f7       	brne	.-12     	; 0x1d9c <_ZN7Sd2Card10writeBlockEmPKhh+0x24>
    1da8:	9a 01       	movw	r18, r20
    1daa:	ab 01       	movw	r20, r22
    1dac:	68 e1       	ldi	r22, 0x18	; 24
    1dae:	ce 01       	movw	r24, r28
    1db0:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Sd2Card11cardCommandEhm>
    1db4:	88 23       	and	r24, r24
    1db6:	11 f0       	breq	.+4      	; 0x1dbc <_ZN7Sd2Card10writeBlockEmPKhh+0x44>
    1db8:	84 e0       	ldi	r24, 0x04	; 4
    1dba:	25 c0       	rjmp	.+74     	; 0x1e06 <_ZN7Sd2Card10writeBlockEmPKhh+0x8e>
    1dbc:	a7 01       	movw	r20, r14
    1dbe:	6e ef       	ldi	r22, 0xFE	; 254
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN7Sd2Card9writeDataEhPKh>
    1dc6:	88 23       	and	r24, r24
    1dc8:	f9 f0       	breq	.+62     	; 0x1e08 <_ZN7Sd2Card10writeBlockEmPKhh+0x90>
    1dca:	01 11       	cpse	r16, r1
    1dcc:	05 c0       	rjmp	.+10     	; 0x1dd8 <_ZN7Sd2Card10writeBlockEmPKhh+0x60>
    1dce:	ce 01       	movw	r24, r28
    1dd0:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN7Sd2Card14chipSelectHighEv>
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	1c c0       	rjmp	.+56     	; 0x1e10 <_ZN7Sd2Card10writeBlockEmPKhh+0x98>
    1dd8:	68 e5       	ldi	r22, 0x58	; 88
    1dda:	72 e0       	ldi	r23, 0x02	; 2
    1ddc:	ce 01       	movw	r24, r28
    1dde:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN7Sd2Card11waitNotBusyEj>
    1de2:	81 11       	cpse	r24, r1
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <_ZN7Sd2Card10writeBlockEmPKhh+0x72>
    1de6:	85 e1       	ldi	r24, 0x15	; 21
    1de8:	0e c0       	rjmp	.+28     	; 0x1e06 <_ZN7Sd2Card10writeBlockEmPKhh+0x8e>
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	a9 01       	movw	r20, r18
    1df0:	6d e0       	ldi	r22, 0x0D	; 13
    1df2:	ce 01       	movw	r24, r28
    1df4:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Sd2Card11cardCommandEhm>
    1df8:	81 11       	cpse	r24, r1
    1dfa:	04 c0       	rjmp	.+8      	; 0x1e04 <_ZN7Sd2Card10writeBlockEmPKhh+0x8c>
    1dfc:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    1e00:	88 23       	and	r24, r24
    1e02:	29 f3       	breq	.-54     	; 0x1dce <_ZN7Sd2Card10writeBlockEmPKhh+0x56>
    1e04:	84 e1       	ldi	r24, 0x14	; 20
    1e06:	8d 83       	std	Y+5, r24	; 0x05
    1e08:	ce 01       	movw	r24, r28
    1e0a:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN7Sd2Card14chipSelectHighEv>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	0f 91       	pop	r16
    1e16:	ff 90       	pop	r15
    1e18:	ef 90       	pop	r14
    1e1a:	08 95       	ret

00001e1c <_ZN7Sd2Card6isBusyEv>:
/** Check if the SD card is busy

  \return The value one, true, is returned when is busy and
   the value zero, false, is returned for when is NOT busy.
*/
uint8_t Sd2Card::isBusy(void) {
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	ec 01       	movw	r28, r24
  chipSelectLow();
    1e24:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN7Sd2Card13chipSelectLowEv>
  byte b = spiRec();
    1e28:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZL6spiRecv>
    1e2c:	18 2f       	mov	r17, r24
  chipSelectHigh();
    1e2e:	ce 01       	movw	r24, r28
    1e30:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN7Sd2Card14chipSelectHighEv>

  return (b != 0XFF);
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	1f 3f       	cpi	r17, 0xFF	; 255
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <_ZN7Sd2Card6isBusyEv+0x20>
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
}
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	1f 91       	pop	r17
    1e42:	08 95       	ret

00001e44 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    1e44:	e5 e8       	ldi	r30, 0x85	; 133
    1e46:	f2 e0       	ldi	r31, 0x02	; 2
    1e48:	80 e5       	ldi	r24, 0x50	; 80
    1e4a:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    1e4c:	11 82       	std	Z+1, r1	; 0x01
    1e4e:	08 95       	ret

00001e50 <_ZN6SdFile10addClusterEv>:
  // don't try to delete root
  if (isRoot()) {
    return true;
  }
  return rmDir();
}
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	ec 01       	movw	r28, r24
    1e56:	9c 01       	movw	r18, r24
    1e58:	2a 5f       	subi	r18, 0xFA	; 250
    1e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e68:	0e 94 e7 18 	call	0x31ce	; 0x31ce <_ZN8SdVolume15allocContiguousEmPm>
    1e6c:	88 23       	and	r24, r24
    1e6e:	b9 f0       	breq	.+46     	; 0x1e9e <_ZN6SdFile10addClusterEv+0x4e>
    1e70:	8f 89       	ldd	r24, Y+23	; 0x17
    1e72:	98 8d       	ldd	r25, Y+24	; 0x18
    1e74:	a9 8d       	ldd	r26, Y+25	; 0x19
    1e76:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1e78:	89 2b       	or	r24, r25
    1e7a:	8a 2b       	or	r24, r26
    1e7c:	8b 2b       	or	r24, r27
    1e7e:	59 f4       	brne	.+22     	; 0x1e96 <_ZN6SdFile10addClusterEv+0x46>
    1e80:	8e 81       	ldd	r24, Y+6	; 0x06
    1e82:	9f 81       	ldd	r25, Y+7	; 0x07
    1e84:	a8 85       	ldd	r26, Y+8	; 0x08
    1e86:	b9 85       	ldd	r27, Y+9	; 0x09
    1e88:	8f 8b       	std	Y+23, r24	; 0x17
    1e8a:	98 8f       	std	Y+24, r25	; 0x18
    1e8c:	a9 8f       	std	Y+25, r26	; 0x19
    1e8e:	ba 8f       	std	Y+26, r27	; 0x1a
    1e90:	8c 81       	ldd	r24, Y+4	; 0x04
    1e92:	80 68       	ori	r24, 0x80	; 128
    1e94:	8c 83       	std	Y+4, r24	; 0x04
    1e96:	8c 81       	ldd	r24, Y+4	; 0x04
    1e98:	80 62       	ori	r24, 0x20	; 32
    1e9a:	8c 83       	std	Y+4, r24	; 0x04
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	08 95       	ret

00001ea4 <_ZN6SdFile13addDirClusterEv>:
    1ea4:	cf 92       	push	r12
    1ea6:	df 92       	push	r13
    1ea8:	ef 92       	push	r14
    1eaa:	ff 92       	push	r15
    1eac:	1f 93       	push	r17
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	ec 01       	movw	r28, r24
    1eb4:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN6SdFile10addClusterEv>
    1eb8:	81 11       	cpse	r24, r1
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <_ZN6SdFile13addDirClusterEv+0x1c>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	4a c0       	rjmp	.+148    	; 0x1f54 <_ZN6SdFile13addDirClusterEv+0xb0>
    1ec0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1ec2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1ec4:	ce 80       	ldd	r12, Y+6	; 0x06
    1ec6:	df 80       	ldd	r13, Y+7	; 0x07
    1ec8:	e8 84       	ldd	r14, Y+8	; 0x08
    1eca:	f9 84       	ldd	r15, Y+9	; 0x09
    1ecc:	82 e0       	ldi	r24, 0x02	; 2
    1ece:	c8 1a       	sub	r12, r24
    1ed0:	d1 08       	sbc	r13, r1
    1ed2:	e1 08       	sbc	r14, r1
    1ed4:	f1 08       	sbc	r15, r1
    1ed6:	05 84       	ldd	r0, Z+13	; 0x0d
    1ed8:	04 c0       	rjmp	.+8      	; 0x1ee2 <_ZN6SdFile13addDirClusterEv+0x3e>
    1eda:	cc 0c       	add	r12, r12
    1edc:	dd 1c       	adc	r13, r13
    1ede:	ee 1c       	adc	r14, r14
    1ee0:	ff 1c       	adc	r15, r15
    1ee2:	0a 94       	dec	r0
    1ee4:	d2 f7       	brpl	.-12     	; 0x1eda <_ZN6SdFile13addDirClusterEv+0x36>
    1ee6:	86 85       	ldd	r24, Z+14	; 0x0e
    1ee8:	97 85       	ldd	r25, Z+15	; 0x0f
    1eea:	a0 89       	ldd	r26, Z+16	; 0x10
    1eec:	b1 89       	ldd	r27, Z+17	; 0x11
    1eee:	c8 0e       	add	r12, r24
    1ef0:	d9 1e       	adc	r13, r25
    1ef2:	ea 1e       	adc	r14, r26
    1ef4:	fb 1e       	adc	r15, r27
    1ef6:	14 81       	ldd	r17, Z+4	; 0x04
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	c8 1a       	sub	r12, r24
    1efc:	d1 08       	sbc	r13, r1
    1efe:	e1 08       	sbc	r14, r1
    1f00:	f1 08       	sbc	r15, r1
    1f02:	11 23       	and	r17, r17
    1f04:	61 f0       	breq	.+24     	; 0x1f1e <_ZN6SdFile13addDirClusterEv+0x7a>
    1f06:	c7 01       	movw	r24, r14
    1f08:	b6 01       	movw	r22, r12
    1f0a:	61 0f       	add	r22, r17
    1f0c:	71 1d       	adc	r23, r1
    1f0e:	81 1d       	adc	r24, r1
    1f10:	91 1d       	adc	r25, r1
    1f12:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN8SdVolume14cacheZeroBlockEm>
    1f16:	88 23       	and	r24, r24
    1f18:	89 f2       	breq	.-94     	; 0x1ebc <_ZN6SdFile13addDirClusterEv+0x18>
    1f1a:	11 50       	subi	r17, 0x01	; 1
    1f1c:	f2 cf       	rjmp	.-28     	; 0x1f02 <_ZN6SdFile13addDirClusterEv+0x5e>
    1f1e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1f20:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	92 e0       	ldi	r25, 0x02	; 2
    1f26:	a0 e0       	ldi	r26, 0x00	; 0
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	05 84       	ldd	r0, Z+13	; 0x0d
    1f2c:	04 c0       	rjmp	.+8      	; 0x1f36 <_ZN6SdFile13addDirClusterEv+0x92>
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	aa 1f       	adc	r26, r26
    1f34:	bb 1f       	adc	r27, r27
    1f36:	0a 94       	dec	r0
    1f38:	d2 f7       	brpl	.-12     	; 0x1f2e <_ZN6SdFile13addDirClusterEv+0x8a>
    1f3a:	4b 89       	ldd	r20, Y+19	; 0x13
    1f3c:	5c 89       	ldd	r21, Y+20	; 0x14
    1f3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f40:	7e 89       	ldd	r23, Y+22	; 0x16
    1f42:	84 0f       	add	r24, r20
    1f44:	95 1f       	adc	r25, r21
    1f46:	a6 1f       	adc	r26, r22
    1f48:	b7 1f       	adc	r27, r23
    1f4a:	8b 8b       	std	Y+19, r24	; 0x13
    1f4c:	9c 8b       	std	Y+20, r25	; 0x14
    1f4e:	ad 8b       	std	Y+21, r26	; 0x15
    1f50:	be 8b       	std	Y+22, r27	; 0x16
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	1f 91       	pop	r17
    1f5a:	ff 90       	pop	r15
    1f5c:	ef 90       	pop	r14
    1f5e:	df 90       	pop	r13
    1f60:	cf 90       	pop	r12
    1f62:	08 95       	ret

00001f64 <_ZN6SdFile13cacheDirEntryEh>:
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
    1f68:	ec 01       	movw	r28, r24
    1f6a:	46 2f       	mov	r20, r22
    1f6c:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f6e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1f70:	88 89       	ldd	r24, Y+16	; 0x10
    1f72:	99 89       	ldd	r25, Y+17	; 0x11
    1f74:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN8SdVolume13cacheRawBlockEmh>
    1f78:	88 23       	and	r24, r24
    1f7a:	41 f0       	breq	.+16     	; 0x1f8c <_ZN6SdFile13cacheDirEntryEh+0x28>
    1f7c:	8a 89       	ldd	r24, Y+18	; 0x12
    1f7e:	20 e2       	ldi	r18, 0x20	; 32
    1f80:	82 9f       	mul	r24, r18
    1f82:	c0 01       	movw	r24, r0
    1f84:	11 24       	eor	r1, r1
    1f86:	80 57       	subi	r24, 0x70	; 112
    1f88:	9d 4f       	sbci	r25, 0xFD	; 253
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <_ZN6SdFile13cacheDirEntryEh+0x2c>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	08 95       	ret

00001f96 <_ZN6SdFile10make83NameEPKcPh>:
    1f96:	fb 01       	movw	r30, r22
    1f98:	9b 01       	movw	r18, r22
    1f9a:	25 5f       	subi	r18, 0xF5	; 245
    1f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9e:	40 e2       	ldi	r20, 0x20	; 32
    1fa0:	41 93       	st	Z+, r20
    1fa2:	e2 17       	cp	r30, r18
    1fa4:	f3 07       	cpc	r31, r19
    1fa6:	e1 f7       	brne	.-8      	; 0x1fa0 <_ZN6SdFile10make83NameEPKcPh+0xa>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	27 e0       	ldi	r18, 0x07	; 7
    1fae:	8d 91       	ld	r24, X+
    1fb0:	88 23       	and	r24, r24
    1fb2:	19 f1       	breq	.+70     	; 0x1ffa <_ZN6SdFile10make83NameEPKcPh+0x64>
    1fb4:	8e 32       	cpi	r24, 0x2E	; 46
    1fb6:	29 f4       	brne	.+10     	; 0x1fc2 <_ZN6SdFile10make83NameEPKcPh+0x2c>
    1fb8:	2a 30       	cpi	r18, 0x0A	; 10
    1fba:	21 f1       	breq	.+72     	; 0x2004 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1fbc:	98 e0       	ldi	r25, 0x08	; 8
    1fbe:	2a e0       	ldi	r18, 0x0A	; 10
    1fc0:	f6 cf       	rjmp	.-20     	; 0x1fae <_ZN6SdFile10make83NameEPKcPh+0x18>
    1fc2:	e8 eb       	ldi	r30, 0xB8	; 184
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	34 91       	lpm	r19, Z
    1fc8:	33 23       	and	r19, r19
    1fca:	21 f0       	breq	.+8      	; 0x1fd4 <_ZN6SdFile10make83NameEPKcPh+0x3e>
    1fcc:	31 96       	adiw	r30, 0x01	; 1
    1fce:	83 13       	cpse	r24, r19
    1fd0:	fa cf       	rjmp	.-12     	; 0x1fc6 <_ZN6SdFile10make83NameEPKcPh+0x30>
    1fd2:	18 c0       	rjmp	.+48     	; 0x2004 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1fd4:	29 17       	cp	r18, r25
    1fd6:	b0 f0       	brcs	.+44     	; 0x2004 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1fd8:	3f ed       	ldi	r19, 0xDF	; 223
    1fda:	38 0f       	add	r19, r24
    1fdc:	3e 35       	cpi	r19, 0x5E	; 94
    1fde:	90 f4       	brcc	.+36     	; 0x2004 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1fe0:	31 e0       	ldi	r19, 0x01	; 1
    1fe2:	39 0f       	add	r19, r25
    1fe4:	fb 01       	movw	r30, r22
    1fe6:	e9 0f       	add	r30, r25
    1fe8:	f1 1d       	adc	r31, r1
    1fea:	9f e9       	ldi	r25, 0x9F	; 159
    1fec:	98 0f       	add	r25, r24
    1fee:	9a 31       	cpi	r25, 0x1A	; 26
    1ff0:	08 f4       	brcc	.+2      	; 0x1ff4 <_ZN6SdFile10make83NameEPKcPh+0x5e>
    1ff2:	80 52       	subi	r24, 0x20	; 32
    1ff4:	80 83       	st	Z, r24
    1ff6:	93 2f       	mov	r25, r19
    1ff8:	da cf       	rjmp	.-76     	; 0x1fae <_ZN6SdFile10make83NameEPKcPh+0x18>
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	fb 01       	movw	r30, r22
    1ffe:	90 81       	ld	r25, Z
    2000:	90 32       	cpi	r25, 0x20	; 32
    2002:	09 f4       	brne	.+2      	; 0x2006 <_ZN6SdFile10make83NameEPKcPh+0x70>
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	08 95       	ret

00002008 <_ZN6SdFile8openRootEP8SdVolume>:
    2008:	0f 93       	push	r16
    200a:	1f 93       	push	r17
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	fc 01       	movw	r30, r24
    2012:	25 81       	ldd	r18, Z+5	; 0x05
    2014:	22 23       	and	r18, r18
    2016:	11 f0       	breq	.+4      	; 0x201c <_ZN6SdFile8openRootEP8SdVolume+0x14>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	42 c0       	rjmp	.+132    	; 0x20a0 <_ZN6SdFile8openRootEP8SdVolume+0x98>
    201c:	8b 01       	movw	r16, r22
    201e:	ec 01       	movw	r28, r24
    2020:	fb 01       	movw	r30, r22
    2022:	87 89       	ldd	r24, Z+23	; 0x17
    2024:	80 31       	cpi	r24, 0x10	; 16
    2026:	b1 f4       	brne	.+44     	; 0x2054 <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    2028:	82 e0       	ldi	r24, 0x02	; 2
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	1f 8a       	std	Y+23, r1	; 0x17
    202e:	18 8e       	std	Y+24, r1	; 0x18
    2030:	19 8e       	std	Y+25, r1	; 0x19
    2032:	1a 8e       	std	Y+26, r1	; 0x1a
    2034:	80 8d       	ldd	r24, Z+24	; 0x18
    2036:	91 8d       	ldd	r25, Z+25	; 0x19
    2038:	a0 e0       	ldi	r26, 0x00	; 0
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	25 e0       	ldi	r18, 0x05	; 5
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	aa 1f       	adc	r26, r26
    2044:	bb 1f       	adc	r27, r27
    2046:	2a 95       	dec	r18
    2048:	d1 f7       	brne	.-12     	; 0x203e <_ZN6SdFile8openRootEP8SdVolume+0x36>
    204a:	8b 8b       	std	Y+19, r24	; 0x13
    204c:	9c 8b       	std	Y+20, r25	; 0x14
    204e:	ad 8b       	std	Y+21, r26	; 0x15
    2050:	be 8b       	std	Y+22, r27	; 0x16
    2052:	15 c0       	rjmp	.+42     	; 0x207e <_ZN6SdFile8openRootEP8SdVolume+0x76>
    2054:	80 32       	cpi	r24, 0x20	; 32
    2056:	01 f7       	brne	.-64     	; 0x2018 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    2058:	83 e0       	ldi	r24, 0x03	; 3
    205a:	8d 83       	std	Y+5, r24	; 0x05
    205c:	fb 01       	movw	r30, r22
    205e:	42 8d       	ldd	r20, Z+26	; 0x1a
    2060:	53 8d       	ldd	r21, Z+27	; 0x1b
    2062:	64 8d       	ldd	r22, Z+28	; 0x1c
    2064:	75 8d       	ldd	r23, Z+29	; 0x1d
    2066:	4f 8b       	std	Y+23, r20	; 0x17
    2068:	58 8f       	std	Y+24, r21	; 0x18
    206a:	69 8f       	std	Y+25, r22	; 0x19
    206c:	7a 8f       	std	Y+26, r23	; 0x1a
    206e:	9e 01       	movw	r18, r28
    2070:	2d 5e       	subi	r18, 0xED	; 237
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	c8 01       	movw	r24, r16
    2076:	0e 94 dd 17 	call	0x2fba	; 0x2fba <_ZNK8SdVolume9chainSizeEmPm>
    207a:	88 23       	and	r24, r24
    207c:	69 f2       	breq	.-102    	; 0x2018 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    207e:	1c 8f       	std	Y+28, r17	; 0x1c
    2080:	0b 8f       	std	Y+27, r16	; 0x1b
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	8c 83       	std	Y+4, r24	; 0x04
    2086:	1e 82       	std	Y+6, r1	; 0x06
    2088:	1f 82       	std	Y+7, r1	; 0x07
    208a:	18 86       	std	Y+8, r1	; 0x08
    208c:	19 86       	std	Y+9, r1	; 0x09
    208e:	1a 86       	std	Y+10, r1	; 0x0a
    2090:	1b 86       	std	Y+11, r1	; 0x0b
    2092:	1c 86       	std	Y+12, r1	; 0x0c
    2094:	1d 86       	std	Y+13, r1	; 0x0d
    2096:	1e 86       	std	Y+14, r1	; 0x0e
    2098:	1f 86       	std	Y+15, r1	; 0x0f
    209a:	18 8a       	std	Y+16, r1	; 0x10
    209c:	19 8a       	std	Y+17, r1	; 0x11
    209e:	1a 8a       	std	Y+18, r1	; 0x12
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	08 95       	ret

000020aa <_ZN6SdFile4readEPvj>:
    20aa:	2f 92       	push	r2
    20ac:	3f 92       	push	r3
    20ae:	4f 92       	push	r4
    20b0:	5f 92       	push	r5
    20b2:	6f 92       	push	r6
    20b4:	7f 92       	push	r7
    20b6:	8f 92       	push	r8
    20b8:	9f 92       	push	r9
    20ba:	af 92       	push	r10
    20bc:	bf 92       	push	r11
    20be:	cf 92       	push	r12
    20c0:	df 92       	push	r13
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	ec 01       	movw	r28, r24
    20d0:	5b 01       	movw	r10, r22
    20d2:	4a 01       	movw	r8, r20
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	81 11       	cpse	r24, r1
    20d8:	03 c0       	rjmp	.+6      	; 0x20e0 <_ZN6SdFile4readEPvj+0x36>
    20da:	8f ef       	ldi	r24, 0xFF	; 255
    20dc:	9f ef       	ldi	r25, 0xFF	; 255
    20de:	d7 c0       	rjmp	.+430    	; 0x228e <_ZN6SdFile4readEPvj+0x1e4>
    20e0:	8c 81       	ldd	r24, Y+4	; 0x04
    20e2:	80 ff       	sbrs	r24, 0
    20e4:	fa cf       	rjmp	.-12     	; 0x20da <_ZN6SdFile4readEPvj+0x30>
    20e6:	4b 88       	ldd	r4, Y+19	; 0x13
    20e8:	5c 88       	ldd	r5, Y+20	; 0x14
    20ea:	6d 88       	ldd	r6, Y+21	; 0x15
    20ec:	7e 88       	ldd	r7, Y+22	; 0x16
    20ee:	4a 85       	ldd	r20, Y+10	; 0x0a
    20f0:	5b 85       	ldd	r21, Y+11	; 0x0b
    20f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    20f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    20f6:	c4 01       	movw	r24, r8
    20f8:	a0 e0       	ldi	r26, 0x00	; 0
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	93 01       	movw	r18, r6
    20fe:	82 01       	movw	r16, r4
    2100:	04 1b       	sub	r16, r20
    2102:	15 0b       	sbc	r17, r21
    2104:	26 0b       	sbc	r18, r22
    2106:	37 0b       	sbc	r19, r23
    2108:	08 17       	cp	r16, r24
    210a:	19 07       	cpc	r17, r25
    210c:	2a 07       	cpc	r18, r26
    210e:	3b 07       	cpc	r19, r27
    2110:	18 f4       	brcc	.+6      	; 0x2118 <_ZN6SdFile4readEPvj+0x6e>
    2112:	42 01       	movw	r8, r4
    2114:	84 1a       	sub	r8, r20
    2116:	95 0a       	sbc	r9, r21
    2118:	24 01       	movw	r4, r8
    211a:	1e 01       	movw	r2, r28
    211c:	26 e0       	ldi	r18, 0x06	; 6
    211e:	22 0e       	add	r2, r18
    2120:	31 1c       	adc	r3, r1
    2122:	41 14       	cp	r4, r1
    2124:	51 04       	cpc	r5, r1
    2126:	09 f4       	brne	.+2      	; 0x212a <_ZN6SdFile4readEPvj+0x80>
    2128:	7e c0       	rjmp	.+252    	; 0x2226 <_ZN6SdFile4readEPvj+0x17c>
    212a:	4a 85       	ldd	r20, Y+10	; 0x0a
    212c:	5b 85       	ldd	r21, Y+11	; 0x0b
    212e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2130:	7d 85       	ldd	r23, Y+13	; 0x0d
    2132:	6a 01       	movw	r12, r20
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	d8 22       	and	r13, r24
    2138:	ed 81       	ldd	r30, Y+5	; 0x05
    213a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213e:	8a 01       	movw	r16, r20
    2140:	9b 01       	movw	r18, r22
    2142:	f9 e0       	ldi	r31, 0x09	; 9
    2144:	36 95       	lsr	r19
    2146:	27 95       	ror	r18
    2148:	17 95       	ror	r17
    214a:	07 95       	ror	r16
    214c:	fa 95       	dec	r31
    214e:	d1 f7       	brne	.-12     	; 0x2144 <_ZN6SdFile4readEPvj+0x9a>
    2150:	e2 30       	cpi	r30, 0x02	; 2
    2152:	61 f4       	brne	.+24     	; 0x216c <_ZN6SdFile4readEPvj+0xc2>
    2154:	fc 01       	movw	r30, r24
    2156:	82 8d       	ldd	r24, Z+26	; 0x1a
    2158:	93 8d       	ldd	r25, Z+27	; 0x1b
    215a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    215c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	60 0f       	add	r22, r16
    2164:	71 1f       	adc	r23, r17
    2166:	82 1f       	adc	r24, r18
    2168:	93 1f       	adc	r25, r19
    216a:	3f c0       	rjmp	.+126    	; 0x21ea <_ZN6SdFile4readEPvj+0x140>
    216c:	fc 01       	movw	r30, r24
    216e:	74 80       	ldd	r7, Z+4	; 0x04
    2170:	7a 94       	dec	r7
    2172:	70 22       	and	r7, r16
    2174:	c1 14       	cp	r12, r1
    2176:	d1 04       	cpc	r13, r1
    2178:	c9 f4       	brne	.+50     	; 0x21ac <_ZN6SdFile4readEPvj+0x102>
    217a:	71 10       	cpse	r7, r1
    217c:	17 c0       	rjmp	.+46     	; 0x21ac <_ZN6SdFile4readEPvj+0x102>
    217e:	45 2b       	or	r20, r21
    2180:	46 2b       	or	r20, r22
    2182:	47 2b       	or	r20, r23
    2184:	49 f4       	brne	.+18     	; 0x2198 <_ZN6SdFile4readEPvj+0xee>
    2186:	8f 89       	ldd	r24, Y+23	; 0x17
    2188:	98 8d       	ldd	r25, Y+24	; 0x18
    218a:	a9 8d       	ldd	r26, Y+25	; 0x19
    218c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    218e:	8e 83       	std	Y+6, r24	; 0x06
    2190:	9f 83       	std	Y+7, r25	; 0x07
    2192:	a8 87       	std	Y+8, r26	; 0x08
    2194:	b9 87       	std	Y+9, r27	; 0x09
    2196:	0a c0       	rjmp	.+20     	; 0x21ac <_ZN6SdFile4readEPvj+0x102>
    2198:	4e 81       	ldd	r20, Y+6	; 0x06
    219a:	5f 81       	ldd	r21, Y+7	; 0x07
    219c:	68 85       	ldd	r22, Y+8	; 0x08
    219e:	79 85       	ldd	r23, Y+9	; 0x09
    21a0:	91 01       	movw	r18, r2
    21a2:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZNK8SdVolume6fatGetEmPm>
    21a6:	88 23       	and	r24, r24
    21a8:	09 f4       	brne	.+2      	; 0x21ac <_ZN6SdFile4readEPvj+0x102>
    21aa:	97 cf       	rjmp	.-210    	; 0x20da <_ZN6SdFile4readEPvj+0x30>
    21ac:	eb 8d       	ldd	r30, Y+27	; 0x1b
    21ae:	fc 8d       	ldd	r31, Y+28	; 0x1c
    21b0:	8e 81       	ldd	r24, Y+6	; 0x06
    21b2:	9f 81       	ldd	r25, Y+7	; 0x07
    21b4:	a8 85       	ldd	r26, Y+8	; 0x08
    21b6:	b9 85       	ldd	r27, Y+9	; 0x09
    21b8:	02 97       	sbiw	r24, 0x02	; 2
    21ba:	a1 09       	sbc	r26, r1
    21bc:	b1 09       	sbc	r27, r1
    21be:	05 84       	ldd	r0, Z+13	; 0x0d
    21c0:	04 c0       	rjmp	.+8      	; 0x21ca <_ZN6SdFile4readEPvj+0x120>
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	aa 1f       	adc	r26, r26
    21c8:	bb 1f       	adc	r27, r27
    21ca:	0a 94       	dec	r0
    21cc:	d2 f7       	brpl	.-12     	; 0x21c2 <_ZN6SdFile4readEPvj+0x118>
    21ce:	46 85       	ldd	r20, Z+14	; 0x0e
    21d0:	57 85       	ldd	r21, Z+15	; 0x0f
    21d2:	60 89       	ldd	r22, Z+16	; 0x10
    21d4:	71 89       	ldd	r23, Z+17	; 0x11
    21d6:	84 0f       	add	r24, r20
    21d8:	95 1f       	adc	r25, r21
    21da:	a6 1f       	adc	r26, r22
    21dc:	b7 1f       	adc	r27, r23
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	67 0d       	add	r22, r7
    21e4:	71 1d       	adc	r23, r1
    21e6:	81 1d       	adc	r24, r1
    21e8:	91 1d       	adc	r25, r1
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	32 e0       	ldi	r19, 0x02	; 2
    21ee:	2c 19       	sub	r18, r12
    21f0:	3d 09       	sbc	r19, r13
    21f2:	32 01       	movw	r6, r4
    21f4:	24 15       	cp	r18, r4
    21f6:	35 05       	cpc	r19, r5
    21f8:	08 f4       	brcc	.+2      	; 0x21fc <_ZN6SdFile4readEPvj+0x152>
    21fa:	39 01       	movw	r6, r18
    21fc:	2c 81       	ldd	r18, Y+4	; 0x04
    21fe:	26 fd       	sbrc	r18, 6
    2200:	04 c0       	rjmp	.+8      	; 0x220a <_ZN6SdFile4readEPvj+0x160>
    2202:	61 14       	cp	r6, r1
    2204:	f2 e0       	ldi	r31, 0x02	; 2
    2206:	7f 06       	cpc	r7, r31
    2208:	79 f5       	brne	.+94     	; 0x2268 <_ZN6SdFile4readEPvj+0x1be>
    220a:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    220e:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2212:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2216:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    221a:	60 17       	cp	r22, r16
    221c:	71 07       	cpc	r23, r17
    221e:	82 07       	cpc	r24, r18
    2220:	93 07       	cpc	r25, r19
    2222:	19 f4       	brne	.+6      	; 0x222a <_ZN6SdFile4readEPvj+0x180>
    2224:	21 c0       	rjmp	.+66     	; 0x2268 <_ZN6SdFile4readEPvj+0x1be>
    2226:	c4 01       	movw	r24, r8
    2228:	32 c0       	rjmp	.+100    	; 0x228e <_ZN6SdFile4readEPvj+0x1e4>
    222a:	75 01       	movw	r14, r10
    222c:	83 01       	movw	r16, r6
    222e:	96 01       	movw	r18, r12
    2230:	ab 01       	movw	r20, r22
    2232:	bc 01       	movw	r22, r24
    2234:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_ZN8SdVolume7sdCard_E>
    2238:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <_ZN8SdVolume7sdCard_E+0x1>
    223c:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_ZN7Sd2Card8readDataEmjjPh>
    2240:	88 23       	and	r24, r24
    2242:	09 f4       	brne	.+2      	; 0x2246 <_ZN6SdFile4readEPvj+0x19c>
    2244:	4a cf       	rjmp	.-364    	; 0x20da <_ZN6SdFile4readEPvj+0x30>
    2246:	a6 0c       	add	r10, r6
    2248:	b7 1c       	adc	r11, r7
    224a:	8a 85       	ldd	r24, Y+10	; 0x0a
    224c:	9b 85       	ldd	r25, Y+11	; 0x0b
    224e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2250:	bd 85       	ldd	r27, Y+13	; 0x0d
    2252:	86 0d       	add	r24, r6
    2254:	97 1d       	adc	r25, r7
    2256:	a1 1d       	adc	r26, r1
    2258:	b1 1d       	adc	r27, r1
    225a:	8a 87       	std	Y+10, r24	; 0x0a
    225c:	9b 87       	std	Y+11, r25	; 0x0b
    225e:	ac 87       	std	Y+12, r26	; 0x0c
    2260:	bd 87       	std	Y+13, r27	; 0x0d
    2262:	46 18       	sub	r4, r6
    2264:	57 08       	sbc	r5, r7
    2266:	5d cf       	rjmp	.-326    	; 0x2122 <_ZN6SdFile4readEPvj+0x78>
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN8SdVolume13cacheRawBlockEmh>
    226e:	88 23       	and	r24, r24
    2270:	09 f4       	brne	.+2      	; 0x2274 <_ZN6SdFile4readEPvj+0x1ca>
    2272:	33 cf       	rjmp	.-410    	; 0x20da <_ZN6SdFile4readEPvj+0x30>
    2274:	f6 01       	movw	r30, r12
    2276:	e0 57       	subi	r30, 0x70	; 112
    2278:	fd 4f       	sbci	r31, 0xFD	; 253
    227a:	d5 01       	movw	r26, r10
    227c:	cf 01       	movw	r24, r30
    227e:	86 0d       	add	r24, r6
    2280:	97 1d       	adc	r25, r7
    2282:	8e 17       	cp	r24, r30
    2284:	9f 07       	cpc	r25, r31
    2286:	f9 f2       	breq	.-66     	; 0x2246 <_ZN6SdFile4readEPvj+0x19c>
    2288:	21 91       	ld	r18, Z+
    228a:	2d 93       	st	X+, r18
    228c:	fa cf       	rjmp	.-12     	; 0x2282 <_ZN6SdFile4readEPvj+0x1d8>
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	1f 91       	pop	r17
    2294:	0f 91       	pop	r16
    2296:	ff 90       	pop	r15
    2298:	ef 90       	pop	r14
    229a:	df 90       	pop	r13
    229c:	cf 90       	pop	r12
    229e:	bf 90       	pop	r11
    22a0:	af 90       	pop	r10
    22a2:	9f 90       	pop	r9
    22a4:	8f 90       	pop	r8
    22a6:	7f 90       	pop	r7
    22a8:	6f 90       	pop	r6
    22aa:	5f 90       	pop	r5
    22ac:	4f 90       	pop	r4
    22ae:	3f 90       	pop	r3
    22b0:	2f 90       	pop	r2
    22b2:	08 95       	ret

000022b4 <_ZN6SdFile12readDirCacheEv>:
    22b4:	ff 92       	push	r15
    22b6:	0f 93       	push	r16
    22b8:	1f 93       	push	r17
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	1f 92       	push	r1
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	fc 01       	movw	r30, r24
    22c6:	25 81       	ldd	r18, Z+5	; 0x05
    22c8:	22 30       	cpi	r18, 0x02	; 2
    22ca:	18 f4       	brcc	.+6      	; 0x22d2 <_ZN6SdFile12readDirCacheEv+0x1e>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	33 c0       	rjmp	.+102    	; 0x2338 <_ZN6SdFile12readDirCacheEv+0x84>
    22d2:	8c 01       	movw	r16, r24
    22d4:	fc 01       	movw	r30, r24
    22d6:	42 85       	ldd	r20, Z+10	; 0x0a
    22d8:	53 85       	ldd	r21, Z+11	; 0x0b
    22da:	64 85       	ldd	r22, Z+12	; 0x0c
    22dc:	75 85       	ldd	r23, Z+13	; 0x0d
    22de:	85 e0       	ldi	r24, 0x05	; 5
    22e0:	76 95       	lsr	r23
    22e2:	67 95       	ror	r22
    22e4:	57 95       	ror	r21
    22e6:	47 95       	ror	r20
    22e8:	8a 95       	dec	r24
    22ea:	d1 f7       	brne	.-12     	; 0x22e0 <_ZN6SdFile12readDirCacheEv+0x2c>
    22ec:	f4 2f       	mov	r31, r20
    22ee:	ff 70       	andi	r31, 0x0F	; 15
    22f0:	ff 2e       	mov	r15, r31
    22f2:	41 e0       	ldi	r20, 0x01	; 1
    22f4:	50 e0       	ldi	r21, 0x00	; 0
    22f6:	be 01       	movw	r22, r28
    22f8:	6f 5f       	subi	r22, 0xFF	; 255
    22fa:	7f 4f       	sbci	r23, 0xFF	; 255
    22fc:	c8 01       	movw	r24, r16
    22fe:	0e 94 55 10 	call	0x20aa	; 0x20aa <_ZN6SdFile4readEPvj>
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	19 f4       	brne	.+6      	; 0x230c <_ZN6SdFile12readDirCacheEv+0x58>
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <_ZN6SdFile12readDirCacheEv+0x5c>
    230c:	8f ef       	ldi	r24, 0xFF	; 255
    230e:	9f ef       	ldi	r25, 0xFF	; 255
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	e1 f2       	breq	.-72     	; 0x22cc <_ZN6SdFile12readDirCacheEv+0x18>
    2314:	f8 01       	movw	r30, r16
    2316:	82 85       	ldd	r24, Z+10	; 0x0a
    2318:	93 85       	ldd	r25, Z+11	; 0x0b
    231a:	a4 85       	ldd	r26, Z+12	; 0x0c
    231c:	b5 85       	ldd	r27, Z+13	; 0x0d
    231e:	4f 96       	adiw	r24, 0x1f	; 31
    2320:	a1 1d       	adc	r26, r1
    2322:	b1 1d       	adc	r27, r1
    2324:	82 87       	std	Z+10, r24	; 0x0a
    2326:	93 87       	std	Z+11, r25	; 0x0b
    2328:	a4 87       	std	Z+12, r26	; 0x0c
    232a:	b5 87       	std	Z+13, r27	; 0x0d
    232c:	f0 e2       	ldi	r31, 0x20	; 32
    232e:	ff 9e       	mul	r15, r31
    2330:	c0 01       	movw	r24, r0
    2332:	11 24       	eor	r1, r1
    2334:	80 57       	subi	r24, 0x70	; 112
    2336:	9d 4f       	sbci	r25, 0xFD	; 253
    2338:	0f 90       	pop	r0
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	1f 91       	pop	r17
    2340:	0f 91       	pop	r16
    2342:	ff 90       	pop	r15
    2344:	08 95       	ret

00002346 <_ZN6SdFile7seekSetEm>:
    2346:	8f 92       	push	r8
    2348:	9f 92       	push	r9
    234a:	af 92       	push	r10
    234c:	bf 92       	push	r11
    234e:	cf 92       	push	r12
    2350:	df 92       	push	r13
    2352:	ef 92       	push	r14
    2354:	ff 92       	push	r15
    2356:	0f 93       	push	r16
    2358:	1f 93       	push	r17
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	ec 01       	movw	r28, r24
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	81 11       	cpse	r24, r1
    2364:	02 c0       	rjmp	.+4      	; 0x236a <_ZN6SdFile7seekSetEm+0x24>
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	78 c0       	rjmp	.+240    	; 0x245a <_ZN6SdFile7seekSetEm+0x114>
    236a:	0b 89       	ldd	r16, Y+19	; 0x13
    236c:	1c 89       	ldd	r17, Y+20	; 0x14
    236e:	2d 89       	ldd	r18, Y+21	; 0x15
    2370:	3e 89       	ldd	r19, Y+22	; 0x16
    2372:	04 17       	cp	r16, r20
    2374:	15 07       	cpc	r17, r21
    2376:	26 07       	cpc	r18, r22
    2378:	37 07       	cpc	r19, r23
    237a:	a8 f3       	brcs	.-22     	; 0x2366 <_ZN6SdFile7seekSetEm+0x20>
    237c:	6a 01       	movw	r12, r20
    237e:	7b 01       	movw	r14, r22
    2380:	82 30       	cpi	r24, 0x02	; 2
    2382:	29 f4       	brne	.+10     	; 0x238e <_ZN6SdFile7seekSetEm+0x48>
    2384:	ca 86       	std	Y+10, r12	; 0x0a
    2386:	db 86       	std	Y+11, r13	; 0x0b
    2388:	ec 86       	std	Y+12, r14	; 0x0c
    238a:	fd 86       	std	Y+13, r15	; 0x0d
    238c:	0d c0       	rjmp	.+26     	; 0x23a8 <_ZN6SdFile7seekSetEm+0x62>
    238e:	c1 14       	cp	r12, r1
    2390:	d1 04       	cpc	r13, r1
    2392:	e1 04       	cpc	r14, r1
    2394:	f1 04       	cpc	r15, r1
    2396:	51 f4       	brne	.+20     	; 0x23ac <_ZN6SdFile7seekSetEm+0x66>
    2398:	1e 82       	std	Y+6, r1	; 0x06
    239a:	1f 82       	std	Y+7, r1	; 0x07
    239c:	18 86       	std	Y+8, r1	; 0x08
    239e:	19 86       	std	Y+9, r1	; 0x09
    23a0:	1a 86       	std	Y+10, r1	; 0x0a
    23a2:	1b 86       	std	Y+11, r1	; 0x0b
    23a4:	1c 86       	std	Y+12, r1	; 0x0c
    23a6:	1d 86       	std	Y+13, r1	; 0x0d
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	57 c0       	rjmp	.+174    	; 0x245a <_ZN6SdFile7seekSetEm+0x114>
    23ac:	8a 84       	ldd	r8, Y+10	; 0x0a
    23ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    23b0:	ac 84       	ldd	r10, Y+12	; 0x0c
    23b2:	bd 84       	ldd	r11, Y+13	; 0x0d
    23b4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    23b6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    23b8:	25 85       	ldd	r18, Z+13	; 0x0d
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	27 5f       	subi	r18, 0xF7	; 247
    23be:	3f 4f       	sbci	r19, 0xFF	; 255
    23c0:	b5 01       	movw	r22, r10
    23c2:	a4 01       	movw	r20, r8
    23c4:	41 50       	subi	r20, 0x01	; 1
    23c6:	51 09       	sbc	r21, r1
    23c8:	61 09       	sbc	r22, r1
    23ca:	71 09       	sbc	r23, r1
    23cc:	02 2e       	mov	r0, r18
    23ce:	04 c0       	rjmp	.+8      	; 0x23d8 <_ZN6SdFile7seekSetEm+0x92>
    23d0:	76 95       	lsr	r23
    23d2:	67 95       	ror	r22
    23d4:	57 95       	ror	r21
    23d6:	47 95       	ror	r20
    23d8:	0a 94       	dec	r0
    23da:	d2 f7       	brpl	.-12     	; 0x23d0 <_ZN6SdFile7seekSetEm+0x8a>
    23dc:	d7 01       	movw	r26, r14
    23de:	c6 01       	movw	r24, r12
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	a1 09       	sbc	r26, r1
    23e4:	b1 09       	sbc	r27, r1
    23e6:	04 c0       	rjmp	.+8      	; 0x23f0 <_ZN6SdFile7seekSetEm+0xaa>
    23e8:	b6 95       	lsr	r27
    23ea:	a7 95       	ror	r26
    23ec:	97 95       	ror	r25
    23ee:	87 95       	ror	r24
    23f0:	2a 95       	dec	r18
    23f2:	d2 f7       	brpl	.-12     	; 0x23e8 <_ZN6SdFile7seekSetEm+0xa2>
    23f4:	84 17       	cp	r24, r20
    23f6:	95 07       	cpc	r25, r21
    23f8:	a6 07       	cpc	r26, r22
    23fa:	b7 07       	cpc	r27, r23
    23fc:	20 f0       	brcs	.+8      	; 0x2406 <_ZN6SdFile7seekSetEm+0xc0>
    23fe:	89 28       	or	r8, r9
    2400:	8a 28       	or	r8, r10
    2402:	8b 28       	or	r8, r11
    2404:	71 f4       	brne	.+28     	; 0x2422 <_ZN6SdFile7seekSetEm+0xdc>
    2406:	4f 89       	ldd	r20, Y+23	; 0x17
    2408:	58 8d       	ldd	r21, Y+24	; 0x18
    240a:	69 8d       	ldd	r22, Y+25	; 0x19
    240c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    240e:	4e 83       	std	Y+6, r20	; 0x06
    2410:	5f 83       	std	Y+7, r21	; 0x07
    2412:	68 87       	std	Y+8, r22	; 0x08
    2414:	79 87       	std	Y+9, r23	; 0x09
    2416:	4c 01       	movw	r8, r24
    2418:	5d 01       	movw	r10, r26
    241a:	8e 01       	movw	r16, r28
    241c:	0a 5f       	subi	r16, 0xFA	; 250
    241e:	1f 4f       	sbci	r17, 0xFF	; 255
    2420:	16 c0       	rjmp	.+44     	; 0x244e <_ZN6SdFile7seekSetEm+0x108>
    2422:	84 1b       	sub	r24, r20
    2424:	95 0b       	sbc	r25, r21
    2426:	a6 0b       	sbc	r26, r22
    2428:	b7 0b       	sbc	r27, r23
    242a:	f5 cf       	rjmp	.-22     	; 0x2416 <_ZN6SdFile7seekSetEm+0xd0>
    242c:	4e 81       	ldd	r20, Y+6	; 0x06
    242e:	5f 81       	ldd	r21, Y+7	; 0x07
    2430:	68 85       	ldd	r22, Y+8	; 0x08
    2432:	79 85       	ldd	r23, Y+9	; 0x09
    2434:	98 01       	movw	r18, r16
    2436:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2438:	9c 8d       	ldd	r25, Y+28	; 0x1c
    243a:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZNK8SdVolume6fatGetEmPm>
    243e:	91 e0       	ldi	r25, 0x01	; 1
    2440:	89 1a       	sub	r8, r25
    2442:	91 08       	sbc	r9, r1
    2444:	a1 08       	sbc	r10, r1
    2446:	b1 08       	sbc	r11, r1
    2448:	88 23       	and	r24, r24
    244a:	09 f4       	brne	.+2      	; 0x244e <_ZN6SdFile7seekSetEm+0x108>
    244c:	8c cf       	rjmp	.-232    	; 0x2366 <_ZN6SdFile7seekSetEm+0x20>
    244e:	81 14       	cp	r8, r1
    2450:	91 04       	cpc	r9, r1
    2452:	a1 04       	cpc	r10, r1
    2454:	b1 04       	cpc	r11, r1
    2456:	51 f7       	brne	.-44     	; 0x242c <_ZN6SdFile7seekSetEm+0xe6>
    2458:	95 cf       	rjmp	.-214    	; 0x2384 <_ZN6SdFile7seekSetEm+0x3e>
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	1f 91       	pop	r17
    2460:	0f 91       	pop	r16
    2462:	ff 90       	pop	r15
    2464:	ef 90       	pop	r14
    2466:	df 90       	pop	r13
    2468:	cf 90       	pop	r12
    246a:	bf 90       	pop	r11
    246c:	af 90       	pop	r10
    246e:	9f 90       	pop	r9
    2470:	8f 90       	pop	r8
    2472:	08 95       	ret

00002474 <_ZN6SdFile4syncEh>:
    2474:	ff 92       	push	r15
    2476:	0f 93       	push	r16
    2478:	1f 93       	push	r17
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	fc 01       	movw	r30, r24
    2480:	25 81       	ldd	r18, Z+5	; 0x05
    2482:	22 23       	and	r18, r18
    2484:	09 f4       	brne	.+2      	; 0x2488 <_ZN6SdFile4syncEh+0x14>
    2486:	42 c0       	rjmp	.+132    	; 0x250c <_ZN6SdFile4syncEh+0x98>
    2488:	f6 2e       	mov	r15, r22
    248a:	ec 01       	movw	r28, r24
    248c:	84 81       	ldd	r24, Z+4	; 0x04
    248e:	87 ff       	sbrs	r24, 7
    2490:	30 c0       	rjmp	.+96     	; 0x24f2 <_ZN6SdFile4syncEh+0x7e>
    2492:	61 e0       	ldi	r22, 0x01	; 1
    2494:	cf 01       	movw	r24, r30
    2496:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN6SdFile13cacheDirEntryEh>
    249a:	8c 01       	movw	r16, r24
    249c:	89 2b       	or	r24, r25
    249e:	b1 f1       	breq	.+108    	; 0x250c <_ZN6SdFile4syncEh+0x98>
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
    24a2:	82 30       	cpi	r24, 0x02	; 2
    24a4:	48 f4       	brcc	.+18     	; 0x24b8 <_ZN6SdFile4syncEh+0x44>
    24a6:	8b 89       	ldd	r24, Y+19	; 0x13
    24a8:	9c 89       	ldd	r25, Y+20	; 0x14
    24aa:	ad 89       	ldd	r26, Y+21	; 0x15
    24ac:	be 89       	ldd	r27, Y+22	; 0x16
    24ae:	f8 01       	movw	r30, r16
    24b0:	84 8f       	std	Z+28, r24	; 0x1c
    24b2:	95 8f       	std	Z+29, r25	; 0x1d
    24b4:	a6 8f       	std	Z+30, r26	; 0x1e
    24b6:	b7 8f       	std	Z+31, r27	; 0x1f
    24b8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ba:	98 8d       	ldd	r25, Y+24	; 0x18
    24bc:	a9 8d       	ldd	r26, Y+25	; 0x19
    24be:	ba 8d       	ldd	r27, Y+26	; 0x1a
    24c0:	f8 01       	movw	r30, r16
    24c2:	93 8f       	std	Z+27, r25	; 0x1b
    24c4:	82 8f       	std	Z+26, r24	; 0x1a
    24c6:	b5 8b       	std	Z+21, r27	; 0x15
    24c8:	a4 8b       	std	Z+20, r26	; 0x14
    24ca:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <_ZN6SdFile9dateTime_E>
    24ce:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <_ZN6SdFile9dateTime_E+0x1>
    24d2:	30 97       	sbiw	r30, 0x00	; 0
    24d4:	59 f0       	breq	.+22     	; 0x24ec <_ZN6SdFile4syncEh+0x78>
    24d6:	b8 01       	movw	r22, r16
    24d8:	6a 5e       	subi	r22, 0xEA	; 234
    24da:	7f 4f       	sbci	r23, 0xFF	; 255
    24dc:	c8 01       	movw	r24, r16
    24de:	48 96       	adiw	r24, 0x18	; 24
    24e0:	09 95       	icall
    24e2:	f8 01       	movw	r30, r16
    24e4:	80 8d       	ldd	r24, Z+24	; 0x18
    24e6:	91 8d       	ldd	r25, Z+25	; 0x19
    24e8:	93 8b       	std	Z+19, r25	; 0x13
    24ea:	82 8b       	std	Z+18, r24	; 0x12
    24ec:	8c 81       	ldd	r24, Y+4	; 0x04
    24ee:	8f 77       	andi	r24, 0x7F	; 127
    24f0:	8c 83       	std	Y+4, r24	; 0x04
    24f2:	f1 10       	cpse	r15, r1
    24f4:	03 c0       	rjmp	.+6      	; 0x24fc <_ZN6SdFile4syncEh+0x88>
    24f6:	8c 81       	ldd	r24, Y+4	; 0x04
    24f8:	8f 7e       	andi	r24, 0xEF	; 239
    24fa:	8c 83       	std	Y+4, r24	; 0x04
    24fc:	8f 2d       	mov	r24, r15
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	1f 91       	pop	r17
    2504:	0f 91       	pop	r16
    2506:	ff 90       	pop	r15
    2508:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <_ZN8SdVolume10cacheFlushEh>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	1f 91       	pop	r17
    2514:	0f 91       	pop	r16
    2516:	ff 90       	pop	r15
    2518:	08 95       	ret

0000251a <_ZN6SdFile5closeEv>:
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	ec 01       	movw	r28, r24
    2520:	61 e0       	ldi	r22, 0x01	; 1
    2522:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN6SdFile4syncEh>
    2526:	88 23       	and	r24, r24
    2528:	11 f0       	breq	.+4      	; 0x252e <_ZN6SdFile5closeEv+0x14>
    252a:	1d 82       	std	Y+5, r1	; 0x05
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	08 95       	ret

00002534 <_ZN6SdFile17availableForWriteEv>:
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	ec 01       	movw	r28, r24
    253a:	8d 81       	ldd	r24, Y+5	; 0x05
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	d1 f4       	brne	.+52     	; 0x2574 <_ZN6SdFile17availableForWriteEv+0x40>
    2540:	8c 81       	ldd	r24, Y+4	; 0x04
    2542:	81 ff       	sbrs	r24, 1
    2544:	17 c0       	rjmp	.+46     	; 0x2574 <_ZN6SdFile17availableForWriteEv+0x40>
    2546:	82 ff       	sbrs	r24, 2
    2548:	0d c0       	rjmp	.+26     	; 0x2564 <_ZN6SdFile17availableForWriteEv+0x30>
    254a:	4b 89       	ldd	r20, Y+19	; 0x13
    254c:	5c 89       	ldd	r21, Y+20	; 0x14
    254e:	6d 89       	ldd	r22, Y+21	; 0x15
    2550:	7e 89       	ldd	r23, Y+22	; 0x16
    2552:	8a 85       	ldd	r24, Y+10	; 0x0a
    2554:	9b 85       	ldd	r25, Y+11	; 0x0b
    2556:	ac 85       	ldd	r26, Y+12	; 0x0c
    2558:	bd 85       	ldd	r27, Y+13	; 0x0d
    255a:	84 17       	cp	r24, r20
    255c:	95 07       	cpc	r25, r21
    255e:	a6 07       	cpc	r26, r22
    2560:	b7 07       	cpc	r27, r23
    2562:	59 f4       	brne	.+22     	; 0x257a <_ZN6SdFile17availableForWriteEv+0x46>
    2564:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_ZN8SdVolume7sdCard_E>
    2568:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <_ZN8SdVolume7sdCard_E+0x1>
    256c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN7Sd2Card6isBusyEv>
    2570:	88 23       	and	r24, r24
    2572:	49 f0       	breq	.+18     	; 0x2586 <_ZN6SdFile17availableForWriteEv+0x52>
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	2a c0       	rjmp	.+84     	; 0x25ce <_ZN6SdFile17availableForWriteEv+0x9a>
    257a:	ce 01       	movw	r24, r28
    257c:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN6SdFile7seekSetEm>
    2580:	81 11       	cpse	r24, r1
    2582:	f0 cf       	rjmp	.-32     	; 0x2564 <_ZN6SdFile17availableForWriteEv+0x30>
    2584:	f7 cf       	rjmp	.-18     	; 0x2574 <_ZN6SdFile17availableForWriteEv+0x40>
    2586:	8c 81       	ldd	r24, Y+4	; 0x04
    2588:	85 ff       	sbrs	r24, 5
    258a:	08 c0       	rjmp	.+16     	; 0x259c <_ZN6SdFile17availableForWriteEv+0x68>
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	ce 01       	movw	r24, r28
    2590:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN6SdFile4syncEh>
    2594:	8c 81       	ldd	r24, Y+4	; 0x04
    2596:	8f 7d       	andi	r24, 0xDF	; 223
    2598:	8c 83       	std	Y+4, r24	; 0x04
    259a:	ec cf       	rjmp	.-40     	; 0x2574 <_ZN6SdFile17availableForWriteEv+0x40>
    259c:	40 91 89 02 	lds	r20, 0x0289	; 0x800289 <_ZN8SdVolume17cacheMirrorBlock_E>
    25a0:	50 91 8a 02 	lds	r21, 0x028A	; 0x80028a <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    25a4:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    25a8:	70 91 8c 02 	lds	r23, 0x028C	; 0x80028c <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    25ac:	45 2b       	or	r20, r21
    25ae:	46 2b       	or	r20, r22
    25b0:	47 2b       	or	r20, r23
    25b2:	21 f0       	breq	.+8      	; 0x25bc <_ZN6SdFile17availableForWriteEv+0x88>
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    25ba:	dc cf       	rjmp	.-72     	; 0x2574 <_ZN6SdFile17availableForWriteEv+0x40>
    25bc:	80 61       	ori	r24, 0x10	; 16
    25be:	8c 83       	std	Y+4, r24	; 0x04
    25c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    25c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    25c4:	31 70       	andi	r19, 0x01	; 1
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	92 e0       	ldi	r25, 0x02	; 2
    25ca:	82 1b       	sub	r24, r18
    25cc:	93 0b       	sbc	r25, r19
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	08 95       	ret

000025d4 <_ZN6SdFile8truncateEm>:
    25d4:	4f 92       	push	r4
    25d6:	5f 92       	push	r5
    25d8:	6f 92       	push	r6
    25da:	7f 92       	push	r7
    25dc:	8f 92       	push	r8
    25de:	9f 92       	push	r9
    25e0:	af 92       	push	r10
    25e2:	bf 92       	push	r11
    25e4:	ef 92       	push	r14
    25e6:	ff 92       	push	r15
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <_ZN6SdFile8truncateEm+0x1e>
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <_ZN6SdFile8truncateEm+0x20>
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	fc 01       	movw	r30, r24
    25fa:	85 81       	ldd	r24, Z+5	; 0x05
    25fc:	81 30       	cpi	r24, 0x01	; 1
    25fe:	e9 f4       	brne	.+58     	; 0x263a <_ZN6SdFile8truncateEm+0x66>
    2600:	84 81       	ldd	r24, Z+4	; 0x04
    2602:	81 ff       	sbrs	r24, 1
    2604:	1a c0       	rjmp	.+52     	; 0x263a <_ZN6SdFile8truncateEm+0x66>
    2606:	83 89       	ldd	r24, Z+19	; 0x13
    2608:	94 89       	ldd	r25, Z+20	; 0x14
    260a:	a5 89       	ldd	r26, Z+21	; 0x15
    260c:	b6 89       	ldd	r27, Z+22	; 0x16
    260e:	84 17       	cp	r24, r20
    2610:	95 07       	cpc	r25, r21
    2612:	a6 07       	cpc	r26, r22
    2614:	b7 07       	cpc	r27, r23
    2616:	88 f0       	brcs	.+34     	; 0x263a <_ZN6SdFile8truncateEm+0x66>
    2618:	89 2b       	or	r24, r25
    261a:	8a 2b       	or	r24, r26
    261c:	8b 2b       	or	r24, r27
    261e:	09 f4       	brne	.+2      	; 0x2622 <_ZN6SdFile8truncateEm+0x4e>
    2620:	7a c0       	rjmp	.+244    	; 0x2716 <_ZN6SdFile8truncateEm+0x142>
    2622:	4a 01       	movw	r8, r20
    2624:	5b 01       	movw	r10, r22
    2626:	7f 01       	movw	r14, r30
    2628:	42 84       	ldd	r4, Z+10	; 0x0a
    262a:	53 84       	ldd	r5, Z+11	; 0x0b
    262c:	64 84       	ldd	r6, Z+12	; 0x0c
    262e:	75 84       	ldd	r7, Z+13	; 0x0d
    2630:	cf 01       	movw	r24, r30
    2632:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN6SdFile7seekSetEm>
    2636:	81 11       	cpse	r24, r1
    2638:	02 c0       	rjmp	.+4      	; 0x263e <_ZN6SdFile8truncateEm+0x6a>
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	6d c0       	rjmp	.+218    	; 0x2718 <_ZN6SdFile8truncateEm+0x144>
    263e:	f7 01       	movw	r30, r14
    2640:	83 8d       	ldd	r24, Z+27	; 0x1b
    2642:	94 8d       	ldd	r25, Z+28	; 0x1c
    2644:	81 14       	cp	r8, r1
    2646:	91 04       	cpc	r9, r1
    2648:	a1 04       	cpc	r10, r1
    264a:	b1 04       	cpc	r11, r1
    264c:	71 f4       	brne	.+28     	; 0x266a <_ZN6SdFile8truncateEm+0x96>
    264e:	47 89       	ldd	r20, Z+23	; 0x17
    2650:	50 8d       	ldd	r21, Z+24	; 0x18
    2652:	61 8d       	ldd	r22, Z+25	; 0x19
    2654:	72 8d       	ldd	r23, Z+26	; 0x1a
    2656:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_ZN8SdVolume9freeChainEm>
    265a:	88 23       	and	r24, r24
    265c:	71 f3       	breq	.-36     	; 0x263a <_ZN6SdFile8truncateEm+0x66>
    265e:	f7 01       	movw	r30, r14
    2660:	17 8a       	std	Z+23, r1	; 0x17
    2662:	10 8e       	std	Z+24, r1	; 0x18
    2664:	11 8e       	std	Z+25, r1	; 0x19
    2666:	12 8e       	std	Z+26, r1	; 0x1a
    2668:	3a c0       	rjmp	.+116    	; 0x26de <_ZN6SdFile8truncateEm+0x10a>
    266a:	f7 01       	movw	r30, r14
    266c:	46 81       	ldd	r20, Z+6	; 0x06
    266e:	57 81       	ldd	r21, Z+7	; 0x07
    2670:	60 85       	ldd	r22, Z+8	; 0x08
    2672:	71 85       	ldd	r23, Z+9	; 0x09
    2674:	9e 01       	movw	r18, r28
    2676:	2f 5f       	subi	r18, 0xFF	; 255
    2678:	3f 4f       	sbci	r19, 0xFF	; 255
    267a:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZNK8SdVolume6fatGetEmPm>
    267e:	88 23       	and	r24, r24
    2680:	e1 f2       	breq	.-72     	; 0x263a <_ZN6SdFile8truncateEm+0x66>
    2682:	49 81       	ldd	r20, Y+1	; 0x01
    2684:	5a 81       	ldd	r21, Y+2	; 0x02
    2686:	6b 81       	ldd	r22, Y+3	; 0x03
    2688:	7c 81       	ldd	r23, Y+4	; 0x04
    268a:	f7 01       	movw	r30, r14
    268c:	83 8d       	ldd	r24, Z+27	; 0x1b
    268e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2690:	fc 01       	movw	r30, r24
    2692:	27 89       	ldd	r18, Z+23	; 0x17
    2694:	20 31       	cpi	r18, 0x10	; 16
    2696:	29 f0       	breq	.+10     	; 0x26a2 <_ZN6SdFile8truncateEm+0xce>
    2698:	08 ef       	ldi	r16, 0xF8	; 248
    269a:	1f ef       	ldi	r17, 0xFF	; 255
    269c:	2f ef       	ldi	r18, 0xFF	; 255
    269e:	3f e0       	ldi	r19, 0x0F	; 15
    26a0:	04 c0       	rjmp	.+8      	; 0x26aa <_ZN6SdFile8truncateEm+0xd6>
    26a2:	08 ef       	ldi	r16, 0xF8	; 248
    26a4:	1f ef       	ldi	r17, 0xFF	; 255
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 17       	cp	r20, r16
    26ac:	51 07       	cpc	r21, r17
    26ae:	62 07       	cpc	r22, r18
    26b0:	73 07       	cpc	r23, r19
    26b2:	a8 f4       	brcc	.+42     	; 0x26de <_ZN6SdFile8truncateEm+0x10a>
    26b4:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_ZN8SdVolume9freeChainEm>
    26b8:	88 23       	and	r24, r24
    26ba:	09 f4       	brne	.+2      	; 0x26be <_ZN6SdFile8truncateEm+0xea>
    26bc:	be cf       	rjmp	.-132    	; 0x263a <_ZN6SdFile8truncateEm+0x66>
    26be:	f7 01       	movw	r30, r14
    26c0:	46 81       	ldd	r20, Z+6	; 0x06
    26c2:	57 81       	ldd	r21, Z+7	; 0x07
    26c4:	60 85       	ldd	r22, Z+8	; 0x08
    26c6:	71 85       	ldd	r23, Z+9	; 0x09
    26c8:	0f ef       	ldi	r16, 0xFF	; 255
    26ca:	1f ef       	ldi	r17, 0xFF	; 255
    26cc:	2f ef       	ldi	r18, 0xFF	; 255
    26ce:	3f e0       	ldi	r19, 0x0F	; 15
    26d0:	83 8d       	ldd	r24, Z+27	; 0x1b
    26d2:	94 8d       	ldd	r25, Z+28	; 0x1c
    26d4:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN8SdVolume6fatPutEmm>
    26d8:	88 23       	and	r24, r24
    26da:	09 f4       	brne	.+2      	; 0x26de <_ZN6SdFile8truncateEm+0x10a>
    26dc:	ae cf       	rjmp	.-164    	; 0x263a <_ZN6SdFile8truncateEm+0x66>
    26de:	f7 01       	movw	r30, r14
    26e0:	83 8a       	std	Z+19, r8	; 0x13
    26e2:	94 8a       	std	Z+20, r9	; 0x14
    26e4:	a5 8a       	std	Z+21, r10	; 0x15
    26e6:	b6 8a       	std	Z+22, r11	; 0x16
    26e8:	84 81       	ldd	r24, Z+4	; 0x04
    26ea:	80 68       	ori	r24, 0x80	; 128
    26ec:	84 83       	std	Z+4, r24	; 0x04
    26ee:	61 e0       	ldi	r22, 0x01	; 1
    26f0:	c7 01       	movw	r24, r14
    26f2:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN6SdFile4syncEh>
    26f6:	88 23       	and	r24, r24
    26f8:	09 f4       	brne	.+2      	; 0x26fc <_ZN6SdFile8truncateEm+0x128>
    26fa:	9f cf       	rjmp	.-194    	; 0x263a <_ZN6SdFile8truncateEm+0x66>
    26fc:	b5 01       	movw	r22, r10
    26fe:	a4 01       	movw	r20, r8
    2700:	48 14       	cp	r4, r8
    2702:	59 04       	cpc	r5, r9
    2704:	6a 04       	cpc	r6, r10
    2706:	7b 04       	cpc	r7, r11
    2708:	10 f4       	brcc	.+4      	; 0x270e <_ZN6SdFile8truncateEm+0x13a>
    270a:	b3 01       	movw	r22, r6
    270c:	a2 01       	movw	r20, r4
    270e:	c7 01       	movw	r24, r14
    2710:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN6SdFile7seekSetEm>
    2714:	01 c0       	rjmp	.+2      	; 0x2718 <_ZN6SdFile8truncateEm+0x144>
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	ff 90       	pop	r15
    272a:	ef 90       	pop	r14
    272c:	bf 90       	pop	r11
    272e:	af 90       	pop	r10
    2730:	9f 90       	pop	r9
    2732:	8f 90       	pop	r8
    2734:	7f 90       	pop	r7
    2736:	6f 90       	pop	r6
    2738:	5f 90       	pop	r5
    273a:	4f 90       	pop	r4
    273c:	08 95       	ret

0000273e <_ZN6SdFile15openCachedEntryEhh>:
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	ec 01       	movw	r28, r24
    2746:	80 e2       	ldi	r24, 0x20	; 32
    2748:	68 9f       	mul	r22, r24
    274a:	f0 01       	movw	r30, r0
    274c:	11 24       	eor	r1, r1
    274e:	e0 57       	subi	r30, 0x70	; 112
    2750:	fd 4f       	sbci	r31, 0xFD	; 253
    2752:	93 85       	ldd	r25, Z+11	; 0x0b
    2754:	91 71       	andi	r25, 0x11	; 17
    2756:	29 f0       	breq	.+10     	; 0x2762 <_ZN6SdFile15openCachedEntryEhh+0x24>
    2758:	84 2f       	mov	r24, r20
    275a:	82 74       	andi	r24, 0x42	; 66
    275c:	11 f0       	breq	.+4      	; 0x2762 <_ZN6SdFile15openCachedEntryEhh+0x24>
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	52 c0       	rjmp	.+164    	; 0x2806 <_ZN6SdFile15openCachedEntryEhh+0xc8>
    2762:	14 2f       	mov	r17, r20
    2764:	6a 8b       	std	Y+18, r22	; 0x12
    2766:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    276a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    276e:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2772:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2776:	8e 87       	std	Y+14, r24	; 0x0e
    2778:	9f 87       	std	Y+15, r25	; 0x0f
    277a:	a8 8b       	std	Y+16, r26	; 0x10
    277c:	b9 8b       	std	Y+17, r27	; 0x11
    277e:	44 89       	ldd	r20, Z+20	; 0x14
    2780:	55 89       	ldd	r21, Z+21	; 0x15
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	ba 01       	movw	r22, r20
    2788:	55 27       	eor	r21, r21
    278a:	44 27       	eor	r20, r20
    278c:	82 8d       	ldd	r24, Z+26	; 0x1a
    278e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2790:	a0 e0       	ldi	r26, 0x00	; 0
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	48 2b       	or	r20, r24
    2796:	59 2b       	or	r21, r25
    2798:	6a 2b       	or	r22, r26
    279a:	7b 2b       	or	r23, r27
    279c:	4f 8b       	std	Y+23, r20	; 0x17
    279e:	58 8f       	std	Y+24, r21	; 0x18
    27a0:	69 8f       	std	Y+25, r22	; 0x19
    27a2:	7a 8f       	std	Y+26, r23	; 0x1a
    27a4:	83 85       	ldd	r24, Z+11	; 0x0b
    27a6:	88 71       	andi	r24, 0x18	; 24
    27a8:	51 f4       	brne	.+20     	; 0x27be <_ZN6SdFile15openCachedEntryEhh+0x80>
    27aa:	84 8d       	ldd	r24, Z+28	; 0x1c
    27ac:	95 8d       	ldd	r25, Z+29	; 0x1d
    27ae:	a6 8d       	ldd	r26, Z+30	; 0x1e
    27b0:	b7 8d       	ldd	r27, Z+31	; 0x1f
    27b2:	8b 8b       	std	Y+19, r24	; 0x13
    27b4:	9c 8b       	std	Y+20, r25	; 0x14
    27b6:	ad 8b       	std	Y+21, r26	; 0x15
    27b8:	be 8b       	std	Y+22, r27	; 0x16
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	0c c0       	rjmp	.+24     	; 0x27d6 <_ZN6SdFile15openCachedEntryEhh+0x98>
    27be:	80 31       	cpi	r24, 0x10	; 16
    27c0:	71 f6       	brne	.-100    	; 0x275e <_ZN6SdFile15openCachedEntryEhh+0x20>
    27c2:	9e 01       	movw	r18, r28
    27c4:	2d 5e       	subi	r18, 0xED	; 237
    27c6:	3f 4f       	sbci	r19, 0xFF	; 255
    27c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27cc:	0e 94 dd 17 	call	0x2fba	; 0x2fba <_ZNK8SdVolume9chainSizeEmPm>
    27d0:	88 23       	and	r24, r24
    27d2:	29 f2       	breq	.-118    	; 0x275e <_ZN6SdFile15openCachedEntryEhh+0x20>
    27d4:	84 e0       	ldi	r24, 0x04	; 4
    27d6:	8d 83       	std	Y+5, r24	; 0x05
    27d8:	81 2f       	mov	r24, r17
    27da:	8f 70       	andi	r24, 0x0F	; 15
    27dc:	8c 83       	std	Y+4, r24	; 0x04
    27de:	1e 82       	std	Y+6, r1	; 0x06
    27e0:	1f 82       	std	Y+7, r1	; 0x07
    27e2:	18 86       	std	Y+8, r1	; 0x08
    27e4:	19 86       	std	Y+9, r1	; 0x09
    27e6:	1a 86       	std	Y+10, r1	; 0x0a
    27e8:	1b 86       	std	Y+11, r1	; 0x0b
    27ea:	1c 86       	std	Y+12, r1	; 0x0c
    27ec:	1d 86       	std	Y+13, r1	; 0x0d
    27ee:	16 ff       	sbrs	r17, 6
    27f0:	09 c0       	rjmp	.+18     	; 0x2804 <_ZN6SdFile15openCachedEntryEhh+0xc6>
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	ba 01       	movw	r22, r20
    27f8:	ce 01       	movw	r24, r28
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <_ZN6SdFile8truncateEm>
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	df 91       	pop	r29
    2808:	cf 91       	pop	r28
    280a:	1f 91       	pop	r17
    280c:	08 95       	ret

0000280e <_ZN6SdFile4openEPS_PKch>:
    280e:	bf 92       	push	r11
    2810:	cf 92       	push	r12
    2812:	df 92       	push	r13
    2814:	ef 92       	push	r14
    2816:	ff 92       	push	r15
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	2b 97       	sbiw	r28, 0x0b	; 11
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	fc 01       	movw	r30, r24
    2832:	35 81       	ldd	r19, Z+5	; 0x05
    2834:	31 11       	cpse	r19, r1
    2836:	c0 c0       	rjmp	.+384    	; 0x29b8 <_ZN6SdFile4openEPS_PKch+0x1aa>
    2838:	c2 2e       	mov	r12, r18
    283a:	8b 01       	movw	r16, r22
    283c:	7c 01       	movw	r14, r24
    283e:	be 01       	movw	r22, r28
    2840:	6f 5f       	subi	r22, 0xFF	; 255
    2842:	7f 4f       	sbci	r23, 0xFF	; 255
    2844:	ca 01       	movw	r24, r20
    2846:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN6SdFile10make83NameEPKcPh>
    284a:	88 23       	and	r24, r24
    284c:	09 f4       	brne	.+2      	; 0x2850 <_ZN6SdFile4openEPS_PKch+0x42>
    284e:	b4 c0       	rjmp	.+360    	; 0x29b8 <_ZN6SdFile4openEPS_PKch+0x1aa>
    2850:	f8 01       	movw	r30, r16
    2852:	83 8d       	ldd	r24, Z+27	; 0x1b
    2854:	94 8d       	ldd	r25, Z+28	; 0x1c
    2856:	f7 01       	movw	r30, r14
    2858:	94 8f       	std	Z+28, r25	; 0x1c
    285a:	83 8f       	std	Z+27, r24	; 0x1b
    285c:	f8 01       	movw	r30, r16
    285e:	16 82       	std	Z+6, r1	; 0x06
    2860:	17 82       	std	Z+7, r1	; 0x07
    2862:	10 86       	std	Z+8, r1	; 0x08
    2864:	11 86       	std	Z+9, r1	; 0x09
    2866:	12 86       	std	Z+10, r1	; 0x0a
    2868:	13 86       	std	Z+11, r1	; 0x0b
    286a:	14 86       	std	Z+12, r1	; 0x0c
    286c:	15 86       	std	Z+13, r1	; 0x0d
    286e:	d1 2c       	mov	r13, r1
    2870:	f8 01       	movw	r30, r16
    2872:	82 85       	ldd	r24, Z+10	; 0x0a
    2874:	93 85       	ldd	r25, Z+11	; 0x0b
    2876:	a4 85       	ldd	r26, Z+12	; 0x0c
    2878:	b5 85       	ldd	r27, Z+13	; 0x0d
    287a:	43 89       	ldd	r20, Z+19	; 0x13
    287c:	54 89       	ldd	r21, Z+20	; 0x14
    287e:	65 89       	ldd	r22, Z+21	; 0x15
    2880:	76 89       	ldd	r23, Z+22	; 0x16
    2882:	84 17       	cp	r24, r20
    2884:	95 07       	cpc	r25, r21
    2886:	a6 07       	cpc	r26, r22
    2888:	b7 07       	cpc	r27, r23
    288a:	08 f0       	brcs	.+2      	; 0x288e <_ZN6SdFile4openEPS_PKch+0x80>
    288c:	3e c0       	rjmp	.+124    	; 0x290a <_ZN6SdFile4openEPS_PKch+0xfc>
    288e:	25 e0       	ldi	r18, 0x05	; 5
    2890:	b6 95       	lsr	r27
    2892:	a7 95       	ror	r26
    2894:	97 95       	ror	r25
    2896:	87 95       	ror	r24
    2898:	2a 95       	dec	r18
    289a:	d1 f7       	brne	.-12     	; 0x2890 <_ZN6SdFile4openEPS_PKch+0x82>
    289c:	f8 2f       	mov	r31, r24
    289e:	ff 70       	andi	r31, 0x0F	; 15
    28a0:	bf 2e       	mov	r11, r31
    28a2:	c8 01       	movw	r24, r16
    28a4:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <_ZN6SdFile12readDirCacheEv>
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	09 f4       	brne	.+2      	; 0x28ae <_ZN6SdFile4openEPS_PKch+0xa0>
    28ac:	85 c0       	rjmp	.+266    	; 0x29b8 <_ZN6SdFile4openEPS_PKch+0x1aa>
    28ae:	fc 01       	movw	r30, r24
    28b0:	20 81       	ld	r18, Z
    28b2:	22 23       	and	r18, r18
    28b4:	a1 f0       	breq	.+40     	; 0x28de <_ZN6SdFile4openEPS_PKch+0xd0>
    28b6:	25 3e       	cpi	r18, 0xE5	; 229
    28b8:	09 f4       	brne	.+2      	; 0x28bc <_ZN6SdFile4openEPS_PKch+0xae>
    28ba:	80 c0       	rjmp	.+256    	; 0x29bc <_ZN6SdFile4openEPS_PKch+0x1ae>
    28bc:	4b e0       	ldi	r20, 0x0B	; 11
    28be:	50 e0       	ldi	r21, 0x00	; 0
    28c0:	bc 01       	movw	r22, r24
    28c2:	ce 01       	movw	r24, r28
    28c4:	01 96       	adiw	r24, 0x01	; 1
    28c6:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <memcmp>
    28ca:	89 2b       	or	r24, r25
    28cc:	89 f6       	brne	.-94     	; 0x2870 <_ZN6SdFile4openEPS_PKch+0x62>
    28ce:	8c 2d       	mov	r24, r12
    28d0:	80 73       	andi	r24, 0x30	; 48
    28d2:	80 33       	cpi	r24, 0x30	; 48
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <_ZN6SdFile4openEPS_PKch+0xca>
    28d6:	70 c0       	rjmp	.+224    	; 0x29b8 <_ZN6SdFile4openEPS_PKch+0x1aa>
    28d8:	4c 2d       	mov	r20, r12
    28da:	6b 2d       	mov	r22, r11
    28dc:	69 c0       	rjmp	.+210    	; 0x29b0 <_ZN6SdFile4openEPS_PKch+0x1a2>
    28de:	d1 10       	cpse	r13, r1
    28e0:	12 c0       	rjmp	.+36     	; 0x2906 <_ZN6SdFile4openEPS_PKch+0xf8>
    28e2:	f7 01       	movw	r30, r14
    28e4:	b2 8a       	std	Z+18, r11	; 0x12
    28e6:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    28ea:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    28ee:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    28f2:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    28f6:	46 87       	std	Z+14, r20	; 0x0e
    28f8:	57 87       	std	Z+15, r21	; 0x0f
    28fa:	60 8b       	std	Z+16, r22	; 0x10
    28fc:	71 8b       	std	Z+17, r23	; 0x11
    28fe:	fc 01       	movw	r30, r24
    2900:	80 81       	ld	r24, Z
    2902:	81 11       	cpse	r24, r1
    2904:	5e c0       	rjmp	.+188    	; 0x29c2 <_ZN6SdFile4openEPS_PKch+0x1b4>
    2906:	dd 24       	eor	r13, r13
    2908:	d3 94       	inc	r13
    290a:	8c 2d       	mov	r24, r12
    290c:	82 71       	andi	r24, 0x12	; 18
    290e:	82 31       	cpi	r24, 0x12	; 18
    2910:	09 f0       	breq	.+2      	; 0x2914 <_ZN6SdFile4openEPS_PKch+0x106>
    2912:	52 c0       	rjmp	.+164    	; 0x29b8 <_ZN6SdFile4openEPS_PKch+0x1aa>
    2914:	dd 20       	and	r13, r13
    2916:	41 f0       	breq	.+16     	; 0x2928 <_ZN6SdFile4openEPS_PKch+0x11a>
    2918:	61 e0       	ldi	r22, 0x01	; 1
    291a:	c7 01       	movw	r24, r14
    291c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN6SdFile13cacheDirEntryEh>
    2920:	8c 01       	movw	r16, r24
    2922:	89 2b       	or	r24, r25
    2924:	79 f4       	brne	.+30     	; 0x2944 <_ZN6SdFile4openEPS_PKch+0x136>
    2926:	48 c0       	rjmp	.+144    	; 0x29b8 <_ZN6SdFile4openEPS_PKch+0x1aa>
    2928:	f8 01       	movw	r30, r16
    292a:	85 81       	ldd	r24, Z+5	; 0x05
    292c:	82 30       	cpi	r24, 0x02	; 2
    292e:	09 f4       	brne	.+2      	; 0x2932 <_ZN6SdFile4openEPS_PKch+0x124>
    2930:	43 c0       	rjmp	.+134    	; 0x29b8 <_ZN6SdFile4openEPS_PKch+0x1aa>
    2932:	c8 01       	movw	r24, r16
    2934:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN6SdFile13addDirClusterEv>
    2938:	88 23       	and	r24, r24
    293a:	f1 f1       	breq	.+124    	; 0x29b8 <_ZN6SdFile4openEPS_PKch+0x1aa>
    293c:	f7 01       	movw	r30, r14
    293e:	12 8a       	std	Z+18, r1	; 0x12
    2940:	00 e9       	ldi	r16, 0x90	; 144
    2942:	12 e0       	ldi	r17, 0x02	; 2
    2944:	80 e2       	ldi	r24, 0x20	; 32
    2946:	f8 01       	movw	r30, r16
    2948:	11 92       	st	Z+, r1
    294a:	8a 95       	dec	r24
    294c:	e9 f7       	brne	.-6      	; 0x2948 <_ZN6SdFile4openEPS_PKch+0x13a>
    294e:	8b e0       	ldi	r24, 0x0B	; 11
    2950:	fe 01       	movw	r30, r28
    2952:	31 96       	adiw	r30, 0x01	; 1
    2954:	d8 01       	movw	r26, r16
    2956:	01 90       	ld	r0, Z+
    2958:	0d 92       	st	X+, r0
    295a:	8a 95       	dec	r24
    295c:	e1 f7       	brne	.-8      	; 0x2956 <_ZN6SdFile4openEPS_PKch+0x148>
    295e:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <_ZN6SdFile9dateTime_E>
    2962:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <_ZN6SdFile9dateTime_E+0x1>
    2966:	30 97       	sbiw	r30, 0x00	; 0
    2968:	39 f0       	breq	.+14     	; 0x2978 <_ZN6SdFile4openEPS_PKch+0x16a>
    296a:	b8 01       	movw	r22, r16
    296c:	62 5f       	subi	r22, 0xF2	; 242
    296e:	7f 4f       	sbci	r23, 0xFF	; 255
    2970:	c8 01       	movw	r24, r16
    2972:	40 96       	adiw	r24, 0x10	; 16
    2974:	09 95       	icall
    2976:	09 c0       	rjmp	.+18     	; 0x298a <_ZN6SdFile4openEPS_PKch+0x17c>
    2978:	81 e2       	ldi	r24, 0x21	; 33
    297a:	98 e2       	ldi	r25, 0x28	; 40
    297c:	f8 01       	movw	r30, r16
    297e:	91 8b       	std	Z+17, r25	; 0x11
    2980:	80 8b       	std	Z+16, r24	; 0x10
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	98 e0       	ldi	r25, 0x08	; 8
    2986:	97 87       	std	Z+15, r25	; 0x0f
    2988:	86 87       	std	Z+14, r24	; 0x0e
    298a:	f8 01       	movw	r30, r16
    298c:	80 89       	ldd	r24, Z+16	; 0x10
    298e:	91 89       	ldd	r25, Z+17	; 0x11
    2990:	93 8b       	std	Z+19, r25	; 0x13
    2992:	82 8b       	std	Z+18, r24	; 0x12
    2994:	91 8f       	std	Z+25, r25	; 0x19
    2996:	80 8f       	std	Z+24, r24	; 0x18
    2998:	86 85       	ldd	r24, Z+14	; 0x0e
    299a:	97 85       	ldd	r25, Z+15	; 0x0f
    299c:	97 8b       	std	Z+23, r25	; 0x17
    299e:	86 8b       	std	Z+22, r24	; 0x16
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <_ZN8SdVolume10cacheFlushEh>
    29a6:	88 23       	and	r24, r24
    29a8:	39 f0       	breq	.+14     	; 0x29b8 <_ZN6SdFile4openEPS_PKch+0x1aa>
    29aa:	4c 2d       	mov	r20, r12
    29ac:	f7 01       	movw	r30, r14
    29ae:	62 89       	ldd	r22, Z+18	; 0x12
    29b0:	c7 01       	movw	r24, r14
    29b2:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN6SdFile15openCachedEntryEhh>
    29b6:	08 c0       	rjmp	.+16     	; 0x29c8 <_ZN6SdFile4openEPS_PKch+0x1ba>
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	06 c0       	rjmp	.+12     	; 0x29c8 <_ZN6SdFile4openEPS_PKch+0x1ba>
    29bc:	dd 20       	and	r13, r13
    29be:	09 f4       	brne	.+2      	; 0x29c2 <_ZN6SdFile4openEPS_PKch+0x1b4>
    29c0:	90 cf       	rjmp	.-224    	; 0x28e2 <_ZN6SdFile4openEPS_PKch+0xd4>
    29c2:	dd 24       	eor	r13, r13
    29c4:	d3 94       	inc	r13
    29c6:	54 cf       	rjmp	.-344    	; 0x2870 <_ZN6SdFile4openEPS_PKch+0x62>
    29c8:	2b 96       	adiw	r28, 0x0b	; 11
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
    29dc:	ff 90       	pop	r15
    29de:	ef 90       	pop	r14
    29e0:	df 90       	pop	r13
    29e2:	cf 90       	pop	r12
    29e4:	bf 90       	pop	r11
    29e6:	08 95       	ret

000029e8 <_ZN6SdFile5writeEPKvj>:
   \a nbyte.  If an error occurs, write() returns 0.  Possible errors
   include write() is called before a file has been opened, write is called
   for a read-only file, device is full, a corrupt file system or an I/O error.

*/
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    29e8:	2f 92       	push	r2
    29ea:	3f 92       	push	r3
    29ec:	4f 92       	push	r4
    29ee:	5f 92       	push	r5
    29f0:	6f 92       	push	r6
    29f2:	7f 92       	push	r7
    29f4:	8f 92       	push	r8
    29f6:	9f 92       	push	r9
    29f8:	af 92       	push	r10
    29fa:	bf 92       	push	r11
    29fc:	cf 92       	push	r12
    29fe:	df 92       	push	r13
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	1f 93       	push	r17
    2a08:	cf 93       	push	r28
    2a0a:	df 93       	push	r29
    2a0c:	00 d0       	rcall	.+0      	; 0x2a0e <_ZN6SdFile5writeEPKvj+0x26>
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <_ZN6SdFile5writeEPKvj+0x28>
    2a10:	1f 92       	push	r1
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	7c 01       	movw	r14, r24
    2a18:	6b 01       	movw	r12, r22
    2a1a:	1a 01       	movw	r2, r20
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	15 96       	adiw	r26, 0x05	; 5
    2a20:	8c 91       	ld	r24, X
    2a22:	15 97       	sbiw	r26, 0x05	; 5
    2a24:	81 30       	cpi	r24, 0x01	; 1
    2a26:	c9 f4       	brne	.+50     	; 0x2a5a <_ZN6SdFile5writeEPKvj+0x72>
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;
    2a28:	14 96       	adiw	r26, 0x04	; 4
    2a2a:	1c 91       	ld	r17, X

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    2a2c:	11 ff       	sbrs	r17, 1
    2a2e:	15 c0       	rjmp	.+42     	; 0x2a5a <_ZN6SdFile5writeEPKvj+0x72>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2a30:	12 ff       	sbrs	r17, 2
    2a32:	1d c0       	rjmp	.+58     	; 0x2a6e <_ZN6SdFile5writeEPKvj+0x86>
    2a34:	f7 01       	movw	r30, r14
    2a36:	43 89       	ldd	r20, Z+19	; 0x13
    2a38:	54 89       	ldd	r21, Z+20	; 0x14
    2a3a:	65 89       	ldd	r22, Z+21	; 0x15
    2a3c:	76 89       	ldd	r23, Z+22	; 0x16
    2a3e:	82 85       	ldd	r24, Z+10	; 0x0a
    2a40:	93 85       	ldd	r25, Z+11	; 0x0b
    2a42:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a44:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a46:	84 17       	cp	r24, r20
    2a48:	95 07       	cpc	r25, r21
    2a4a:	a6 07       	cpc	r26, r22
    2a4c:	b7 07       	cpc	r27, r23
    2a4e:	79 f0       	breq	.+30     	; 0x2a6e <_ZN6SdFile5writeEPKvj+0x86>
    /**
        Set the files current position to end of file.  Useful to position
        a file for append. See seekSet().
    */
    uint8_t seekEnd(void) {
      return seekSet(fileSize_);
    2a50:	c7 01       	movw	r24, r14
    2a52:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) {
    2a56:	81 11       	cpse	r24, r1
    2a58:	0a c0       	rjmp	.+20     	; 0x2a6e <_ZN6SdFile5writeEPKvj+0x86>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	d7 01       	movw	r26, r14
    2a60:	13 96       	adiw	r26, 0x03	; 3
    2a62:	9c 93       	st	X, r25
    2a64:	8e 93       	st	-X, r24
    2a66:	12 97       	sbiw	r26, 0x02	; 2

writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	4c c1       	rjmp	.+664    	; 0x2d06 <_ZN6SdFile5writeEPKvj+0x31e>
   \a nbyte.  If an error occurs, write() returns 0.  Possible errors
   include write() is called before a file has been opened, write is called
   for a read-only file, device is full, a corrupt file system or an I/O error.

*/
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2a6e:	41 01       	movw	r8, r2
    uint8_t readData(uint32_t block, uint16_t offset,
                     uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    }
    uint8_t writeBlock(uint32_t block, const uint8_t* dst, uint8_t blocking = 1) {
      return sdCard_->writeBlock(block, dst, blocking);
    2a70:	12 95       	swap	r17
    2a72:	1f 70       	andi	r17, 0x0F	; 15
    2a74:	10 95       	com	r17
    2a76:	11 70       	andi	r17, 0x01	; 1
    2a78:	1d 83       	std	Y+5, r17	; 0x05
    2a7a:	80 c0       	rjmp	.+256    	; 0x2b7c <_ZN6SdFile5writeEPKvj+0x194>
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    2a7c:	5b 96       	adiw	r26, 0x1b	; 27
    2a7e:	8d 91       	ld	r24, X+
    2a80:	9c 91       	ld	r25, X
    2a82:	5c 97       	sbiw	r26, 0x1c	; 28
    uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
    uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
    //----------------------------------------------------------------------------
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    2a84:	fc 01       	movw	r30, r24
    2a86:	74 80       	ldd	r7, Z+4	; 0x04
    2a88:	7a 94       	dec	r7
    2a8a:	b9 01       	movw	r22, r18
    2a8c:	a8 01       	movw	r20, r16
    2a8e:	29 e0       	ldi	r18, 0x09	; 9
    2a90:	76 95       	lsr	r23
    2a92:	67 95       	ror	r22
    2a94:	57 95       	ror	r21
    2a96:	47 95       	ror	r20
    2a98:	2a 95       	dec	r18
    2a9a:	d1 f7       	brne	.-12     	; 0x2a90 <_ZN6SdFile5writeEPKvj+0xa8>
    2a9c:	74 22       	and	r7, r20
    uint16_t blockOffset = curPosition_ & 0X1FF;
    2a9e:	11 70       	andi	r17, 0x01	; 1
    if (blockOfCluster == 0 && blockOffset == 0) {
    2aa0:	77 20       	and	r7, r7
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <_ZN6SdFile5writeEPKvj+0xbe>
    2aa4:	77 c0       	rjmp	.+238    	; 0x2b94 <_ZN6SdFile5writeEPKvj+0x1ac>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	92 e0       	ldi	r25, 0x02	; 2
    2aaa:	80 1b       	sub	r24, r16
    2aac:	91 0b       	sbc	r25, r17
    2aae:	54 01       	movw	r10, r8
    2ab0:	88 15       	cp	r24, r8
    2ab2:	99 05       	cpc	r25, r9
    2ab4:	08 f4       	brcc	.+2      	; 0x2ab8 <_ZN6SdFile5writeEPKvj+0xd0>
    2ab6:	5c 01       	movw	r10, r24
    if (n > nToWrite) {
      n = nToWrite;
    }

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2ab8:	d7 01       	movw	r26, r14
    2aba:	5b 96       	adiw	r26, 0x1b	; 27
    2abc:	2d 91       	ld	r18, X+
    2abe:	3c 91       	ld	r19, X
    2ac0:	5c 97       	sbiw	r26, 0x1c	; 28
    2ac2:	16 96       	adiw	r26, 0x06	; 6
    2ac4:	8d 91       	ld	r24, X+
    2ac6:	9d 91       	ld	r25, X+
    2ac8:	0d 90       	ld	r0, X+
    2aca:	bc 91       	ld	r27, X
    2acc:	a0 2d       	mov	r26, r0
    2ace:	02 97       	sbiw	r24, 0x02	; 2
    2ad0:	a1 09       	sbc	r26, r1
    2ad2:	b1 09       	sbc	r27, r1
    2ad4:	f9 01       	movw	r30, r18
    2ad6:	05 84       	ldd	r0, Z+13	; 0x0d
    2ad8:	04 c0       	rjmp	.+8      	; 0x2ae2 <_ZN6SdFile5writeEPKvj+0xfa>
    2ada:	88 0f       	add	r24, r24
    2adc:	99 1f       	adc	r25, r25
    2ade:	aa 1f       	adc	r26, r26
    2ae0:	bb 1f       	adc	r27, r27
    2ae2:	0a 94       	dec	r0
    2ae4:	d2 f7       	brpl	.-12     	; 0x2ada <_ZN6SdFile5writeEPKvj+0xf2>
    2ae6:	46 85       	ldd	r20, Z+14	; 0x0e
    2ae8:	57 85       	ldd	r21, Z+15	; 0x0f
    2aea:	60 89       	ldd	r22, Z+16	; 0x10
    2aec:	71 89       	ldd	r23, Z+17	; 0x11
    2aee:	84 0f       	add	r24, r20
    2af0:	95 1f       	adc	r25, r21
    2af2:	a6 1f       	adc	r26, r22
    2af4:	b7 1f       	adc	r27, r23
    2af6:	9c 01       	movw	r18, r24
    2af8:	ad 01       	movw	r20, r26
    2afa:	27 0d       	add	r18, r7
    2afc:	31 1d       	adc	r19, r1
    2afe:	41 1d       	adc	r20, r1
    2b00:	51 1d       	adc	r21, r1
    2b02:	29 01       	movw	r4, r18
    2b04:	3a 01       	movw	r6, r20
    if (n == 512) {
    2b06:	a1 14       	cp	r10, r1
    2b08:	32 e0       	ldi	r19, 0x02	; 2
    2b0a:	b3 06       	cpc	r11, r19
    2b0c:	09 f0       	breq	.+2      	; 0x2b10 <_ZN6SdFile5writeEPKvj+0x128>
    2b0e:	89 c0       	rjmp	.+274    	; 0x2c22 <_ZN6SdFile5writeEPKvj+0x23a>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2b10:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    2b14:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2b18:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2b1c:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2b20:	48 16       	cp	r4, r24
    2b22:	59 06       	cpc	r5, r25
    2b24:	6a 06       	cpc	r6, r26
    2b26:	7b 06       	cpc	r7, r27
    2b28:	59 f4       	brne	.+22     	; 0x2b40 <_ZN6SdFile5writeEPKvj+0x158>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    2b2a:	8f ef       	ldi	r24, 0xFF	; 255
    2b2c:	9f ef       	ldi	r25, 0xFF	; 255
    2b2e:	dc 01       	movw	r26, r24
    2b30:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    2b34:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2b38:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2b3c:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    uint8_t readData(uint32_t block, uint16_t offset,
                     uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    }
    uint8_t writeBlock(uint32_t block, const uint8_t* dst, uint8_t blocking = 1) {
      return sdCard_->writeBlock(block, dst, blocking);
    2b40:	0d 81       	ldd	r16, Y+5	; 0x05
    2b42:	96 01       	movw	r18, r12
    2b44:	b3 01       	movw	r22, r6
    2b46:	a2 01       	movw	r20, r4
    2b48:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_ZN8SdVolume7sdCard_E>
    2b4c:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <_ZN8SdVolume7sdCard_E+0x1>
    2b50:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <_ZN7Sd2Card10writeBlockEmPKhh>
      }
      if (!vol_->writeBlock(block, src, blocking)) {
    2b54:	88 23       	and	r24, r24
    2b56:	09 f4       	brne	.+2      	; 0x2b5a <_ZN6SdFile5writeEPKvj+0x172>
    2b58:	80 cf       	rjmp	.-256    	; 0x2a5a <_ZN6SdFile5writeEPKvj+0x72>
        goto writeErrorReturn;
      }
      src += 512;
    2b5a:	9e ef       	ldi	r25, 0xFE	; 254
    2b5c:	d9 1a       	sub	r13, r25
      uint8_t* end = dst + n;
      while (dst != end) {
        *dst++ = *src++;
      }
    }
    nToWrite -= n;
    2b5e:	8a 18       	sub	r8, r10
    2b60:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    2b62:	f7 01       	movw	r30, r14
    2b64:	82 85       	ldd	r24, Z+10	; 0x0a
    2b66:	93 85       	ldd	r25, Z+11	; 0x0b
    2b68:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b6a:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b6c:	8a 0d       	add	r24, r10
    2b6e:	9b 1d       	adc	r25, r11
    2b70:	a1 1d       	adc	r26, r1
    2b72:	b1 1d       	adc	r27, r1
    2b74:	82 87       	std	Z+10, r24	; 0x0a
    2b76:	93 87       	std	Z+11, r25	; 0x0b
    2b78:	a4 87       	std	Z+12, r26	; 0x0c
    2b7a:	b5 87       	std	Z+13, r27	; 0x0d
    2b7c:	d7 01       	movw	r26, r14
    2b7e:	1a 96       	adiw	r26, 0x0a	; 10
    2b80:	0d 91       	ld	r16, X+
    2b82:	1d 91       	ld	r17, X+
    2b84:	2d 91       	ld	r18, X+
    2b86:	3c 91       	ld	r19, X
    2b88:	1d 97       	sbiw	r26, 0x0d	; 13
    if (!seekEnd()) {
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    2b8a:	81 14       	cp	r8, r1
    2b8c:	91 04       	cpc	r9, r1
    2b8e:	09 f0       	breq	.+2      	; 0x2b92 <_ZN6SdFile5writeEPKvj+0x1aa>
    2b90:	75 cf       	rjmp	.-278    	; 0x2a7c <_ZN6SdFile5writeEPKvj+0x94>
    2b92:	88 c0       	rjmp	.+272    	; 0x2ca4 <_ZN6SdFile5writeEPKvj+0x2bc>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    2b94:	01 15       	cp	r16, r1
    2b96:	11 05       	cpc	r17, r1
    2b98:	09 f0       	breq	.+2      	; 0x2b9c <_ZN6SdFile5writeEPKvj+0x1b4>
    2b9a:	85 cf       	rjmp	.-246    	; 0x2aa6 <_ZN6SdFile5writeEPKvj+0xbe>
      // start of new cluster
      if (curCluster_ == 0) {
    2b9c:	16 96       	adiw	r26, 0x06	; 6
    2b9e:	4d 91       	ld	r20, X+
    2ba0:	5d 91       	ld	r21, X+
    2ba2:	6d 91       	ld	r22, X+
    2ba4:	7c 91       	ld	r23, X
    2ba6:	19 97       	sbiw	r26, 0x09	; 9
    2ba8:	41 15       	cp	r20, r1
    2baa:	51 05       	cpc	r21, r1
    2bac:	61 05       	cpc	r22, r1
    2bae:	71 05       	cpc	r23, r1
    2bb0:	59 f4       	brne	.+22     	; 0x2bc8 <_ZN6SdFile5writeEPKvj+0x1e0>
        if (firstCluster_ == 0) {
    2bb2:	57 96       	adiw	r26, 0x17	; 23
    2bb4:	8d 91       	ld	r24, X+
    2bb6:	9d 91       	ld	r25, X+
    2bb8:	0d 90       	ld	r0, X+
    2bba:	bc 91       	ld	r27, X
    2bbc:	a0 2d       	mov	r26, r0
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	a1 05       	cpc	r26, r1
    2bc2:	b1 05       	cpc	r27, r1
    2bc4:	41 f5       	brne	.+80     	; 0x2c16 <_ZN6SdFile5writeEPKvj+0x22e>
    2bc6:	21 c0       	rjmp	.+66     	; 0x2c0a <_ZN6SdFile5writeEPKvj+0x222>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) {
    2bc8:	9e 01       	movw	r18, r28
    2bca:	2f 5f       	subi	r18, 0xFF	; 255
    2bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bce:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZNK8SdVolume6fatGetEmPm>
    2bd2:	88 23       	and	r24, r24
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <_ZN6SdFile5writeEPKvj+0x1f0>
    2bd6:	49 cf       	rjmp	.-366    	; 0x2a6a <_ZN6SdFile5writeEPKvj+0x82>
          return false;
        }
        if (vol_->isEOC(next)) {
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	9a 81       	ldd	r25, Y+2	; 0x02
    2bdc:	ab 81       	ldd	r26, Y+3	; 0x03
    2bde:	bc 81       	ldd	r27, Y+4	; 0x04
    2be0:	f7 01       	movw	r30, r14
    2be2:	23 8d       	ldd	r18, Z+27	; 0x1b
    2be4:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2be6:	f9 01       	movw	r30, r18
    2be8:	27 89       	ldd	r18, Z+23	; 0x17
    2bea:	20 31       	cpi	r18, 0x10	; 16
    2bec:	29 f0       	breq	.+10     	; 0x2bf8 <_ZN6SdFile5writeEPKvj+0x210>
    2bee:	48 ef       	ldi	r20, 0xF8	; 248
    2bf0:	5f ef       	ldi	r21, 0xFF	; 255
    2bf2:	6f ef       	ldi	r22, 0xFF	; 255
    2bf4:	7f e0       	ldi	r23, 0x0F	; 15
    2bf6:	04 c0       	rjmp	.+8      	; 0x2c00 <_ZN6SdFile5writeEPKvj+0x218>
    2bf8:	48 ef       	ldi	r20, 0xF8	; 248
    2bfa:	5f ef       	ldi	r21, 0xFF	; 255
    2bfc:	60 e0       	ldi	r22, 0x00	; 0
    2bfe:	70 e0       	ldi	r23, 0x00	; 0
    2c00:	84 17       	cp	r24, r20
    2c02:	95 07       	cpc	r25, r21
    2c04:	a6 07       	cpc	r26, r22
    2c06:	b7 07       	cpc	r27, r23
    2c08:	30 f0       	brcs	.+12     	; 0x2c16 <_ZN6SdFile5writeEPKvj+0x22e>
          // add cluster if at end of chain
          if (!addCluster()) {
    2c0a:	c7 01       	movw	r24, r14
    2c0c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN6SdFile10addClusterEv>
    2c10:	81 11       	cpse	r24, r1
    2c12:	49 cf       	rjmp	.-366    	; 0x2aa6 <_ZN6SdFile5writeEPKvj+0xbe>
    2c14:	22 cf       	rjmp	.-444    	; 0x2a5a <_ZN6SdFile5writeEPKvj+0x72>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = next;
    2c16:	f7 01       	movw	r30, r14
    2c18:	86 83       	std	Z+6, r24	; 0x06
    2c1a:	97 83       	std	Z+7, r25	; 0x07
    2c1c:	a0 87       	std	Z+8, r26	; 0x08
    2c1e:	b1 87       	std	Z+9, r27	; 0x09
    2c20:	42 cf       	rjmp	.-380    	; 0x2aa6 <_ZN6SdFile5writeEPKvj+0xbe>
      if (!vol_->writeBlock(block, src, blocking)) {
        goto writeErrorReturn;
      }
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2c22:	01 15       	cp	r16, r1
    2c24:	11 05       	cpc	r17, r1
    2c26:	31 f5       	brne	.+76     	; 0x2c74 <_ZN6SdFile5writeEPKvj+0x28c>
    2c28:	d7 01       	movw	r26, r14
    2c2a:	1a 96       	adiw	r26, 0x0a	; 10
    2c2c:	4d 91       	ld	r20, X+
    2c2e:	5d 91       	ld	r21, X+
    2c30:	6d 91       	ld	r22, X+
    2c32:	7c 91       	ld	r23, X
    2c34:	1d 97       	sbiw	r26, 0x0d	; 13
    2c36:	53 96       	adiw	r26, 0x13	; 19
    2c38:	8d 91       	ld	r24, X+
    2c3a:	9d 91       	ld	r25, X+
    2c3c:	0d 90       	ld	r0, X+
    2c3e:	bc 91       	ld	r27, X
    2c40:	a0 2d       	mov	r26, r0
    2c42:	48 17       	cp	r20, r24
    2c44:	59 07       	cpc	r21, r25
    2c46:	6a 07       	cpc	r22, r26
    2c48:	7b 07       	cpc	r23, r27
    2c4a:	a0 f0       	brcs	.+40     	; 0x2c74 <_ZN6SdFile5writeEPKvj+0x28c>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) {
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <_ZN8SdVolume10cacheFlushEh>
    2c52:	88 23       	and	r24, r24
    2c54:	09 f4       	brne	.+2      	; 0x2c58 <_ZN6SdFile5writeEPKvj+0x270>
    2c56:	01 cf       	rjmp	.-510    	; 0x2a5a <_ZN6SdFile5writeEPKvj+0x72>
          goto writeErrorReturn;
        }
        SdVolume::cacheBlockNumber_ = block;
    2c58:	40 92 09 01 	sts	0x0109, r4	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    2c5c:	50 92 0a 01 	sts	0x010A, r5	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2c60:	60 92 0b 01 	sts	0x010B, r6	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2c64:	70 92 0c 01 	sts	0x010C, r7	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    2c68:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZN8SdVolume11cacheDirty_E>
    2c6c:	81 60       	ori	r24, 0x01	; 1
    2c6e:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <_ZN8SdVolume11cacheDirty_E>
    2c72:	08 c0       	rjmp	.+16     	; 0x2c84 <_ZN6SdFile5writeEPKvj+0x29c>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2c74:	41 e0       	ldi	r20, 0x01	; 1
    2c76:	c3 01       	movw	r24, r6
    2c78:	b2 01       	movw	r22, r4
    2c7a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN8SdVolume13cacheRawBlockEmh>
    2c7e:	88 23       	and	r24, r24
    2c80:	09 f4       	brne	.+2      	; 0x2c84 <_ZN6SdFile5writeEPKvj+0x29c>
    2c82:	eb ce       	rjmp	.-554    	; 0x2a5a <_ZN6SdFile5writeEPKvj+0x72>
    2c84:	d6 01       	movw	r26, r12
    2c86:	f8 01       	movw	r30, r16
    2c88:	e0 57       	subi	r30, 0x70	; 112
    2c8a:	fd 4f       	sbci	r31, 0xFD	; 253
    2c8c:	9f 01       	movw	r18, r30
    2c8e:	2a 0d       	add	r18, r10
    2c90:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) {
    2c92:	2e 17       	cp	r18, r30
    2c94:	3f 07       	cpc	r19, r31
    2c96:	19 f0       	breq	.+6      	; 0x2c9e <_ZN6SdFile5writeEPKvj+0x2b6>
        *dst++ = *src++;
    2c98:	8d 91       	ld	r24, X+
    2c9a:	81 93       	st	Z+, r24
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) {
    2c9c:	fa cf       	rjmp	.-12     	; 0x2c92 <_ZN6SdFile5writeEPKvj+0x2aa>
    2c9e:	ca 0c       	add	r12, r10
    2ca0:	db 1c       	adc	r13, r11
    2ca2:	5d cf       	rjmp	.-326    	; 0x2b5e <_ZN6SdFile5writeEPKvj+0x176>
      }
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2ca4:	d7 01       	movw	r26, r14
    2ca6:	53 96       	adiw	r26, 0x13	; 19
    2ca8:	4d 91       	ld	r20, X+
    2caa:	5d 91       	ld	r21, X+
    2cac:	6d 91       	ld	r22, X+
    2cae:	7c 91       	ld	r23, X
    2cb0:	56 97       	sbiw	r26, 0x16	; 22
    2cb2:	14 96       	adiw	r26, 0x04	; 4
    2cb4:	8c 91       	ld	r24, X
    2cb6:	40 17       	cp	r20, r16
    2cb8:	51 07       	cpc	r21, r17
    2cba:	62 07       	cpc	r22, r18
    2cbc:	73 07       	cpc	r23, r19
    2cbe:	40 f4       	brcc	.+16     	; 0x2cd0 <_ZN6SdFile5writeEPKvj+0x2e8>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2cc0:	f7 01       	movw	r30, r14
    2cc2:	03 8b       	std	Z+19, r16	; 0x13
    2cc4:	14 8b       	std	Z+20, r17	; 0x14
    2cc6:	25 8b       	std	Z+21, r18	; 0x15
    2cc8:	36 8b       	std	Z+22, r19	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    2cca:	80 68       	ori	r24, 0x80	; 128
    2ccc:	84 83       	std	Z+4, r24	; 0x04
    2cce:	0d c0       	rjmp	.+26     	; 0x2cea <_ZN6SdFile5writeEPKvj+0x302>
  } else if (dateTime_ && nbyte) {
    2cd0:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <_ZN6SdFile9dateTime_E>
    2cd4:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <_ZN6SdFile9dateTime_E+0x1>
    2cd8:	23 2b       	or	r18, r19
    2cda:	39 f0       	breq	.+14     	; 0x2cea <_ZN6SdFile5writeEPKvj+0x302>
    2cdc:	21 14       	cp	r2, r1
    2cde:	31 04       	cpc	r3, r1
    2ce0:	21 f0       	breq	.+8      	; 0x2cea <_ZN6SdFile5writeEPKvj+0x302>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2ce2:	80 68       	ori	r24, 0x80	; 128
    2ce4:	d7 01       	movw	r26, r14
    2ce6:	14 96       	adiw	r26, 0x04	; 4
    2ce8:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    2cea:	f7 01       	movw	r30, r14
    2cec:	84 81       	ldd	r24, Z+4	; 0x04
    2cee:	83 fd       	sbrc	r24, 3
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <_ZN6SdFile5writeEPKvj+0x30e>
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) {
          return false;
    2cf2:	c1 01       	movw	r24, r2
    2cf4:	08 c0       	rjmp	.+16     	; 0x2d06 <_ZN6SdFile5writeEPKvj+0x31e>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) {
    2cf6:	61 e0       	ldi	r22, 0x01	; 1
    2cf8:	c7 01       	movw	r24, r14
    2cfa:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN6SdFile4syncEh>
    2cfe:	88 23       	and	r24, r24
    2d00:	09 f4       	brne	.+2      	; 0x2d04 <_ZN6SdFile5writeEPKvj+0x31c>
    2d02:	ab ce       	rjmp	.-682    	; 0x2a5a <_ZN6SdFile5writeEPKvj+0x72>
    2d04:	f6 cf       	rjmp	.-20     	; 0x2cf2 <_ZN6SdFile5writeEPKvj+0x30a>
writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	1f 91       	pop	r17
    2d16:	0f 91       	pop	r16
    2d18:	ff 90       	pop	r15
    2d1a:	ef 90       	pop	r14
    2d1c:	df 90       	pop	r13
    2d1e:	cf 90       	pop	r12
    2d20:	bf 90       	pop	r11
    2d22:	af 90       	pop	r10
    2d24:	9f 90       	pop	r9
    2d26:	8f 90       	pop	r8
    2d28:	7f 90       	pop	r7
    2d2a:	6f 90       	pop	r6
    2d2c:	5f 90       	pop	r5
    2d2e:	4f 90       	pop	r4
    2d30:	3f 90       	pop	r3
    2d32:	2f 90       	pop	r2
    2d34:	08 95       	ret

00002d36 <_ZN6SdFile5writeEh>:
/**
   Write a byte to a file. Required by the Arduino Print class.

   Use SdFile::writeError to check for errors.
*/
size_t SdFile::write(uint8_t b) {
    2d36:	cf 93       	push	r28
    2d38:	df 93       	push	r29
    2d3a:	1f 92       	push	r1
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    2d40:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    2d42:	41 e0       	ldi	r20, 0x01	; 1
    2d44:	50 e0       	ldi	r21, 0x00	; 0
    2d46:	be 01       	movw	r22, r28
    2d48:	6f 5f       	subi	r22, 0xFF	; 255
    2d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN6SdFile5writeEPKvj>
}
    2d50:	0f 90       	pop	r0
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    2d56:	08 95       	ret

00002d58 <_ZN8SdVolume21cacheMirrorBlockFlushEh>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheMirrorBlockFlush(uint8_t blocking) {
    2d58:	0f 93       	push	r16
  if (cacheMirrorBlock_) {
    2d5a:	40 91 89 02 	lds	r20, 0x0289	; 0x800289 <_ZN8SdVolume17cacheMirrorBlock_E>
    2d5e:	50 91 8a 02 	lds	r21, 0x028A	; 0x80028a <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2d62:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2d66:	70 91 8c 02 	lds	r23, 0x028C	; 0x80028c <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2d6a:	41 15       	cp	r20, r1
    2d6c:	51 05       	cpc	r21, r1
    2d6e:	61 05       	cpc	r22, r1
    2d70:	71 05       	cpc	r23, r1
    2d72:	99 f0       	breq	.+38     	; 0x2d9a <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x42>
    2d74:	08 2f       	mov	r16, r24
    if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data, blocking)) {
    2d76:	20 e9       	ldi	r18, 0x90	; 144
    2d78:	32 e0       	ldi	r19, 0x02	; 2
    2d7a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_ZN8SdVolume7sdCard_E>
    2d7e:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <_ZN8SdVolume7sdCard_E+0x1>
    2d82:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <_ZN7Sd2Card10writeBlockEmPKhh>
    2d86:	88 23       	and	r24, r24
    2d88:	49 f0       	breq	.+18     	; 0x2d9c <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x44>
      return false;
    }
    cacheMirrorBlock_ = 0;
    2d8a:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_ZN8SdVolume17cacheMirrorBlock_E>
    2d8e:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2d92:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2d96:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
}
    2d9c:	0f 91       	pop	r16
    2d9e:	08 95       	ret

00002da0 <_ZN8SdVolume10cacheFlushEh>:
  }

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(uint8_t blocking) {
    2da0:	0f 93       	push	r16
    2da2:	cf 93       	push	r28
  if (cacheDirty_) {
    2da4:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <_ZN8SdVolume11cacheDirty_E>
    2da8:	99 23       	and	r25, r25
    2daa:	f9 f0       	breq	.+62     	; 0x2dea <_ZN8SdVolume10cacheFlushEh+0x4a>
    2dac:	c8 2f       	mov	r28, r24
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data, blocking)) {
    2dae:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    2db2:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2db6:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2dba:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2dbe:	08 2f       	mov	r16, r24
    2dc0:	20 e9       	ldi	r18, 0x90	; 144
    2dc2:	32 e0       	ldi	r19, 0x02	; 2
    2dc4:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_ZN8SdVolume7sdCard_E>
    2dc8:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <_ZN8SdVolume7sdCard_E+0x1>
    2dcc:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <_ZN7Sd2Card10writeBlockEmPKhh>
    2dd0:	81 11       	cpse	r24, r1
    2dd2:	02 c0       	rjmp	.+4      	; 0x2dd8 <_ZN8SdVolume10cacheFlushEh+0x38>
      return false;
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	0a c0       	rjmp	.+20     	; 0x2dec <_ZN8SdVolume10cacheFlushEh+0x4c>
    }

    if (!blocking) {
    2dd8:	cc 23       	and	r28, r28
    2dda:	39 f0       	breq	.+14     	; 0x2dea <_ZN8SdVolume10cacheFlushEh+0x4a>
      return true;
    }

    // mirror FAT tables
    if (!cacheMirrorBlockFlush(blocking)) {
    2ddc:	8c 2f       	mov	r24, r28
    2dde:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    2de2:	88 23       	and	r24, r24
    2de4:	b9 f3       	breq	.-18     	; 0x2dd4 <_ZN8SdVolume10cacheFlushEh+0x34>
      return false;
    }
    cacheDirty_ = 0;
    2de6:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    2dea:	81 e0       	ldi	r24, 0x01	; 1
}
    2dec:	cf 91       	pop	r28
    2dee:	0f 91       	pop	r16
    2df0:	08 95       	ret

00002df2 <_ZN8SdVolume13cacheRawBlockEmh>:
    cacheMirrorBlock_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2df2:	cf 92       	push	r12
    2df4:	df 92       	push	r13
    2df6:	ef 92       	push	r14
    2df8:	ff 92       	push	r15
    2dfa:	cf 93       	push	r28
    2dfc:	6b 01       	movw	r12, r22
    2dfe:	7c 01       	movw	r14, r24
    2e00:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    2e02:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    2e06:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2e0a:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2e0e:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2e12:	8c 15       	cp	r24, r12
    2e14:	9d 05       	cpc	r25, r13
    2e16:	ae 05       	cpc	r26, r14
    2e18:	bf 05       	cpc	r27, r15
    2e1a:	d9 f0       	breq	.+54     	; 0x2e52 <_ZN8SdVolume13cacheRawBlockEmh+0x60>
    if (!cacheFlush()) {
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <_ZN8SdVolume10cacheFlushEh>
    2e22:	81 11       	cpse	r24, r1
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <_ZN8SdVolume13cacheRawBlockEmh+0x38>
      return false;
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	1a c0       	rjmp	.+52     	; 0x2e5e <_ZN8SdVolume13cacheRawBlockEmh+0x6c>
    }
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) {
    2e2a:	20 e9       	ldi	r18, 0x90	; 144
    2e2c:	32 e0       	ldi	r19, 0x02	; 2
    2e2e:	b7 01       	movw	r22, r14
    2e30:	a6 01       	movw	r20, r12
    2e32:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_ZN8SdVolume7sdCard_E>
    2e36:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <_ZN8SdVolume7sdCard_E+0x1>
    2e3a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7Sd2Card9readBlockEmPh>
    2e3e:	88 23       	and	r24, r24
    2e40:	91 f3       	breq	.-28     	; 0x2e26 <_ZN8SdVolume13cacheRawBlockEmh+0x34>
      return false;
    }
    cacheBlockNumber_ = blockNumber;
    2e42:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    2e46:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2e4a:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2e4e:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    2e52:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZN8SdVolume11cacheDirty_E>
    2e56:	c8 2b       	or	r28, r24
    2e58:	c0 93 8d 02 	sts	0x028D, r28	; 0x80028d <_ZN8SdVolume11cacheDirty_E>
  return true;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
}
    2e5e:	cf 91       	pop	r28
    2e60:	ff 90       	pop	r15
    2e62:	ef 90       	pop	r14
    2e64:	df 90       	pop	r13
    2e66:	cf 90       	pop	r12
    2e68:	08 95       	ret

00002e6a <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    2e6a:	cf 92       	push	r12
    2e6c:	df 92       	push	r13
    2e6e:	ef 92       	push	r14
    2e70:	ff 92       	push	r15
    2e72:	6b 01       	movw	r12, r22
    2e74:	7c 01       	movw	r14, r24
  if (!cacheFlush()) {
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <_ZN8SdVolume10cacheFlushEh>
    2e7c:	88 23       	and	r24, r24
    2e7e:	a9 f0       	breq	.+42     	; 0x2eaa <_ZN8SdVolume14cacheZeroBlockEm+0x40>
    2e80:	e0 e9       	ldi	r30, 0x90	; 144
    2e82:	f2 e0       	ldi	r31, 0x02	; 2
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    2e84:	11 92       	st	Z+, r1
  if (!cacheFlush()) {
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    2e86:	84 e0       	ldi	r24, 0x04	; 4
    2e88:	e0 39       	cpi	r30, 0x90	; 144
    2e8a:	f8 07       	cpc	r31, r24
    2e8c:	d9 f7       	brne	.-10     	; 0x2e84 <_ZN8SdVolume14cacheZeroBlockEm+0x1a>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    2e8e:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    2e92:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2e96:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2e9a:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2e9e:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZN8SdVolume11cacheDirty_E>
    2ea2:	81 60       	ori	r24, 0x01	; 1
    2ea4:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
}
    2eaa:	ff 90       	pop	r15
    2eac:	ef 90       	pop	r14
    2eae:	df 90       	pop	r13
    2eb0:	cf 90       	pop	r12
    2eb2:	08 95       	ret

00002eb4 <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2eb4:	8f 92       	push	r8
    2eb6:	9f 92       	push	r9
    2eb8:	af 92       	push	r10
    2eba:	bf 92       	push	r11
    2ebc:	cf 92       	push	r12
    2ebe:	df 92       	push	r13
    2ec0:	ef 92       	push	r14
    2ec2:	ff 92       	push	r15
    2ec4:	0f 93       	push	r16
    2ec6:	1f 93       	push	r17
    2ec8:	cf 93       	push	r28
    2eca:	df 93       	push	r29
    2ecc:	fc 01       	movw	r30, r24
  if (cluster > (clusterCount_ + 1)) {
    2ece:	81 85       	ldd	r24, Z+9	; 0x09
    2ed0:	92 85       	ldd	r25, Z+10	; 0x0a
    2ed2:	a3 85       	ldd	r26, Z+11	; 0x0b
    2ed4:	b4 85       	ldd	r27, Z+12	; 0x0c
    2ed6:	01 96       	adiw	r24, 0x01	; 1
    2ed8:	a1 1d       	adc	r26, r1
    2eda:	b1 1d       	adc	r27, r1
    2edc:	84 17       	cp	r24, r20
    2ede:	95 07       	cpc	r25, r21
    2ee0:	a6 07       	cpc	r26, r22
    2ee2:	b7 07       	cpc	r27, r23
    2ee4:	10 f4       	brcc	.+4      	; 0x2eea <_ZNK8SdVolume6fatGetEmPm+0x36>
    return false;
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	5b c0       	rjmp	.+182    	; 0x2fa0 <_ZNK8SdVolume6fatGetEmPm+0xec>
  }
  uint32_t lba = fatStartBlock_;
    2eea:	83 88       	ldd	r8, Z+19	; 0x13
    2eec:	94 88       	ldd	r9, Z+20	; 0x14
    2eee:	a5 88       	ldd	r10, Z+21	; 0x15
    2ef0:	b6 88       	ldd	r11, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2ef2:	87 89       	ldd	r24, Z+23	; 0x17
    2ef4:	80 31       	cpi	r24, 0x10	; 16
    2ef6:	29 f4       	brne	.+10     	; 0x2f02 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    2ef8:	bb 27       	eor	r27, r27
    2efa:	a7 2f       	mov	r26, r23
    2efc:	96 2f       	mov	r25, r22
    2efe:	85 2f       	mov	r24, r21
    2f00:	09 c0       	rjmp	.+18     	; 0x2f14 <_ZNK8SdVolume6fatGetEmPm+0x60>
    2f02:	db 01       	movw	r26, r22
    2f04:	ca 01       	movw	r24, r20
    2f06:	c7 e0       	ldi	r28, 0x07	; 7
    2f08:	b6 95       	lsr	r27
    2f0a:	a7 95       	ror	r26
    2f0c:	97 95       	ror	r25
    2f0e:	87 95       	ror	r24
    2f10:	ca 95       	dec	r28
    2f12:	d1 f7       	brne	.-12     	; 0x2f08 <_ZNK8SdVolume6fatGetEmPm+0x54>
    2f14:	e9 01       	movw	r28, r18
    2f16:	6a 01       	movw	r12, r20
    2f18:	7b 01       	movw	r14, r22
    2f1a:	8f 01       	movw	r16, r30
    2f1c:	bc 01       	movw	r22, r24
    2f1e:	cd 01       	movw	r24, r26
    2f20:	68 0d       	add	r22, r8
    2f22:	79 1d       	adc	r23, r9
    2f24:	8a 1d       	adc	r24, r10
    2f26:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    2f28:	80 90 09 01 	lds	r8, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    2f2c:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2f30:	a0 90 0b 01 	lds	r10, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2f34:	b0 90 0c 01 	lds	r11, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2f38:	68 15       	cp	r22, r8
    2f3a:	79 05       	cpc	r23, r9
    2f3c:	8a 05       	cpc	r24, r10
    2f3e:	9b 05       	cpc	r25, r11
    2f40:	91 f4       	brne	.+36     	; 0x2f66 <_ZNK8SdVolume6fatGetEmPm+0xb2>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
      return false;
    }
  }
  if (fatType_ == 16) {
    2f42:	f8 01       	movw	r30, r16
    2f44:	87 89       	ldd	r24, Z+23	; 0x17
    2f46:	80 31       	cpi	r24, 0x10	; 16
    2f48:	a1 f4       	brne	.+40     	; 0x2f72 <_ZNK8SdVolume6fatGetEmPm+0xbe>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    2f4a:	dd 24       	eor	r13, r13
    2f4c:	ee 24       	eor	r14, r14
    2f4e:	ff 24       	eor	r15, r15
    2f50:	c6 01       	movw	r24, r12
    2f52:	88 0f       	add	r24, r24
    2f54:	99 1f       	adc	r25, r25
    2f56:	fc 01       	movw	r30, r24
    2f58:	e0 57       	subi	r30, 0x70	; 112
    2f5a:	fd 4f       	sbci	r31, 0xFD	; 253
    2f5c:	80 81       	ld	r24, Z
    2f5e:	91 81       	ldd	r25, Z+1	; 0x01
    2f60:	a0 e0       	ldi	r26, 0x00	; 0
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	18 c0       	rjmp	.+48     	; 0x2f96 <_ZNK8SdVolume6fatGetEmPm+0xe2>
    return false;
  }
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    2f66:	40 e0       	ldi	r20, 0x00	; 0
    2f68:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN8SdVolume13cacheRawBlockEmh>
    2f6c:	81 11       	cpse	r24, r1
    2f6e:	e9 cf       	rjmp	.-46     	; 0x2f42 <_ZNK8SdVolume6fatGetEmPm+0x8e>
    2f70:	ba cf       	rjmp	.-140    	; 0x2ee6 <_ZNK8SdVolume6fatGetEmPm+0x32>
    }
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    2f72:	e8 94       	clt
    2f74:	c7 f8       	bld	r12, 7
    2f76:	dd 24       	eor	r13, r13
    2f78:	ee 24       	eor	r14, r14
    2f7a:	ff 24       	eor	r15, r15
    2f7c:	c6 01       	movw	r24, r12
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	88 0f       	add	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	fc 01       	movw	r30, r24
    2f88:	e0 57       	subi	r30, 0x70	; 112
    2f8a:	fd 4f       	sbci	r31, 0xFD	; 253
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	a2 81       	ldd	r26, Z+2	; 0x02
    2f92:	b3 81       	ldd	r27, Z+3	; 0x03
    2f94:	bf 70       	andi	r27, 0x0F	; 15
    2f96:	88 83       	st	Y, r24
    2f98:	99 83       	std	Y+1, r25	; 0x01
    2f9a:	aa 83       	std	Y+2, r26	; 0x02
    2f9c:	bb 83       	std	Y+3, r27	; 0x03
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;
}
    2fa0:	df 91       	pop	r29
    2fa2:	cf 91       	pop	r28
    2fa4:	1f 91       	pop	r17
    2fa6:	0f 91       	pop	r16
    2fa8:	ff 90       	pop	r15
    2faa:	ef 90       	pop	r14
    2fac:	df 90       	pop	r13
    2fae:	cf 90       	pop	r12
    2fb0:	bf 90       	pop	r11
    2fb2:	af 90       	pop	r10
    2fb4:	9f 90       	pop	r9
    2fb6:	8f 90       	pop	r8
    2fb8:	08 95       	ret

00002fba <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    2fba:	4f 92       	push	r4
    2fbc:	5f 92       	push	r5
    2fbe:	6f 92       	push	r6
    2fc0:	7f 92       	push	r7
    2fc2:	af 92       	push	r10
    2fc4:	bf 92       	push	r11
    2fc6:	cf 92       	push	r12
    2fc8:	df 92       	push	r13
    2fca:	ef 92       	push	r14
    2fcc:	ff 92       	push	r15
    2fce:	0f 93       	push	r16
    2fd0:	1f 93       	push	r17
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <_ZNK8SdVolume9chainSizeEmPm+0x20>
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    2fde:	8c 01       	movw	r16, r24
    2fe0:	49 83       	std	Y+1, r20	; 0x01
    2fe2:	5a 83       	std	Y+2, r21	; 0x02
    2fe4:	6b 83       	std	Y+3, r22	; 0x03
    2fe6:	7c 83       	std	Y+4, r23	; 0x04
    2fe8:	59 01       	movw	r10, r18
  uint32_t s = 0;
    2fea:	c1 2c       	mov	r12, r1
    2fec:	d1 2c       	mov	r13, r1
    2fee:	76 01       	movw	r14, r12
  do {
    if (!fatGet(cluster, &cluster)) {
      return false;
    }
    s += 512UL << clusterSizeShift_;
    2ff0:	41 2c       	mov	r4, r1
    2ff2:	82 e0       	ldi	r24, 0x02	; 2
    2ff4:	58 2e       	mov	r5, r24
    2ff6:	61 2c       	mov	r6, r1
    2ff8:	71 2c       	mov	r7, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) {
    2ffa:	49 81       	ldd	r20, Y+1	; 0x01
    2ffc:	5a 81       	ldd	r21, Y+2	; 0x02
    2ffe:	6b 81       	ldd	r22, Y+3	; 0x03
    3000:	7c 81       	ldd	r23, Y+4	; 0x04
    3002:	9e 01       	movw	r18, r28
    3004:	2f 5f       	subi	r18, 0xFF	; 255
    3006:	3f 4f       	sbci	r19, 0xFF	; 255
    3008:	c8 01       	movw	r24, r16
    300a:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZNK8SdVolume6fatGetEmPm>
    300e:	88 23       	and	r24, r24
    3010:	51 f1       	breq	.+84     	; 0x3066 <_ZNK8SdVolume9chainSizeEmPm+0xac>
      return false;
    }
    s += 512UL << clusterSizeShift_;
    3012:	d3 01       	movw	r26, r6
    3014:	c2 01       	movw	r24, r4
    3016:	f8 01       	movw	r30, r16
    3018:	05 84       	ldd	r0, Z+13	; 0x0d
    301a:	04 c0       	rjmp	.+8      	; 0x3024 <_ZNK8SdVolume9chainSizeEmPm+0x6a>
    301c:	88 0f       	add	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	aa 1f       	adc	r26, r26
    3022:	bb 1f       	adc	r27, r27
    3024:	0a 94       	dec	r0
    3026:	d2 f7       	brpl	.-12     	; 0x301c <_ZNK8SdVolume9chainSizeEmPm+0x62>
    3028:	c8 0e       	add	r12, r24
    302a:	d9 1e       	adc	r13, r25
    302c:	ea 1e       	adc	r14, r26
    302e:	fb 1e       	adc	r15, r27
  } while (!isEOC(cluster));
    3030:	49 81       	ldd	r20, Y+1	; 0x01
    3032:	5a 81       	ldd	r21, Y+2	; 0x02
    3034:	6b 81       	ldd	r22, Y+3	; 0x03
    3036:	7c 81       	ldd	r23, Y+4	; 0x04
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3038:	87 89       	ldd	r24, Z+23	; 0x17
    303a:	80 31       	cpi	r24, 0x10	; 16
    303c:	29 f0       	breq	.+10     	; 0x3048 <_ZNK8SdVolume9chainSizeEmPm+0x8e>
    303e:	88 ef       	ldi	r24, 0xF8	; 248
    3040:	9f ef       	ldi	r25, 0xFF	; 255
    3042:	af ef       	ldi	r26, 0xFF	; 255
    3044:	bf e0       	ldi	r27, 0x0F	; 15
    3046:	04 c0       	rjmp	.+8      	; 0x3050 <_ZNK8SdVolume9chainSizeEmPm+0x96>
    3048:	88 ef       	ldi	r24, 0xF8	; 248
    304a:	9f ef       	ldi	r25, 0xFF	; 255
    304c:	a0 e0       	ldi	r26, 0x00	; 0
    304e:	b0 e0       	ldi	r27, 0x00	; 0
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    3050:	48 17       	cp	r20, r24
    3052:	59 07       	cpc	r21, r25
    3054:	6a 07       	cpc	r22, r26
    3056:	7b 07       	cpc	r23, r27
    3058:	80 f2       	brcs	.-96     	; 0x2ffa <_ZNK8SdVolume9chainSizeEmPm+0x40>
    if (!fatGet(cluster, &cluster)) {
      return false;
    }
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    305a:	f5 01       	movw	r30, r10
    305c:	c0 82       	st	Z, r12
    305e:	d1 82       	std	Z+1, r13	; 0x01
    3060:	e2 82       	std	Z+2, r14	; 0x02
    3062:	f3 82       	std	Z+3, r15	; 0x03
  return true;
    3064:	81 e0       	ldi	r24, 0x01	; 1
}
    3066:	0f 90       	pop	r0
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	df 91       	pop	r29
    3070:	cf 91       	pop	r28
    3072:	1f 91       	pop	r17
    3074:	0f 91       	pop	r16
    3076:	ff 90       	pop	r15
    3078:	ef 90       	pop	r14
    307a:	df 90       	pop	r13
    307c:	cf 90       	pop	r12
    307e:	bf 90       	pop	r11
    3080:	af 90       	pop	r10
    3082:	7f 90       	pop	r7
    3084:	6f 90       	pop	r6
    3086:	5f 90       	pop	r5
    3088:	4f 90       	pop	r4
    308a:	08 95       	ret

0000308c <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    308c:	4f 92       	push	r4
    308e:	5f 92       	push	r5
    3090:	6f 92       	push	r6
    3092:	7f 92       	push	r7
    3094:	8f 92       	push	r8
    3096:	9f 92       	push	r9
    3098:	af 92       	push	r10
    309a:	bf 92       	push	r11
    309c:	cf 92       	push	r12
    309e:	df 92       	push	r13
    30a0:	ef 92       	push	r14
    30a2:	ff 92       	push	r15
    30a4:	0f 93       	push	r16
    30a6:	1f 93       	push	r17
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29
    30ac:	ec 01       	movw	r28, r24
  // error if reserved cluster
  if (cluster < 2) {
    30ae:	42 30       	cpi	r20, 0x02	; 2
    30b0:	51 05       	cpc	r21, r1
    30b2:	61 05       	cpc	r22, r1
    30b4:	71 05       	cpc	r23, r1
    30b6:	10 f4       	brcc	.+4      	; 0x30bc <_ZN8SdVolume6fatPutEmm+0x30>
    return false;
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	78 c0       	rjmp	.+240    	; 0x31ac <_ZN8SdVolume6fatPutEmm+0x120>
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    30bc:	89 85       	ldd	r24, Y+9	; 0x09
    30be:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    30c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    30c4:	01 96       	adiw	r24, 0x01	; 1
    30c6:	a1 1d       	adc	r26, r1
    30c8:	b1 1d       	adc	r27, r1
    30ca:	84 17       	cp	r24, r20
    30cc:	95 07       	cpc	r25, r21
    30ce:	a6 07       	cpc	r26, r22
    30d0:	b7 07       	cpc	r27, r23
    30d2:	90 f3       	brcs	.-28     	; 0x30b8 <_ZN8SdVolume6fatPutEmm+0x2c>
    return false;
  }

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    30d4:	cb 88       	ldd	r12, Y+19	; 0x13
    30d6:	dc 88       	ldd	r13, Y+20	; 0x14
    30d8:	ed 88       	ldd	r14, Y+21	; 0x15
    30da:	fe 88       	ldd	r15, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    30dc:	8f 89       	ldd	r24, Y+23	; 0x17
    30de:	80 31       	cpi	r24, 0x10	; 16
    30e0:	29 f4       	brne	.+10     	; 0x30ec <_ZN8SdVolume6fatPutEmm+0x60>
    30e2:	bb 27       	eor	r27, r27
    30e4:	a7 2f       	mov	r26, r23
    30e6:	96 2f       	mov	r25, r22
    30e8:	85 2f       	mov	r24, r21
    30ea:	09 c0       	rjmp	.+18     	; 0x30fe <_ZN8SdVolume6fatPutEmm+0x72>
    30ec:	db 01       	movw	r26, r22
    30ee:	ca 01       	movw	r24, r20
    30f0:	e7 e0       	ldi	r30, 0x07	; 7
    30f2:	b6 95       	lsr	r27
    30f4:	a7 95       	ror	r26
    30f6:	97 95       	ror	r25
    30f8:	87 95       	ror	r24
    30fa:	ea 95       	dec	r30
    30fc:	d1 f7       	brne	.-12     	; 0x30f2 <_ZN8SdVolume6fatPutEmm+0x66>
    30fe:	48 01       	movw	r8, r16
    3100:	59 01       	movw	r10, r18
    3102:	2a 01       	movw	r4, r20
    3104:	3b 01       	movw	r6, r22
    3106:	c8 0e       	add	r12, r24
    3108:	d9 1e       	adc	r13, r25
    310a:	ea 1e       	adc	r14, r26
    310c:	fb 1e       	adc	r15, r27

  if (lba != cacheBlockNumber_) {
    310e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3112:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3116:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    311a:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    311e:	c8 16       	cp	r12, r24
    3120:	d9 06       	cpc	r13, r25
    3122:	ea 06       	cpc	r14, r26
    3124:	fb 06       	cpc	r15, r27
    3126:	81 f4       	brne	.+32     	; 0x3148 <_ZN8SdVolume6fatPutEmm+0xbc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
      return false;
    }
  }
  // store entry
  if (fatType_ == 16) {
    3128:	8f 89       	ldd	r24, Y+23	; 0x17
    312a:	80 31       	cpi	r24, 0x10	; 16
    312c:	a9 f4       	brne	.+42     	; 0x3158 <_ZN8SdVolume6fatPutEmm+0xcc>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    312e:	b3 01       	movw	r22, r6
    3130:	a2 01       	movw	r20, r4
    3132:	55 27       	eor	r21, r21
    3134:	66 27       	eor	r22, r22
    3136:	77 27       	eor	r23, r23
    3138:	44 0f       	add	r20, r20
    313a:	55 1f       	adc	r21, r21
    313c:	fa 01       	movw	r30, r20
    313e:	e0 57       	subi	r30, 0x70	; 112
    3140:	fd 4f       	sbci	r31, 0xFD	; 253
    3142:	91 82       	std	Z+1, r9	; 0x01
    3144:	80 82       	st	Z, r8
    3146:	19 c0       	rjmp	.+50     	; 0x317a <_ZN8SdVolume6fatPutEmm+0xee>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    3148:	40 e0       	ldi	r20, 0x00	; 0
    314a:	c7 01       	movw	r24, r14
    314c:	b6 01       	movw	r22, r12
    314e:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN8SdVolume13cacheRawBlockEmh>
    3152:	81 11       	cpse	r24, r1
    3154:	e9 cf       	rjmp	.-46     	; 0x3128 <_ZN8SdVolume6fatPutEmm+0x9c>
    3156:	b0 cf       	rjmp	.-160    	; 0x30b8 <_ZN8SdVolume6fatPutEmm+0x2c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    3158:	b3 01       	movw	r22, r6
    315a:	a2 01       	movw	r20, r4
    315c:	4f 77       	andi	r20, 0x7F	; 127
    315e:	55 27       	eor	r21, r21
    3160:	66 27       	eor	r22, r22
    3162:	77 27       	eor	r23, r23
    3164:	44 0f       	add	r20, r20
    3166:	55 1f       	adc	r21, r21
    3168:	44 0f       	add	r20, r20
    316a:	55 1f       	adc	r21, r21
    316c:	fa 01       	movw	r30, r20
    316e:	e0 57       	subi	r30, 0x70	; 112
    3170:	fd 4f       	sbci	r31, 0xFD	; 253
    3172:	80 82       	st	Z, r8
    3174:	91 82       	std	Z+1, r9	; 0x01
    3176:	a2 82       	std	Z+2, r10	; 0x02
    3178:	b3 82       	std	Z+3, r11	; 0x03
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    317a:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZN8SdVolume11cacheDirty_E>
    317e:	81 60       	ori	r24, 0x01	; 1
    3180:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) {
    3184:	8a 89       	ldd	r24, Y+18	; 0x12
    3186:	82 30       	cpi	r24, 0x02	; 2
    3188:	80 f0       	brcs	.+32     	; 0x31aa <_ZN8SdVolume6fatPutEmm+0x11e>
    cacheMirrorBlock_ = lba + blocksPerFat_;
    318a:	8d 81       	ldd	r24, Y+5	; 0x05
    318c:	9e 81       	ldd	r25, Y+6	; 0x06
    318e:	af 81       	ldd	r26, Y+7	; 0x07
    3190:	b8 85       	ldd	r27, Y+8	; 0x08
    3192:	c8 0e       	add	r12, r24
    3194:	d9 1e       	adc	r13, r25
    3196:	ea 1e       	adc	r14, r26
    3198:	fb 1e       	adc	r15, r27
    319a:	c0 92 89 02 	sts	0x0289, r12	; 0x800289 <_ZN8SdVolume17cacheMirrorBlock_E>
    319e:	d0 92 8a 02 	sts	0x028A, r13	; 0x80028a <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    31a2:	e0 92 8b 02 	sts	0x028B, r14	; 0x80028b <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    31a6:	f0 92 8c 02 	sts	0x028C, r15	; 0x80028c <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    31aa:	81 e0       	ldi	r24, 0x01	; 1
}
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	1f 91       	pop	r17
    31b2:	0f 91       	pop	r16
    31b4:	ff 90       	pop	r15
    31b6:	ef 90       	pop	r14
    31b8:	df 90       	pop	r13
    31ba:	cf 90       	pop	r12
    31bc:	bf 90       	pop	r11
    31be:	af 90       	pop	r10
    31c0:	9f 90       	pop	r9
    31c2:	8f 90       	pop	r8
    31c4:	7f 90       	pop	r7
    31c6:	6f 90       	pop	r6
    31c8:	5f 90       	pop	r5
    31ca:	4f 90       	pop	r4
    31cc:	08 95       	ret

000031ce <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    31ce:	2f 92       	push	r2
    31d0:	3f 92       	push	r3
    31d2:	4f 92       	push	r4
    31d4:	5f 92       	push	r5
    31d6:	6f 92       	push	r6
    31d8:	7f 92       	push	r7
    31da:	9f 92       	push	r9
    31dc:	af 92       	push	r10
    31de:	bf 92       	push	r11
    31e0:	cf 92       	push	r12
    31e2:	df 92       	push	r13
    31e4:	ef 92       	push	r14
    31e6:	ff 92       	push	r15
    31e8:	0f 93       	push	r16
    31ea:	1f 93       	push	r17
    31ec:	cf 93       	push	r28
    31ee:	df 93       	push	r29
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	60 97       	sbiw	r28, 0x10	; 16
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	f8 94       	cli
    31fa:	de bf       	out	0x3e, r29	; 62
    31fc:	0f be       	out	0x3f, r0	; 63
    31fe:	cd bf       	out	0x3d, r28	; 61
    3200:	5c 01       	movw	r10, r24
    3202:	49 87       	std	Y+9, r20	; 0x09
    3204:	5a 87       	std	Y+10, r21	; 0x0a
    3206:	6b 87       	std	Y+11, r22	; 0x0b
    3208:	7c 87       	std	Y+12, r23	; 0x0c
    320a:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    320c:	d9 01       	movw	r26, r18
    320e:	cd 90       	ld	r12, X+
    3210:	dd 90       	ld	r13, X+
    3212:	ed 90       	ld	r14, X+
    3214:	fc 90       	ld	r15, X
    3216:	c1 14       	cp	r12, r1
    3218:	d1 04       	cpc	r13, r1
    321a:	e1 04       	cpc	r14, r1
    321c:	f1 04       	cpc	r15, r1
    321e:	31 f0       	breq	.+12     	; 0x322c <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    3220:	bf ef       	ldi	r27, 0xFF	; 255
    3222:	cb 1a       	sub	r12, r27
    3224:	db 0a       	sbc	r13, r27
    3226:	eb 0a       	sbc	r14, r27
    3228:	fb 0a       	sbc	r15, r27
    322a:	10 c0       	rjmp	.+32     	; 0x324c <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    322c:	fc 01       	movw	r30, r24
    322e:	c0 80       	ld	r12, Z
    3230:	d1 80       	ldd	r13, Z+1	; 0x01
    3232:	e2 80       	ldd	r14, Z+2	; 0x02
    3234:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    3236:	99 24       	eor	r9, r9
    3238:	93 94       	inc	r9
    323a:	09 85       	ldd	r16, Y+9	; 0x09
    323c:	1a 85       	ldd	r17, Y+10	; 0x0a
    323e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3240:	3c 85       	ldd	r19, Y+12	; 0x0c
    3242:	01 30       	cpi	r16, 0x01	; 1
    3244:	11 05       	cpc	r17, r1
    3246:	21 05       	cpc	r18, r1
    3248:	31 05       	cpc	r19, r1
    324a:	09 f0       	breq	.+2      	; 0x324e <_ZN8SdVolume15allocContiguousEmPm+0x80>
    324c:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    324e:	f5 01       	movw	r30, r10
    3250:	81 85       	ldd	r24, Z+9	; 0x09
    3252:	92 85       	ldd	r25, Z+10	; 0x0a
    3254:	a3 85       	ldd	r26, Z+11	; 0x0b
    3256:	b4 85       	ldd	r27, Z+12	; 0x0c
    3258:	8c 01       	movw	r16, r24
    325a:	9d 01       	movw	r18, r26
    325c:	0f 5f       	subi	r16, 0xFF	; 255
    325e:	1f 4f       	sbci	r17, 0xFF	; 255
    3260:	2f 4f       	sbci	r18, 0xFF	; 255
    3262:	3f 4f       	sbci	r19, 0xFF	; 255
    3264:	0d 87       	std	Y+13, r16	; 0x0d
    3266:	1e 87       	std	Y+14, r17	; 0x0e
    3268:	2f 87       	std	Y+15, r18	; 0x0f
    326a:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    326c:	26 01       	movw	r4, r12
    326e:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3270:	1d 82       	std	Y+5, r1	; 0x05
    3272:	1e 82       	std	Y+6, r1	; 0x06
    3274:	1f 82       	std	Y+7, r1	; 0x07
    3276:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) {
    3278:	f5 01       	movw	r30, r10
    327a:	81 85       	ldd	r24, Z+9	; 0x09
    327c:	92 85       	ldd	r25, Z+10	; 0x0a
    327e:	a3 85       	ldd	r26, Z+11	; 0x0b
    3280:	b4 85       	ldd	r27, Z+12	; 0x0c
    3282:	0d 81       	ldd	r16, Y+5	; 0x05
    3284:	1e 81       	ldd	r17, Y+6	; 0x06
    3286:	2f 81       	ldd	r18, Y+7	; 0x07
    3288:	38 85       	ldd	r19, Y+8	; 0x08
    328a:	08 17       	cp	r16, r24
    328c:	19 07       	cpc	r17, r25
    328e:	2a 07       	cpc	r18, r26
    3290:	3b 07       	cpc	r19, r27
    3292:	08 f0       	brcs	.+2      	; 0x3296 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    3294:	56 c0       	rjmp	.+172    	; 0x3342 <_ZN8SdVolume15allocContiguousEmPm+0x174>
      return false;
    }

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    3296:	2d 85       	ldd	r18, Y+13	; 0x0d
    3298:	3e 85       	ldd	r19, Y+14	; 0x0e
    329a:	4f 85       	ldd	r20, Y+15	; 0x0f
    329c:	58 89       	ldd	r21, Y+16	; 0x10
    329e:	24 15       	cp	r18, r4
    32a0:	35 05       	cpc	r19, r5
    32a2:	46 05       	cpc	r20, r6
    32a4:	57 05       	cpc	r21, r7
    32a6:	50 f4       	brcc	.+20     	; 0x32bc <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    32a8:	82 e0       	ldi	r24, 0x02	; 2
    32aa:	48 2e       	mov	r4, r24
    32ac:	51 2c       	mov	r5, r1
    32ae:	61 2c       	mov	r6, r1
    32b0:	71 2c       	mov	r7, r1
    32b2:	92 e0       	ldi	r25, 0x02	; 2
    32b4:	c9 2e       	mov	r12, r25
    32b6:	d1 2c       	mov	r13, r1
    32b8:	e1 2c       	mov	r14, r1
    32ba:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) {
    32bc:	9e 01       	movw	r18, r28
    32be:	2f 5f       	subi	r18, 0xFF	; 255
    32c0:	3f 4f       	sbci	r19, 0xFF	; 255
    32c2:	b3 01       	movw	r22, r6
    32c4:	a2 01       	movw	r20, r4
    32c6:	c5 01       	movw	r24, r10
    32c8:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZNK8SdVolume6fatGetEmPm>
    32cc:	88 23       	and	r24, r24
    32ce:	c9 f1       	breq	.+114    	; 0x3342 <_ZN8SdVolume15allocContiguousEmPm+0x174>
      return false;
    }

    if (f != 0) {
    32d0:	49 81       	ldd	r20, Y+1	; 0x01
    32d2:	5a 81       	ldd	r21, Y+2	; 0x02
    32d4:	6b 81       	ldd	r22, Y+3	; 0x03
    32d6:	7c 81       	ldd	r23, Y+4	; 0x04
    32d8:	d3 01       	movw	r26, r6
    32da:	c2 01       	movw	r24, r4
    32dc:	01 96       	adiw	r24, 0x01	; 1
    32de:	a1 1d       	adc	r26, r1
    32e0:	b1 1d       	adc	r27, r1
    32e2:	45 2b       	or	r20, r21
    32e4:	46 2b       	or	r20, r22
    32e6:	47 2b       	or	r20, r23
    32e8:	19 f0       	breq	.+6      	; 0x32f0 <_ZN8SdVolume15allocContiguousEmPm+0x122>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    32ea:	6c 01       	movw	r12, r24
    32ec:	7d 01       	movw	r14, r26
    32ee:	0f c0       	rjmp	.+30     	; 0x330e <_ZN8SdVolume15allocContiguousEmPm+0x140>
    } else if ((endCluster - bgnCluster + 1) == count) {
    32f0:	ac 01       	movw	r20, r24
    32f2:	bd 01       	movw	r22, r26
    32f4:	4c 19       	sub	r20, r12
    32f6:	5d 09       	sbc	r21, r13
    32f8:	6e 09       	sbc	r22, r14
    32fa:	7f 09       	sbc	r23, r15
    32fc:	09 85       	ldd	r16, Y+9	; 0x09
    32fe:	1a 85       	ldd	r17, Y+10	; 0x0a
    3300:	2b 85       	ldd	r18, Y+11	; 0x0b
    3302:	3c 85       	ldd	r19, Y+12	; 0x0c
    3304:	04 17       	cp	r16, r20
    3306:	15 07       	cpc	r17, r21
    3308:	26 07       	cpc	r18, r22
    330a:	37 07       	cpc	r19, r23
    330c:	79 f0       	breq	.+30     	; 0x332c <_ZN8SdVolume15allocContiguousEmPm+0x15e>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    330e:	2d 81       	ldd	r18, Y+5	; 0x05
    3310:	3e 81       	ldd	r19, Y+6	; 0x06
    3312:	4f 81       	ldd	r20, Y+7	; 0x07
    3314:	58 85       	ldd	r21, Y+8	; 0x08
    3316:	2f 5f       	subi	r18, 0xFF	; 255
    3318:	3f 4f       	sbci	r19, 0xFF	; 255
    331a:	4f 4f       	sbci	r20, 0xFF	; 255
    331c:	5f 4f       	sbci	r21, 0xFF	; 255
    331e:	2d 83       	std	Y+5, r18	; 0x05
    3320:	3e 83       	std	Y+6, r19	; 0x06
    3322:	4f 83       	std	Y+7, r20	; 0x07
    3324:	58 87       	std	Y+8, r21	; 0x08
    3326:	2c 01       	movw	r4, r24
    3328:	3d 01       	movw	r6, r26
    332a:	a6 cf       	rjmp	.-180    	; 0x3278 <_ZN8SdVolume15allocContiguousEmPm+0xaa>
    static uint8_t cacheZeroBlock(uint32_t blockNumber);
    uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
    uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
    uint8_t fatPut(uint32_t cluster, uint32_t value);
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    332c:	0f ef       	ldi	r16, 0xFF	; 255
    332e:	1f ef       	ldi	r17, 0xFF	; 255
    3330:	2f ef       	ldi	r18, 0xFF	; 255
    3332:	3f e0       	ldi	r19, 0x0F	; 15
    3334:	b3 01       	movw	r22, r6
    3336:	a2 01       	movw	r20, r4
    3338:	c5 01       	movw	r24, r10
    333a:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    333e:	81 11       	cpse	r24, r1
    3340:	18 c0       	rjmp	.+48     	; 0x3372 <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    return false;
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	41 c0       	rjmp	.+130    	; 0x33c8 <_ZN8SdVolume15allocContiguousEmPm+0x1fa>
  }

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) {
    3346:	d3 01       	movw	r26, r6
    3348:	c2 01       	movw	r24, r4
    334a:	01 97       	sbiw	r24, 0x01	; 1
    334c:	a1 09       	sbc	r26, r1
    334e:	b1 09       	sbc	r27, r1
    3350:	8d 83       	std	Y+5, r24	; 0x05
    3352:	9e 83       	std	Y+6, r25	; 0x06
    3354:	af 83       	std	Y+7, r26	; 0x07
    3356:	b8 87       	std	Y+8, r27	; 0x08
    3358:	93 01       	movw	r18, r6
    335a:	82 01       	movw	r16, r4
    335c:	ac 01       	movw	r20, r24
    335e:	bd 01       	movw	r22, r26
    3360:	c5 01       	movw	r24, r10
    3362:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN8SdVolume6fatPutEmm>
    3366:	88 23       	and	r24, r24
    3368:	61 f3       	breq	.-40     	; 0x3342 <_ZN8SdVolume15allocContiguousEmPm+0x174>
      return false;
    }
    endCluster--;
    336a:	4d 80       	ldd	r4, Y+5	; 0x05
    336c:	5e 80       	ldd	r5, Y+6	; 0x06
    336e:	6f 80       	ldd	r6, Y+7	; 0x07
    3370:	78 84       	ldd	r7, Y+8	; 0x08
  if (!fatPutEOC(endCluster)) {
    return false;
  }

  // link clusters
  while (endCluster > bgnCluster) {
    3372:	c4 14       	cp	r12, r4
    3374:	d5 04       	cpc	r13, r5
    3376:	e6 04       	cpc	r14, r6
    3378:	f7 04       	cpc	r15, r7
    337a:	28 f3       	brcs	.-54     	; 0x3346 <_ZN8SdVolume15allocContiguousEmPm+0x178>
    if (!fatPut(endCluster - 1, endCluster)) {
      return false;
    }
    endCluster--;
  }
  if (*curCluster != 0) {
    337c:	d1 01       	movw	r26, r2
    337e:	4d 91       	ld	r20, X+
    3380:	5d 91       	ld	r21, X+
    3382:	6d 91       	ld	r22, X+
    3384:	7c 91       	ld	r23, X
    3386:	41 15       	cp	r20, r1
    3388:	51 05       	cpc	r21, r1
    338a:	61 05       	cpc	r22, r1
    338c:	71 05       	cpc	r23, r1
    338e:	99 f4       	brne	.+38     	; 0x33b6 <_ZN8SdVolume15allocContiguousEmPm+0x1e8>
    if (!fatPut(*curCluster, bgnCluster)) {
      return false;
    }
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    3390:	f1 01       	movw	r30, r2
    3392:	c0 82       	st	Z, r12
    3394:	d1 82       	std	Z+1, r13	; 0x01
    3396:	e2 82       	std	Z+2, r14	; 0x02
    3398:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) {
    339a:	99 20       	and	r9, r9
    339c:	a1 f0       	breq	.+40     	; 0x33c6 <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    allocSearchStart_ = bgnCluster + 1;
    339e:	ff ef       	ldi	r31, 0xFF	; 255
    33a0:	cf 1a       	sub	r12, r31
    33a2:	df 0a       	sbc	r13, r31
    33a4:	ef 0a       	sbc	r14, r31
    33a6:	ff 0a       	sbc	r15, r31
    33a8:	d5 01       	movw	r26, r10
    33aa:	cd 92       	st	X+, r12
    33ac:	dd 92       	st	X+, r13
    33ae:	ed 92       	st	X+, r14
    33b0:	fc 92       	st	X, r15
    33b2:	13 97       	sbiw	r26, 0x03	; 3
    33b4:	08 c0       	rjmp	.+16     	; 0x33c6 <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    }
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) {
    33b6:	97 01       	movw	r18, r14
    33b8:	86 01       	movw	r16, r12
    33ba:	c5 01       	movw	r24, r10
    33bc:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN8SdVolume6fatPutEmm>
    33c0:	81 11       	cpse	r24, r1
    33c2:	e6 cf       	rjmp	.-52     	; 0x3390 <_ZN8SdVolume15allocContiguousEmPm+0x1c2>
    33c4:	be cf       	rjmp	.-132    	; 0x3342 <_ZN8SdVolume15allocContiguousEmPm+0x174>
  // remember possible next free cluster
  if (setStart) {
    allocSearchStart_ = bgnCluster + 1;
  }

  return true;
    33c6:	81 e0       	ldi	r24, 0x01	; 1
}
    33c8:	60 96       	adiw	r28, 0x10	; 16
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	df 91       	pop	r29
    33d6:	cf 91       	pop	r28
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	ff 90       	pop	r15
    33de:	ef 90       	pop	r14
    33e0:	df 90       	pop	r13
    33e2:	cf 90       	pop	r12
    33e4:	bf 90       	pop	r11
    33e6:	af 90       	pop	r10
    33e8:	9f 90       	pop	r9
    33ea:	7f 90       	pop	r7
    33ec:	6f 90       	pop	r6
    33ee:	5f 90       	pop	r5
    33f0:	4f 90       	pop	r4
    33f2:	3f 90       	pop	r3
    33f4:	2f 90       	pop	r2
    33f6:	08 95       	ret

000033f8 <_ZN8SdVolume9freeChainEm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    33f8:	af 92       	push	r10
    33fa:	bf 92       	push	r11
    33fc:	cf 92       	push	r12
    33fe:	df 92       	push	r13
    3400:	ef 92       	push	r14
    3402:	ff 92       	push	r15
    3404:	0f 93       	push	r16
    3406:	1f 93       	push	r17
    3408:	cf 93       	push	r28
    340a:	df 93       	push	r29
    340c:	00 d0       	rcall	.+0      	; 0x340e <_ZN8SdVolume9freeChainEm+0x16>
    340e:	00 d0       	rcall	.+0      	; 0x3410 <_ZN8SdVolume9freeChainEm+0x18>
    3410:	cd b7       	in	r28, 0x3d	; 61
    3412:	de b7       	in	r29, 0x3e	; 62
    3414:	5c 01       	movw	r10, r24
    3416:	6a 01       	movw	r12, r20
    3418:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    341a:	82 e0       	ldi	r24, 0x02	; 2
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	a0 e0       	ldi	r26, 0x00	; 0
    3420:	b0 e0       	ldi	r27, 0x00	; 0
    3422:	f5 01       	movw	r30, r10
    3424:	80 83       	st	Z, r24
    3426:	91 83       	std	Z+1, r25	; 0x01
    3428:	a2 83       	std	Z+2, r26	; 0x02
    342a:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
    342c:	9e 01       	movw	r18, r28
    342e:	2f 5f       	subi	r18, 0xFF	; 255
    3430:	3f 4f       	sbci	r19, 0xFF	; 255
    3432:	b7 01       	movw	r22, r14
    3434:	a6 01       	movw	r20, r12
    3436:	c5 01       	movw	r24, r10
    3438:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZNK8SdVolume6fatGetEmPm>
    343c:	88 23       	and	r24, r24
    343e:	11 f1       	breq	.+68     	; 0x3484 <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    // free cluster
    if (!fatPut(cluster, 0)) {
    3440:	00 e0       	ldi	r16, 0x00	; 0
    3442:	10 e0       	ldi	r17, 0x00	; 0
    3444:	98 01       	movw	r18, r16
    3446:	b7 01       	movw	r22, r14
    3448:	a6 01       	movw	r20, r12
    344a:	c5 01       	movw	r24, r10
    344c:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN8SdVolume6fatPutEmm>
    3450:	88 23       	and	r24, r24
    3452:	c1 f0       	breq	.+48     	; 0x3484 <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    cluster = next;
    3454:	c9 80       	ldd	r12, Y+1	; 0x01
    3456:	da 80       	ldd	r13, Y+2	; 0x02
    3458:	eb 80       	ldd	r14, Y+3	; 0x03
    345a:	fc 80       	ldd	r15, Y+4	; 0x04
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    345c:	f5 01       	movw	r30, r10
    345e:	87 89       	ldd	r24, Z+23	; 0x17
    3460:	80 31       	cpi	r24, 0x10	; 16
    3462:	29 f0       	breq	.+10     	; 0x346e <_ZN8SdVolume9freeChainEm+0x76>
    3464:	88 ef       	ldi	r24, 0xF8	; 248
    3466:	9f ef       	ldi	r25, 0xFF	; 255
    3468:	af ef       	ldi	r26, 0xFF	; 255
    346a:	bf e0       	ldi	r27, 0x0F	; 15
    346c:	04 c0       	rjmp	.+8      	; 0x3476 <_ZN8SdVolume9freeChainEm+0x7e>
    346e:	88 ef       	ldi	r24, 0xF8	; 248
    3470:	9f ef       	ldi	r25, 0xFF	; 255
    3472:	a0 e0       	ldi	r26, 0x00	; 0
    3474:	b0 e0       	ldi	r27, 0x00	; 0
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    3476:	c8 16       	cp	r12, r24
    3478:	d9 06       	cpc	r13, r25
    347a:	ea 06       	cpc	r14, r26
    347c:	fb 06       	cpc	r15, r27
    347e:	b0 f2       	brcs	.-84     	; 0x342c <_ZN8SdVolume9freeChainEm+0x34>
    }

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	01 c0       	rjmp	.+2      	; 0x3486 <_ZN8SdVolume9freeChainEm+0x8e>
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
      return false;
    3484:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	df 91       	pop	r29
    3490:	cf 91       	pop	r28
    3492:	1f 91       	pop	r17
    3494:	0f 91       	pop	r16
    3496:	ff 90       	pop	r15
    3498:	ef 90       	pop	r14
    349a:	df 90       	pop	r13
    349c:	cf 90       	pop	r12
    349e:	bf 90       	pop	r11
    34a0:	af 90       	pop	r10
    34a2:	08 95       	ret

000034a4 <_ZN8SdVolume4initEP7Sd2Cardh>:
   \return The value one, true, is returned for success and
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    34a4:	8f 92       	push	r8
    34a6:	9f 92       	push	r9
    34a8:	af 92       	push	r10
    34aa:	bf 92       	push	r11
    34ac:	cf 92       	push	r12
    34ae:	df 92       	push	r13
    34b0:	ef 92       	push	r14
    34b2:	ff 92       	push	r15
    34b4:	0f 93       	push	r16
    34b6:	1f 93       	push	r17
    34b8:	cf 93       	push	r28
    34ba:	df 93       	push	r29
    34bc:	ec 01       	movw	r28, r24
    34be:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    34c0:	70 93 8f 02 	sts	0x028F, r23	; 0x80028f <_ZN8SdVolume7sdCard_E+0x1>
    34c4:	60 93 8e 02 	sts	0x028E, r22	; 0x80028e <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    34c8:	44 23       	and	r20, r20
    34ca:	69 f1       	breq	.+90     	; 0x3526 <_ZN8SdVolume4initEP7Sd2Cardh+0x82>
    if (part > 4) {
    34cc:	45 30       	cpi	r20, 0x05	; 5
    34ce:	10 f0       	brcs	.+4      	; 0x34d4 <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
      return false;
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	f2 c0       	rjmp	.+484    	; 0x36b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x214>
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    34d4:	40 e0       	ldi	r20, 0x00	; 0
    34d6:	60 e0       	ldi	r22, 0x00	; 0
    34d8:	70 e0       	ldi	r23, 0x00	; 0
    34da:	cb 01       	movw	r24, r22
    34dc:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN8SdVolume13cacheRawBlockEmh>
    34e0:	88 23       	and	r24, r24
    34e2:	b1 f3       	breq	.-20     	; 0x34d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
    34e4:	20 e1       	ldi	r18, 0x10	; 16
    34e6:	12 9f       	mul	r17, r18
    34e8:	a0 01       	movw	r20, r0
    34ea:	11 24       	eor	r1, r1
    34ec:	40 58       	subi	r20, 0x80	; 128
    34ee:	5d 4f       	sbci	r21, 0xFD	; 253
    34f0:	fa 01       	movw	r30, r20
    34f2:	e2 54       	subi	r30, 0x42	; 66
    34f4:	fe 4f       	sbci	r31, 0xFE	; 254
    34f6:	80 81       	ld	r24, Z
    34f8:	8f 77       	andi	r24, 0x7F	; 127
    34fa:	51 f7       	brne	.-44     	; 0x34d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
        p->totalSectors < 100 ||
    34fc:	3c 96       	adiw	r30, 0x0c	; 12
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
    34fe:	80 81       	ld	r24, Z
    3500:	91 81       	ldd	r25, Z+1	; 0x01
    3502:	a2 81       	ldd	r26, Z+2	; 0x02
    3504:	b3 81       	ldd	r27, Z+3	; 0x03
    3506:	84 36       	cpi	r24, 0x64	; 100
    3508:	91 05       	cpc	r25, r1
    350a:	a1 05       	cpc	r26, r1
    350c:	b1 05       	cpc	r27, r1
    350e:	00 f3       	brcs	.-64     	; 0x34d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
        p->totalSectors < 100 ||
        p->firstSector == 0) {
    3510:	34 97       	sbiw	r30, 0x04	; 4
    3512:	c0 80       	ld	r12, Z
    3514:	d1 80       	ldd	r13, Z+1	; 0x01
    3516:	e2 80       	ldd	r14, Z+2	; 0x02
    3518:	f3 80       	ldd	r15, Z+3	; 0x03
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
        p->totalSectors < 100 ||
    351a:	c1 14       	cp	r12, r1
    351c:	d1 04       	cpc	r13, r1
    351e:	e1 04       	cpc	r14, r1
    3520:	f1 04       	cpc	r15, r1
    3522:	21 f4       	brne	.+8      	; 0x352c <_ZN8SdVolume4initEP7Sd2Cardh+0x88>
    3524:	d5 cf       	rjmp	.-86     	; 0x34d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    3526:	c1 2c       	mov	r12, r1
    3528:	d1 2c       	mov	r13, r1
    352a:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    352c:	40 e0       	ldi	r20, 0x00	; 0
    352e:	c7 01       	movw	r24, r14
    3530:	b6 01       	movw	r22, r12
    3532:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN8SdVolume13cacheRawBlockEmh>
    3536:	88 23       	and	r24, r24
    3538:	59 f2       	breq	.-106    	; 0x34d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    353a:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <_ZN8SdVolume12cacheBuffer_E+0xb>
    353e:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <_ZN8SdVolume12cacheBuffer_E+0xc>
    3542:	81 15       	cp	r24, r1
    3544:	92 40       	sbci	r25, 0x02	; 2
    3546:	21 f6       	brne	.-120    	; 0x34d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      bpb->fatCount == 0 ||
    3548:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <_ZN8SdVolume12cacheBuffer_E+0x10>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    354c:	99 23       	and	r25, r25
    354e:	09 f4       	brne	.+2      	; 0x3552 <_ZN8SdVolume4initEP7Sd2Cardh+0xae>
    3550:	bf cf       	rjmp	.-130    	; 0x34d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      bpb->fatCount == 0 ||
    3552:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <_ZN8SdVolume12cacheBuffer_E+0xe>
    3556:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <_ZN8SdVolume12cacheBuffer_E+0xf>
    355a:	23 2b       	or	r18, r19
    355c:	09 f4       	brne	.+2      	; 0x3560 <_ZN8SdVolume4initEP7Sd2Cardh+0xbc>
    355e:	b8 cf       	rjmp	.-144    	; 0x34d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      bpb->reservedSectorCount == 0 ||
      bpb->sectorsPerCluster == 0) {
    3560:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <_ZN8SdVolume12cacheBuffer_E+0xd>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
    3564:	88 23       	and	r24, r24
    3566:	09 f4       	brne	.+2      	; 0x356a <_ZN8SdVolume4initEP7Sd2Cardh+0xc6>
    3568:	b3 cf       	rjmp	.-154    	; 0x34d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      bpb->sectorsPerCluster == 0) {
    // not valid FAT volume
    return false;
  }
  fatCount_ = bpb->fatCount;
    356a:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    356c:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    356e:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	41 e0       	ldi	r20, 0x01	; 1
    3574:	50 e0       	ldi	r21, 0x00	; 0
    3576:	2d 85       	ldd	r18, Y+13	; 0x0d
    3578:	e2 2f       	mov	r30, r18
    357a:	ba 01       	movw	r22, r20
    357c:	02 2e       	mov	r0, r18
    357e:	02 c0       	rjmp	.+4      	; 0x3584 <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    3580:	66 0f       	add	r22, r22
    3582:	77 1f       	adc	r23, r23
    3584:	0a 94       	dec	r0
    3586:	e2 f7       	brpl	.-8      	; 0x3580 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    3588:	86 17       	cp	r24, r22
    358a:	97 07       	cpc	r25, r23
    358c:	31 f0       	breq	.+12     	; 0x359a <_ZN8SdVolume4initEP7Sd2Cardh+0xf6>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
    358e:	31 e0       	ldi	r19, 0x01	; 1
    3590:	32 0f       	add	r19, r18
    3592:	3d 87       	std	Y+13, r19	; 0x0d
    3594:	28 30       	cpi	r18, 0x08	; 8
    3596:	78 f3       	brcs	.-34     	; 0x3576 <_ZN8SdVolume4initEP7Sd2Cardh+0xd2>
    3598:	9b cf       	rjmp	.-202    	; 0x34d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      return false;
    }
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    359a:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <_ZN8SdVolume12cacheBuffer_E+0x16>
    359e:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <_ZN8SdVolume12cacheBuffer_E+0x17>
                  bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    35a2:	21 15       	cp	r18, r1
    35a4:	31 05       	cpc	r19, r1
    35a6:	19 f0       	breq	.+6      	; 0x35ae <_ZN8SdVolume4initEP7Sd2Cardh+0x10a>
    35a8:	40 e0       	ldi	r20, 0x00	; 0
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	08 c0       	rjmp	.+16     	; 0x35be <_ZN8SdVolume4initEP7Sd2Cardh+0x11a>
    35ae:	20 91 b4 02 	lds	r18, 0x02B4	; 0x8002b4 <_ZN8SdVolume12cacheBuffer_E+0x24>
    35b2:	30 91 b5 02 	lds	r19, 0x02B5	; 0x8002b5 <_ZN8SdVolume12cacheBuffer_E+0x25>
    35b6:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <_ZN8SdVolume12cacheBuffer_E+0x26>
    35ba:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <_ZN8SdVolume12cacheBuffer_E+0x27>
    35be:	2d 83       	std	Y+5, r18	; 0x05
    35c0:	3e 83       	std	Y+6, r19	; 0x06
    35c2:	4f 83       	std	Y+7, r20	; 0x07
    35c4:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    35c6:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <_ZN8SdVolume12cacheBuffer_E+0xe>
    35ca:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <_ZN8SdVolume12cacheBuffer_E+0xf>
    35ce:	46 01       	movw	r8, r12
    35d0:	57 01       	movw	r10, r14
    35d2:	88 0e       	add	r8, r24
    35d4:	99 1e       	adc	r9, r25
    35d6:	a1 1c       	adc	r10, r1
    35d8:	b1 1c       	adc	r11, r1
    35da:	8b 8a       	std	Y+19, r8	; 0x13
    35dc:	9c 8a       	std	Y+20, r9	; 0x14
    35de:	ad 8a       	std	Y+21, r10	; 0x15
    35e0:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    35e2:	00 91 a1 02 	lds	r16, 0x02A1	; 0x8002a1 <_ZN8SdVolume12cacheBuffer_E+0x11>
    35e6:	10 91 a2 02 	lds	r17, 0x02A2	; 0x8002a2 <_ZN8SdVolume12cacheBuffer_E+0x12>
    35ea:	19 8f       	std	Y+25, r17	; 0x19
    35ec:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    35ee:	a0 91 a0 02 	lds	r26, 0x02A0	; 0x8002a0 <_ZN8SdVolume12cacheBuffer_E+0x10>
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__muluhisi3>
    35f8:	86 0e       	add	r8, r22
    35fa:	97 1e       	adc	r9, r23
    35fc:	a8 1e       	adc	r10, r24
    35fe:	b9 1e       	adc	r11, r25
    3600:	8a 8e       	std	Y+26, r8	; 0x1a
    3602:	9b 8e       	std	Y+27, r9	; 0x1b
    3604:	ac 8e       	std	Y+28, r10	; 0x1c
    3606:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511) / 512);
    3608:	85 e0       	ldi	r24, 0x05	; 5
    360a:	00 0f       	add	r16, r16
    360c:	11 1f       	adc	r17, r17
    360e:	8a 95       	dec	r24
    3610:	e1 f7       	brne	.-8      	; 0x360a <_ZN8SdVolume4initEP7Sd2Cardh+0x166>
    3612:	01 50       	subi	r16, 0x01	; 1
    3614:	1e 4f       	sbci	r17, 0xFE	; 254
    3616:	01 2f       	mov	r16, r17
    3618:	11 27       	eor	r17, r17
    361a:	06 95       	lsr	r16
    361c:	80 0e       	add	r8, r16
    361e:	91 1e       	adc	r9, r17
    3620:	a1 1c       	adc	r10, r1
    3622:	b1 1c       	adc	r11, r1
    3624:	8e 86       	std	Y+14, r8	; 0x0e
    3626:	9f 86       	std	Y+15, r9	; 0x0f
    3628:	a8 8a       	std	Y+16, r10	; 0x10
    362a:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    362c:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <_ZN8SdVolume12cacheBuffer_E+0x13>
    3630:	30 91 a4 02 	lds	r19, 0x02A4	; 0x8002a4 <_ZN8SdVolume12cacheBuffer_E+0x14>
                         bpb->totalSectors16 : bpb->totalSectors32;
    3634:	21 15       	cp	r18, r1
    3636:	31 05       	cpc	r19, r1
    3638:	21 f0       	breq	.+8      	; 0x3642 <_ZN8SdVolume4initEP7Sd2Cardh+0x19e>
    363a:	a9 01       	movw	r20, r18
    363c:	60 e0       	ldi	r22, 0x00	; 0
    363e:	70 e0       	ldi	r23, 0x00	; 0
    3640:	08 c0       	rjmp	.+16     	; 0x3652 <_ZN8SdVolume4initEP7Sd2Cardh+0x1ae>
    3642:	40 91 b0 02 	lds	r20, 0x02B0	; 0x8002b0 <_ZN8SdVolume12cacheBuffer_E+0x20>
    3646:	50 91 b1 02 	lds	r21, 0x02B1	; 0x8002b1 <_ZN8SdVolume12cacheBuffer_E+0x21>
    364a:	60 91 b2 02 	lds	r22, 0x02B2	; 0x8002b2 <_ZN8SdVolume12cacheBuffer_E+0x22>
    364e:	70 91 b3 02 	lds	r23, 0x02B3	; 0x8002b3 <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    3652:	d7 01       	movw	r26, r14
    3654:	c6 01       	movw	r24, r12
    3656:	88 19       	sub	r24, r8
    3658:	99 09       	sbc	r25, r9
    365a:	aa 09       	sbc	r26, r10
    365c:	bb 09       	sbc	r27, r11
    365e:	84 0f       	add	r24, r20
    3660:	95 1f       	adc	r25, r21
    3662:	a6 1f       	adc	r26, r22
    3664:	b7 1f       	adc	r27, r23
    3666:	04 c0       	rjmp	.+8      	; 0x3670 <_ZN8SdVolume4initEP7Sd2Cardh+0x1cc>
    3668:	b6 95       	lsr	r27
    366a:	a7 95       	ror	r26
    366c:	97 95       	ror	r25
    366e:	87 95       	ror	r24
    3670:	ea 95       	dec	r30
    3672:	d2 f7       	brpl	.-12     	; 0x3668 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c4>
    3674:	89 87       	std	Y+9, r24	; 0x09
    3676:	9a 87       	std	Y+10, r25	; 0x0a
    3678:	ab 87       	std	Y+11, r26	; 0x0b
    367a:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    367c:	85 3f       	cpi	r24, 0xF5	; 245
    367e:	2f e0       	ldi	r18, 0x0F	; 15
    3680:	92 07       	cpc	r25, r18
    3682:	a1 05       	cpc	r26, r1
    3684:	b1 05       	cpc	r27, r1
    3686:	10 f4       	brcc	.+4      	; 0x368c <_ZN8SdVolume4initEP7Sd2Cardh+0x1e8>
    fatType_ = 12;
    3688:	8c e0       	ldi	r24, 0x0C	; 12
    368a:	14 c0       	rjmp	.+40     	; 0x36b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
  } else if (clusterCount_ < 65525) {
    368c:	85 3f       	cpi	r24, 0xF5	; 245
    368e:	9f 4f       	sbci	r25, 0xFF	; 255
    3690:	a1 05       	cpc	r26, r1
    3692:	b1 05       	cpc	r27, r1
    3694:	10 f4       	brcc	.+4      	; 0x369a <_ZN8SdVolume4initEP7Sd2Cardh+0x1f6>
    fatType_ = 16;
    3696:	80 e1       	ldi	r24, 0x10	; 16
    3698:	0d c0       	rjmp	.+26     	; 0x36b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    369a:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <_ZN8SdVolume12cacheBuffer_E+0x2c>
    369e:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <_ZN8SdVolume12cacheBuffer_E+0x2d>
    36a2:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <_ZN8SdVolume12cacheBuffer_E+0x2e>
    36a6:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <_ZN8SdVolume12cacheBuffer_E+0x2f>
    36aa:	8a 8f       	std	Y+26, r24	; 0x1a
    36ac:	9b 8f       	std	Y+27, r25	; 0x1b
    36ae:	ac 8f       	std	Y+28, r26	; 0x1c
    36b0:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    36b2:	80 e2       	ldi	r24, 0x20	; 32
    36b4:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    36b6:	81 e0       	ldi	r24, 0x01	; 1
}
    36b8:	df 91       	pop	r29
    36ba:	cf 91       	pop	r28
    36bc:	1f 91       	pop	r17
    36be:	0f 91       	pop	r16
    36c0:	ff 90       	pop	r15
    36c2:	ef 90       	pop	r14
    36c4:	df 90       	pop	r13
    36c6:	cf 90       	pop	r12
    36c8:	bf 90       	pop	r11
    36ca:	af 90       	pop	r10
    36cc:	9f 90       	pop	r9
    36ce:	8f 90       	pop	r8
    36d0:	08 95       	ret

000036d2 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    36d2:	cf 93       	push	r28
  uint8_t sreg = SREG;
    36d4:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    36d6:	f8 94       	cli
  if (!initialized) {
    36d8:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <_ZN8SPIClass11initializedE>
    36dc:	81 11       	cpse	r24, r1
    36de:	27 c0       	rjmp	.+78     	; 0x372e <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    36e0:	ea e9       	ldi	r30, 0x9A	; 154
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    36e6:	e6 e8       	ldi	r30, 0x86	; 134
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    36ec:	e8 2f       	mov	r30, r24
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	ee 0f       	add	r30, r30
    36f2:	ff 1f       	adc	r31, r31
    36f4:	e2 55       	subi	r30, 0x52	; 82
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	a5 91       	lpm	r26, Z+
    36fa:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    36fc:	ec 91       	ld	r30, X
    36fe:	e9 23       	and	r30, r25
    3700:	21 f4       	brne	.+8      	; 0x370a <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3702:	61 e0       	ldi	r22, 0x01	; 1
    3704:	8a e0       	ldi	r24, 0x0A	; 10
    3706:	0e 94 9a 06 	call	0xd34	; 0xd34 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    370a:	61 e0       	ldi	r22, 0x01	; 1
    370c:	8a e0       	ldi	r24, 0x0A	; 10
    370e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3712:	8c b5       	in	r24, 0x2c	; 44
    3714:	80 61       	ori	r24, 0x10	; 16
    3716:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3718:	8c b5       	in	r24, 0x2c	; 44
    371a:	80 64       	ori	r24, 0x40	; 64
    371c:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    371e:	61 e0       	ldi	r22, 0x01	; 1
    3720:	8d e0       	ldi	r24, 0x0D	; 13
    3722:	0e 94 5e 06 	call	0xcbc	; 0xcbc <pinMode>
    pinMode(MOSI, OUTPUT);
    3726:	61 e0       	ldi	r22, 0x01	; 1
    3728:	8b e0       	ldi	r24, 0x0B	; 11
    372a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <pinMode>
  }
  initialized++; // reference count
    372e:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <_ZN8SPIClass11initializedE>
    3732:	8f 5f       	subi	r24, 0xFF	; 255
    3734:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3738:	cf bf       	out	0x3f, r28	; 63
}
    373a:	cf 91       	pop	r28
    373c:	08 95       	ret

0000373e <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    373e:	fc 01       	movw	r30, r24
    3740:	91 8d       	ldd	r25, Z+25	; 0x19
    3742:	22 8d       	ldd	r18, Z+26	; 0x1a
    3744:	89 2f       	mov	r24, r25
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	80 5c       	subi	r24, 0xC0	; 192
    374a:	9f 4f       	sbci	r25, 0xFF	; 255
    374c:	82 1b       	sub	r24, r18
    374e:	91 09       	sbc	r25, r1
    3750:	8f 73       	andi	r24, 0x3F	; 63
    3752:	99 27       	eor	r25, r25
    3754:	08 95       	ret

00003756 <_ZN14HardwareSerial4peekEv>:
    3756:	fc 01       	movw	r30, r24
    3758:	91 8d       	ldd	r25, Z+25	; 0x19
    375a:	82 8d       	ldd	r24, Z+26	; 0x1a
    375c:	98 17       	cp	r25, r24
    375e:	31 f0       	breq	.+12     	; 0x376c <_ZN14HardwareSerial4peekEv+0x16>
    3760:	82 8d       	ldd	r24, Z+26	; 0x1a
    3762:	e8 0f       	add	r30, r24
    3764:	f1 1d       	adc	r31, r1
    3766:	85 8d       	ldd	r24, Z+29	; 0x1d
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	08 95       	ret
    376c:	8f ef       	ldi	r24, 0xFF	; 255
    376e:	9f ef       	ldi	r25, 0xFF	; 255
    3770:	08 95       	ret

00003772 <_ZN14HardwareSerial4readEv>:
    3772:	fc 01       	movw	r30, r24
    3774:	91 8d       	ldd	r25, Z+25	; 0x19
    3776:	82 8d       	ldd	r24, Z+26	; 0x1a
    3778:	98 17       	cp	r25, r24
    377a:	61 f0       	breq	.+24     	; 0x3794 <_ZN14HardwareSerial4readEv+0x22>
    377c:	82 8d       	ldd	r24, Z+26	; 0x1a
    377e:	df 01       	movw	r26, r30
    3780:	a8 0f       	add	r26, r24
    3782:	b1 1d       	adc	r27, r1
    3784:	5d 96       	adiw	r26, 0x1d	; 29
    3786:	8c 91       	ld	r24, X
    3788:	92 8d       	ldd	r25, Z+26	; 0x1a
    378a:	9f 5f       	subi	r25, 0xFF	; 255
    378c:	9f 73       	andi	r25, 0x3F	; 63
    378e:	92 8f       	std	Z+26, r25	; 0x1a
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	08 95       	ret
    3794:	8f ef       	ldi	r24, 0xFF	; 255
    3796:	9f ef       	ldi	r25, 0xFF	; 255
    3798:	08 95       	ret

0000379a <_ZN14HardwareSerial17availableForWriteEv>:
    379a:	fc 01       	movw	r30, r24
    379c:	53 8d       	ldd	r21, Z+27	; 0x1b
    379e:	44 8d       	ldd	r20, Z+28	; 0x1c
    37a0:	25 2f       	mov	r18, r21
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	84 2f       	mov	r24, r20
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	82 1b       	sub	r24, r18
    37aa:	93 0b       	sbc	r25, r19
    37ac:	54 17       	cp	r21, r20
    37ae:	10 f0       	brcs	.+4      	; 0x37b4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    37b0:	cf 96       	adiw	r24, 0x3f	; 63
    37b2:	08 95       	ret
    37b4:	01 97       	sbiw	r24, 0x01	; 1
    37b6:	08 95       	ret

000037b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    37b8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    37ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    37bc:	df 01       	movw	r26, r30
    37be:	a8 0f       	add	r26, r24
    37c0:	b1 1d       	adc	r27, r1
    37c2:	a3 5a       	subi	r26, 0xA3	; 163
    37c4:	bf 4f       	sbci	r27, 0xFF	; 255
    37c6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    37c8:	84 8d       	ldd	r24, Z+28	; 0x1c
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	01 96       	adiw	r24, 0x01	; 1
    37ce:	8f 73       	andi	r24, 0x3F	; 63
    37d0:	99 27       	eor	r25, r25
    37d2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    37d4:	a6 89       	ldd	r26, Z+22	; 0x16
    37d6:	b7 89       	ldd	r27, Z+23	; 0x17
    37d8:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    37da:	a0 89       	ldd	r26, Z+16	; 0x10
    37dc:	b1 89       	ldd	r27, Z+17	; 0x11
    37de:	8c 91       	ld	r24, X
    37e0:	83 70       	andi	r24, 0x03	; 3
    37e2:	80 64       	ori	r24, 0x40	; 64
    37e4:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    37e6:	93 8d       	ldd	r25, Z+27	; 0x1b
    37e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    37ea:	98 13       	cpse	r25, r24
    37ec:	06 c0       	rjmp	.+12     	; 0x37fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    37ee:	02 88       	ldd	r0, Z+18	; 0x12
    37f0:	f3 89       	ldd	r31, Z+19	; 0x13
    37f2:	e0 2d       	mov	r30, r0
    37f4:	80 81       	ld	r24, Z
    37f6:	8f 7d       	andi	r24, 0xDF	; 223
    37f8:	80 83       	st	Z, r24
    37fa:	08 95       	ret

000037fc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    37fc:	ef 92       	push	r14
    37fe:	ff 92       	push	r15
    3800:	0f 93       	push	r16
    3802:	1f 93       	push	r17
    3804:	cf 93       	push	r28
    3806:	df 93       	push	r29
    3808:	ec 01       	movw	r28, r24
  _written = true;
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    380e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3810:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3812:	98 13       	cpse	r25, r24
    3814:	05 c0       	rjmp	.+10     	; 0x3820 <_ZN14HardwareSerial5writeEh+0x24>
    3816:	e8 89       	ldd	r30, Y+16	; 0x10
    3818:	f9 89       	ldd	r31, Y+17	; 0x11
    381a:	80 81       	ld	r24, Z
    381c:	85 fd       	sbrc	r24, 5
    381e:	26 c0       	rjmp	.+76     	; 0x386c <_ZN14HardwareSerial5writeEh+0x70>
    3820:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3822:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3824:	10 e0       	ldi	r17, 0x00	; 0
    3826:	0f 5f       	subi	r16, 0xFF	; 255
    3828:	1f 4f       	sbci	r17, 0xFF	; 255
    382a:	0f 73       	andi	r16, 0x3F	; 63
    382c:	11 27       	eor	r17, r17
    382e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3830:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3832:	e8 12       	cpse	r14, r24
    3834:	0c c0       	rjmp	.+24     	; 0x384e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3836:	0f b6       	in	r0, 0x3f	; 63
    3838:	07 fc       	sbrc	r0, 7
    383a:	fa cf       	rjmp	.-12     	; 0x3830 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    383c:	e8 89       	ldd	r30, Y+16	; 0x10
    383e:	f9 89       	ldd	r31, Y+17	; 0x11
    3840:	80 81       	ld	r24, Z
    3842:	85 ff       	sbrs	r24, 5
    3844:	f5 cf       	rjmp	.-22     	; 0x3830 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3846:	ce 01       	movw	r24, r28
    3848:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    384c:	f1 cf       	rjmp	.-30     	; 0x3830 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    384e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3850:	fe 01       	movw	r30, r28
    3852:	e8 0f       	add	r30, r24
    3854:	f1 1d       	adc	r31, r1
    3856:	e3 5a       	subi	r30, 0xA3	; 163
    3858:	ff 4f       	sbci	r31, 0xFF	; 255
    385a:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    385c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    385e:	f8 94       	cli
    _tx_buffer_head = i;
    3860:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3862:	ea 89       	ldd	r30, Y+18	; 0x12
    3864:	fb 89       	ldd	r31, Y+19	; 0x13
    3866:	80 81       	ld	r24, Z
    3868:	80 62       	ori	r24, 0x20	; 32
    386a:	0a c0       	rjmp	.+20     	; 0x3880 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    386c:	9f b7       	in	r25, 0x3f	; 63
    386e:	f8 94       	cli
      *_udr = c;
    3870:	ee 89       	ldd	r30, Y+22	; 0x16
    3872:	ff 89       	ldd	r31, Y+23	; 0x17
    3874:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3876:	e8 89       	ldd	r30, Y+16	; 0x10
    3878:	f9 89       	ldd	r31, Y+17	; 0x11
    387a:	80 81       	ld	r24, Z
    387c:	83 70       	andi	r24, 0x03	; 3
    387e:	80 64       	ori	r24, 0x40	; 64
    3880:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3882:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3884:	81 e0       	ldi	r24, 0x01	; 1
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	df 91       	pop	r29
    388a:	cf 91       	pop	r28
    388c:	1f 91       	pop	r17
    388e:	0f 91       	pop	r16
    3890:	ff 90       	pop	r15
    3892:	ef 90       	pop	r14
    3894:	08 95       	ret

00003896 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3896:	cf 93       	push	r28
    3898:	df 93       	push	r29
    389a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    389c:	88 8d       	ldd	r24, Y+24	; 0x18
    389e:	88 23       	and	r24, r24
    38a0:	c9 f0       	breq	.+50     	; 0x38d4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    38a2:	ea 89       	ldd	r30, Y+18	; 0x12
    38a4:	fb 89       	ldd	r31, Y+19	; 0x13
    38a6:	80 81       	ld	r24, Z
    38a8:	85 fd       	sbrc	r24, 5
    38aa:	05 c0       	rjmp	.+10     	; 0x38b6 <_ZN14HardwareSerial5flushEv+0x20>
    38ac:	a8 89       	ldd	r26, Y+16	; 0x10
    38ae:	b9 89       	ldd	r27, Y+17	; 0x11
    38b0:	8c 91       	ld	r24, X
    38b2:	86 fd       	sbrc	r24, 6
    38b4:	0f c0       	rjmp	.+30     	; 0x38d4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	07 fc       	sbrc	r0, 7
    38ba:	f5 cf       	rjmp	.-22     	; 0x38a6 <_ZN14HardwareSerial5flushEv+0x10>
    38bc:	80 81       	ld	r24, Z
    38be:	85 ff       	sbrs	r24, 5
    38c0:	f2 cf       	rjmp	.-28     	; 0x38a6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    38c2:	a8 89       	ldd	r26, Y+16	; 0x10
    38c4:	b9 89       	ldd	r27, Y+17	; 0x11
    38c6:	8c 91       	ld	r24, X
    38c8:	85 ff       	sbrs	r24, 5
    38ca:	ed cf       	rjmp	.-38     	; 0x38a6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    38cc:	ce 01       	movw	r24, r28
    38ce:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    38d2:	e7 cf       	rjmp	.-50     	; 0x38a2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    38d4:	df 91       	pop	r29
    38d6:	cf 91       	pop	r28
    38d8:	08 95       	ret

000038da <__vector_18>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    38da:	1f 92       	push	r1
    38dc:	0f 92       	push	r0
    38de:	0f b6       	in	r0, 0x3f	; 63
    38e0:	0f 92       	push	r0
    38e2:	11 24       	eor	r1, r1
    38e4:	2f 93       	push	r18
    38e6:	8f 93       	push	r24
    38e8:	9f 93       	push	r25
    38ea:	ef 93       	push	r30
    38ec:	ff 93       	push	r31
    38ee:	e0 91 a4 04 	lds	r30, 0x04A4	; 0x8004a4 <Serial+0x10>
    38f2:	f0 91 a5 04 	lds	r31, 0x04A5	; 0x8004a5 <Serial+0x11>
    38f6:	80 81       	ld	r24, Z
    38f8:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <Serial+0x16>
    38fc:	f0 91 ab 04 	lds	r31, 0x04AB	; 0x8004ab <Serial+0x17>
    3900:	82 fd       	sbrc	r24, 2
    3902:	12 c0       	rjmp	.+36     	; 0x3928 <__vector_18+0x4e>
    3904:	90 81       	ld	r25, Z
    3906:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <Serial+0x19>
    390a:	8f 5f       	subi	r24, 0xFF	; 255
    390c:	8f 73       	andi	r24, 0x3F	; 63
    390e:	20 91 ae 04 	lds	r18, 0x04AE	; 0x8004ae <Serial+0x1a>
    3912:	82 17       	cp	r24, r18
    3914:	51 f0       	breq	.+20     	; 0x392a <__vector_18+0x50>
    3916:	e0 91 ad 04 	lds	r30, 0x04AD	; 0x8004ad <Serial+0x19>
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	ec 56       	subi	r30, 0x6C	; 108
    391e:	fb 4f       	sbci	r31, 0xFB	; 251
    3920:	95 8f       	std	Z+29, r25	; 0x1d
    3922:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <Serial+0x19>
    3926:	01 c0       	rjmp	.+2      	; 0x392a <__vector_18+0x50>
    3928:	80 81       	ld	r24, Z
    392a:	ff 91       	pop	r31
    392c:	ef 91       	pop	r30
    392e:	9f 91       	pop	r25
    3930:	8f 91       	pop	r24
    3932:	2f 91       	pop	r18
    3934:	0f 90       	pop	r0
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	0f 90       	pop	r0
    393a:	1f 90       	pop	r1
    393c:	18 95       	reti

0000393e <__vector_19>:
    393e:	1f 92       	push	r1
    3940:	0f 92       	push	r0
    3942:	0f b6       	in	r0, 0x3f	; 63
    3944:	0f 92       	push	r0
    3946:	11 24       	eor	r1, r1
    3948:	2f 93       	push	r18
    394a:	3f 93       	push	r19
    394c:	4f 93       	push	r20
    394e:	5f 93       	push	r21
    3950:	6f 93       	push	r22
    3952:	7f 93       	push	r23
    3954:	8f 93       	push	r24
    3956:	9f 93       	push	r25
    3958:	af 93       	push	r26
    395a:	bf 93       	push	r27
    395c:	ef 93       	push	r30
    395e:	ff 93       	push	r31
    3960:	84 e9       	ldi	r24, 0x94	; 148
    3962:	94 e0       	ldi	r25, 0x04	; 4
    3964:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3968:	ff 91       	pop	r31
    396a:	ef 91       	pop	r30
    396c:	bf 91       	pop	r27
    396e:	af 91       	pop	r26
    3970:	9f 91       	pop	r25
    3972:	8f 91       	pop	r24
    3974:	7f 91       	pop	r23
    3976:	6f 91       	pop	r22
    3978:	5f 91       	pop	r21
    397a:	4f 91       	pop	r20
    397c:	3f 91       	pop	r19
    397e:	2f 91       	pop	r18
    3980:	0f 90       	pop	r0
    3982:	0f be       	out	0x3f, r0	; 63
    3984:	0f 90       	pop	r0
    3986:	1f 90       	pop	r1
    3988:	18 95       	reti

0000398a <_GLOBAL__sub_I___vector_18>:
  public:
    Print() : write_error(0) {}
    398a:	e4 e9       	ldi	r30, 0x94	; 148
    398c:	f4 e0       	ldi	r31, 0x04	; 4
    398e:	13 82       	std	Z+3, r1	; 0x03
    3990:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3992:	88 ee       	ldi	r24, 0xE8	; 232
    3994:	93 e0       	ldi	r25, 0x03	; 3
    3996:	a0 e0       	ldi	r26, 0x00	; 0
    3998:	b0 e0       	ldi	r27, 0x00	; 0
    399a:	84 83       	std	Z+4, r24	; 0x04
    399c:	95 83       	std	Z+5, r25	; 0x05
    399e:	a6 83       	std	Z+6, r26	; 0x06
    39a0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    39a2:	83 ed       	ldi	r24, 0xD3	; 211
    39a4:	91 e0       	ldi	r25, 0x01	; 1
    39a6:	91 83       	std	Z+1, r25	; 0x01
    39a8:	80 83       	st	Z, r24
    39aa:	85 ec       	ldi	r24, 0xC5	; 197
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	95 87       	std	Z+13, r25	; 0x0d
    39b0:	84 87       	std	Z+12, r24	; 0x0c
    39b2:	84 ec       	ldi	r24, 0xC4	; 196
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	97 87       	std	Z+15, r25	; 0x0f
    39b8:	86 87       	std	Z+14, r24	; 0x0e
    39ba:	80 ec       	ldi	r24, 0xC0	; 192
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	91 8b       	std	Z+17, r25	; 0x11
    39c0:	80 8b       	std	Z+16, r24	; 0x10
    39c2:	81 ec       	ldi	r24, 0xC1	; 193
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	93 8b       	std	Z+19, r25	; 0x13
    39c8:	82 8b       	std	Z+18, r24	; 0x12
    39ca:	82 ec       	ldi	r24, 0xC2	; 194
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	95 8b       	std	Z+21, r25	; 0x15
    39d0:	84 8b       	std	Z+20, r24	; 0x14
    39d2:	86 ec       	ldi	r24, 0xC6	; 198
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	97 8b       	std	Z+23, r25	; 0x17
    39d8:	86 8b       	std	Z+22, r24	; 0x16
    39da:	11 8e       	std	Z+25, r1	; 0x19
    39dc:	12 8e       	std	Z+26, r1	; 0x1a
    39de:	13 8e       	std	Z+27, r1	; 0x1b
    39e0:	14 8e       	std	Z+28, r1	; 0x1c
    39e2:	08 95       	ret

000039e4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    39e4:	cf 92       	push	r12
    39e6:	df 92       	push	r13
    39e8:	ef 92       	push	r14
    39ea:	ff 92       	push	r15
    39ec:	0f 93       	push	r16
    39ee:	1f 93       	push	r17
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	6c 01       	movw	r12, r24
    39f6:	7a 01       	movw	r14, r20
    39f8:	8b 01       	movw	r16, r22
  size_t n = 0;
    39fa:	c0 e0       	ldi	r28, 0x00	; 0
    39fc:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    39fe:	ce 15       	cp	r28, r14
    3a00:	df 05       	cpc	r29, r15
    3a02:	81 f0       	breq	.+32     	; 0x3a24 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
    3a04:	d8 01       	movw	r26, r16
    3a06:	6d 91       	ld	r22, X+
    3a08:	8d 01       	movw	r16, r26
    3a0a:	d6 01       	movw	r26, r12
    3a0c:	ed 91       	ld	r30, X+
    3a0e:	fc 91       	ld	r31, X
    3a10:	01 90       	ld	r0, Z+
    3a12:	f0 81       	ld	r31, Z
    3a14:	e0 2d       	mov	r30, r0
    3a16:	c6 01       	movw	r24, r12
    3a18:	09 95       	icall
    3a1a:	89 2b       	or	r24, r25
    3a1c:	11 f0       	breq	.+4      	; 0x3a22 <_ZN5Print5writeEPKhj+0x3e>
    3a1e:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    3a20:	ee cf       	rjmp	.-36     	; 0x39fe <_ZN5Print5writeEPKhj+0x1a>
    3a22:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    3a24:	c7 01       	movw	r24, r14
    3a26:	df 91       	pop	r29
    3a28:	cf 91       	pop	r28
    3a2a:	1f 91       	pop	r17
    3a2c:	0f 91       	pop	r16
    3a2e:	ff 90       	pop	r15
    3a30:	ef 90       	pop	r14
    3a32:	df 90       	pop	r13
    3a34:	cf 90       	pop	r12
    3a36:	08 95       	ret

00003a38 <__mulsi3>:
    3a38:	db 01       	movw	r26, r22
    3a3a:	8f 93       	push	r24
    3a3c:	9f 93       	push	r25
    3a3e:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__muluhisi3>
    3a42:	bf 91       	pop	r27
    3a44:	af 91       	pop	r26
    3a46:	a2 9f       	mul	r26, r18
    3a48:	80 0d       	add	r24, r0
    3a4a:	91 1d       	adc	r25, r1
    3a4c:	a3 9f       	mul	r26, r19
    3a4e:	90 0d       	add	r25, r0
    3a50:	b2 9f       	mul	r27, r18
    3a52:	90 0d       	add	r25, r0
    3a54:	11 24       	eor	r1, r1
    3a56:	08 95       	ret

00003a58 <__udivmodsi4>:
    3a58:	a1 e2       	ldi	r26, 0x21	; 33
    3a5a:	1a 2e       	mov	r1, r26
    3a5c:	aa 1b       	sub	r26, r26
    3a5e:	bb 1b       	sub	r27, r27
    3a60:	fd 01       	movw	r30, r26
    3a62:	0d c0       	rjmp	.+26     	; 0x3a7e <__udivmodsi4_ep>

00003a64 <__udivmodsi4_loop>:
    3a64:	aa 1f       	adc	r26, r26
    3a66:	bb 1f       	adc	r27, r27
    3a68:	ee 1f       	adc	r30, r30
    3a6a:	ff 1f       	adc	r31, r31
    3a6c:	a2 17       	cp	r26, r18
    3a6e:	b3 07       	cpc	r27, r19
    3a70:	e4 07       	cpc	r30, r20
    3a72:	f5 07       	cpc	r31, r21
    3a74:	20 f0       	brcs	.+8      	; 0x3a7e <__udivmodsi4_ep>
    3a76:	a2 1b       	sub	r26, r18
    3a78:	b3 0b       	sbc	r27, r19
    3a7a:	e4 0b       	sbc	r30, r20
    3a7c:	f5 0b       	sbc	r31, r21

00003a7e <__udivmodsi4_ep>:
    3a7e:	66 1f       	adc	r22, r22
    3a80:	77 1f       	adc	r23, r23
    3a82:	88 1f       	adc	r24, r24
    3a84:	99 1f       	adc	r25, r25
    3a86:	1a 94       	dec	r1
    3a88:	69 f7       	brne	.-38     	; 0x3a64 <__udivmodsi4_loop>
    3a8a:	60 95       	com	r22
    3a8c:	70 95       	com	r23
    3a8e:	80 95       	com	r24
    3a90:	90 95       	com	r25
    3a92:	9b 01       	movw	r18, r22
    3a94:	ac 01       	movw	r20, r24
    3a96:	bd 01       	movw	r22, r26
    3a98:	cf 01       	movw	r24, r30
    3a9a:	08 95       	ret

00003a9c <__divmodsi4>:
    3a9c:	05 2e       	mov	r0, r21
    3a9e:	97 fb       	bst	r25, 7
    3aa0:	1e f4       	brtc	.+6      	; 0x3aa8 <__divmodsi4+0xc>
    3aa2:	00 94       	com	r0
    3aa4:	0e 94 65 1d 	call	0x3aca	; 0x3aca <__negsi2>
    3aa8:	57 fd       	sbrc	r21, 7
    3aaa:	07 d0       	rcall	.+14     	; 0x3aba <__divmodsi4_neg2>
    3aac:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <__udivmodsi4>
    3ab0:	07 fc       	sbrc	r0, 7
    3ab2:	03 d0       	rcall	.+6      	; 0x3aba <__divmodsi4_neg2>
    3ab4:	4e f4       	brtc	.+18     	; 0x3ac8 <__divmodsi4_exit>
    3ab6:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__negsi2>

00003aba <__divmodsi4_neg2>:
    3aba:	50 95       	com	r21
    3abc:	40 95       	com	r20
    3abe:	30 95       	com	r19
    3ac0:	21 95       	neg	r18
    3ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ac4:	4f 4f       	sbci	r20, 0xFF	; 255
    3ac6:	5f 4f       	sbci	r21, 0xFF	; 255

00003ac8 <__divmodsi4_exit>:
    3ac8:	08 95       	ret

00003aca <__negsi2>:
    3aca:	90 95       	com	r25
    3acc:	80 95       	com	r24
    3ace:	70 95       	com	r23
    3ad0:	61 95       	neg	r22
    3ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad8:	08 95       	ret

00003ada <__muluhisi3>:
    3ada:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__umulhisi3>
    3ade:	a5 9f       	mul	r26, r21
    3ae0:	90 0d       	add	r25, r0
    3ae2:	b4 9f       	mul	r27, r20
    3ae4:	90 0d       	add	r25, r0
    3ae6:	a4 9f       	mul	r26, r20
    3ae8:	80 0d       	add	r24, r0
    3aea:	91 1d       	adc	r25, r1
    3aec:	11 24       	eor	r1, r1
    3aee:	08 95       	ret

00003af0 <__tablejump2__>:
    3af0:	ee 0f       	add	r30, r30
    3af2:	ff 1f       	adc	r31, r31
    3af4:	05 90       	lpm	r0, Z+
    3af6:	f4 91       	lpm	r31, Z
    3af8:	e0 2d       	mov	r30, r0
    3afa:	09 94       	ijmp

00003afc <__umulhisi3>:
    3afc:	a2 9f       	mul	r26, r18
    3afe:	b0 01       	movw	r22, r0
    3b00:	b3 9f       	mul	r27, r19
    3b02:	c0 01       	movw	r24, r0
    3b04:	a3 9f       	mul	r26, r19
    3b06:	70 0d       	add	r23, r0
    3b08:	81 1d       	adc	r24, r1
    3b0a:	11 24       	eor	r1, r1
    3b0c:	91 1d       	adc	r25, r1
    3b0e:	b2 9f       	mul	r27, r18
    3b10:	70 0d       	add	r23, r0
    3b12:	81 1d       	adc	r24, r1
    3b14:	11 24       	eor	r1, r1
    3b16:	91 1d       	adc	r25, r1
    3b18:	08 95       	ret

00003b1a <malloc>:
    3b1a:	0f 93       	push	r16
    3b1c:	1f 93       	push	r17
    3b1e:	cf 93       	push	r28
    3b20:	df 93       	push	r29
    3b22:	82 30       	cpi	r24, 0x02	; 2
    3b24:	91 05       	cpc	r25, r1
    3b26:	10 f4       	brcc	.+4      	; 0x3b2c <malloc+0x12>
    3b28:	82 e0       	ldi	r24, 0x02	; 2
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	e0 91 33 05 	lds	r30, 0x0533	; 0x800533 <__flp>
    3b30:	f0 91 34 05 	lds	r31, 0x0534	; 0x800534 <__flp+0x1>
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	a0 e0       	ldi	r26, 0x00	; 0
    3b3a:	b0 e0       	ldi	r27, 0x00	; 0
    3b3c:	30 97       	sbiw	r30, 0x00	; 0
    3b3e:	19 f1       	breq	.+70     	; 0x3b86 <malloc+0x6c>
    3b40:	40 81       	ld	r20, Z
    3b42:	51 81       	ldd	r21, Z+1	; 0x01
    3b44:	02 81       	ldd	r16, Z+2	; 0x02
    3b46:	13 81       	ldd	r17, Z+3	; 0x03
    3b48:	48 17       	cp	r20, r24
    3b4a:	59 07       	cpc	r21, r25
    3b4c:	c8 f0       	brcs	.+50     	; 0x3b80 <malloc+0x66>
    3b4e:	84 17       	cp	r24, r20
    3b50:	95 07       	cpc	r25, r21
    3b52:	69 f4       	brne	.+26     	; 0x3b6e <malloc+0x54>
    3b54:	10 97       	sbiw	r26, 0x00	; 0
    3b56:	31 f0       	breq	.+12     	; 0x3b64 <malloc+0x4a>
    3b58:	12 96       	adiw	r26, 0x02	; 2
    3b5a:	0c 93       	st	X, r16
    3b5c:	12 97       	sbiw	r26, 0x02	; 2
    3b5e:	13 96       	adiw	r26, 0x03	; 3
    3b60:	1c 93       	st	X, r17
    3b62:	27 c0       	rjmp	.+78     	; 0x3bb2 <malloc+0x98>
    3b64:	00 93 33 05 	sts	0x0533, r16	; 0x800533 <__flp>
    3b68:	10 93 34 05 	sts	0x0534, r17	; 0x800534 <__flp+0x1>
    3b6c:	22 c0       	rjmp	.+68     	; 0x3bb2 <malloc+0x98>
    3b6e:	21 15       	cp	r18, r1
    3b70:	31 05       	cpc	r19, r1
    3b72:	19 f0       	breq	.+6      	; 0x3b7a <malloc+0x60>
    3b74:	42 17       	cp	r20, r18
    3b76:	53 07       	cpc	r21, r19
    3b78:	18 f4       	brcc	.+6      	; 0x3b80 <malloc+0x66>
    3b7a:	9a 01       	movw	r18, r20
    3b7c:	bd 01       	movw	r22, r26
    3b7e:	ef 01       	movw	r28, r30
    3b80:	df 01       	movw	r26, r30
    3b82:	f8 01       	movw	r30, r16
    3b84:	db cf       	rjmp	.-74     	; 0x3b3c <malloc+0x22>
    3b86:	21 15       	cp	r18, r1
    3b88:	31 05       	cpc	r19, r1
    3b8a:	f9 f0       	breq	.+62     	; 0x3bca <malloc+0xb0>
    3b8c:	28 1b       	sub	r18, r24
    3b8e:	39 0b       	sbc	r19, r25
    3b90:	24 30       	cpi	r18, 0x04	; 4
    3b92:	31 05       	cpc	r19, r1
    3b94:	80 f4       	brcc	.+32     	; 0x3bb6 <malloc+0x9c>
    3b96:	8a 81       	ldd	r24, Y+2	; 0x02
    3b98:	9b 81       	ldd	r25, Y+3	; 0x03
    3b9a:	61 15       	cp	r22, r1
    3b9c:	71 05       	cpc	r23, r1
    3b9e:	21 f0       	breq	.+8      	; 0x3ba8 <malloc+0x8e>
    3ba0:	fb 01       	movw	r30, r22
    3ba2:	93 83       	std	Z+3, r25	; 0x03
    3ba4:	82 83       	std	Z+2, r24	; 0x02
    3ba6:	04 c0       	rjmp	.+8      	; 0x3bb0 <malloc+0x96>
    3ba8:	90 93 34 05 	sts	0x0534, r25	; 0x800534 <__flp+0x1>
    3bac:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <__flp>
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	32 96       	adiw	r30, 0x02	; 2
    3bb4:	44 c0       	rjmp	.+136    	; 0x3c3e <malloc+0x124>
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	e2 0f       	add	r30, r18
    3bba:	f3 1f       	adc	r31, r19
    3bbc:	81 93       	st	Z+, r24
    3bbe:	91 93       	st	Z+, r25
    3bc0:	22 50       	subi	r18, 0x02	; 2
    3bc2:	31 09       	sbc	r19, r1
    3bc4:	39 83       	std	Y+1, r19	; 0x01
    3bc6:	28 83       	st	Y, r18
    3bc8:	3a c0       	rjmp	.+116    	; 0x3c3e <malloc+0x124>
    3bca:	20 91 31 05 	lds	r18, 0x0531	; 0x800531 <__brkval>
    3bce:	30 91 32 05 	lds	r19, 0x0532	; 0x800532 <__brkval+0x1>
    3bd2:	23 2b       	or	r18, r19
    3bd4:	41 f4       	brne	.+16     	; 0x3be6 <malloc+0xcc>
    3bd6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3bda:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3bde:	30 93 32 05 	sts	0x0532, r19	; 0x800532 <__brkval+0x1>
    3be2:	20 93 31 05 	sts	0x0531, r18	; 0x800531 <__brkval>
    3be6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3bea:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3bee:	21 15       	cp	r18, r1
    3bf0:	31 05       	cpc	r19, r1
    3bf2:	41 f4       	brne	.+16     	; 0x3c04 <malloc+0xea>
    3bf4:	2d b7       	in	r18, 0x3d	; 61
    3bf6:	3e b7       	in	r19, 0x3e	; 62
    3bf8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3bfc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3c00:	24 1b       	sub	r18, r20
    3c02:	35 0b       	sbc	r19, r21
    3c04:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <__brkval>
    3c08:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <__brkval+0x1>
    3c0c:	e2 17       	cp	r30, r18
    3c0e:	f3 07       	cpc	r31, r19
    3c10:	a0 f4       	brcc	.+40     	; 0x3c3a <malloc+0x120>
    3c12:	2e 1b       	sub	r18, r30
    3c14:	3f 0b       	sbc	r19, r31
    3c16:	28 17       	cp	r18, r24
    3c18:	39 07       	cpc	r19, r25
    3c1a:	78 f0       	brcs	.+30     	; 0x3c3a <malloc+0x120>
    3c1c:	ac 01       	movw	r20, r24
    3c1e:	4e 5f       	subi	r20, 0xFE	; 254
    3c20:	5f 4f       	sbci	r21, 0xFF	; 255
    3c22:	24 17       	cp	r18, r20
    3c24:	35 07       	cpc	r19, r21
    3c26:	48 f0       	brcs	.+18     	; 0x3c3a <malloc+0x120>
    3c28:	4e 0f       	add	r20, r30
    3c2a:	5f 1f       	adc	r21, r31
    3c2c:	50 93 32 05 	sts	0x0532, r21	; 0x800532 <__brkval+0x1>
    3c30:	40 93 31 05 	sts	0x0531, r20	; 0x800531 <__brkval>
    3c34:	81 93       	st	Z+, r24
    3c36:	91 93       	st	Z+, r25
    3c38:	02 c0       	rjmp	.+4      	; 0x3c3e <malloc+0x124>
    3c3a:	e0 e0       	ldi	r30, 0x00	; 0
    3c3c:	f0 e0       	ldi	r31, 0x00	; 0
    3c3e:	cf 01       	movw	r24, r30
    3c40:	df 91       	pop	r29
    3c42:	cf 91       	pop	r28
    3c44:	1f 91       	pop	r17
    3c46:	0f 91       	pop	r16
    3c48:	08 95       	ret

00003c4a <free>:
    3c4a:	cf 93       	push	r28
    3c4c:	df 93       	push	r29
    3c4e:	00 97       	sbiw	r24, 0x00	; 0
    3c50:	09 f4       	brne	.+2      	; 0x3c54 <free+0xa>
    3c52:	81 c0       	rjmp	.+258    	; 0x3d56 <free+0x10c>
    3c54:	fc 01       	movw	r30, r24
    3c56:	32 97       	sbiw	r30, 0x02	; 2
    3c58:	13 82       	std	Z+3, r1	; 0x03
    3c5a:	12 82       	std	Z+2, r1	; 0x02
    3c5c:	a0 91 33 05 	lds	r26, 0x0533	; 0x800533 <__flp>
    3c60:	b0 91 34 05 	lds	r27, 0x0534	; 0x800534 <__flp+0x1>
    3c64:	10 97       	sbiw	r26, 0x00	; 0
    3c66:	81 f4       	brne	.+32     	; 0x3c88 <free+0x3e>
    3c68:	20 81       	ld	r18, Z
    3c6a:	31 81       	ldd	r19, Z+1	; 0x01
    3c6c:	82 0f       	add	r24, r18
    3c6e:	93 1f       	adc	r25, r19
    3c70:	20 91 31 05 	lds	r18, 0x0531	; 0x800531 <__brkval>
    3c74:	30 91 32 05 	lds	r19, 0x0532	; 0x800532 <__brkval+0x1>
    3c78:	28 17       	cp	r18, r24
    3c7a:	39 07       	cpc	r19, r25
    3c7c:	51 f5       	brne	.+84     	; 0x3cd2 <free+0x88>
    3c7e:	f0 93 32 05 	sts	0x0532, r31	; 0x800532 <__brkval+0x1>
    3c82:	e0 93 31 05 	sts	0x0531, r30	; 0x800531 <__brkval>
    3c86:	67 c0       	rjmp	.+206    	; 0x3d56 <free+0x10c>
    3c88:	ed 01       	movw	r28, r26
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	ce 17       	cp	r28, r30
    3c90:	df 07       	cpc	r29, r31
    3c92:	40 f4       	brcc	.+16     	; 0x3ca4 <free+0x5a>
    3c94:	4a 81       	ldd	r20, Y+2	; 0x02
    3c96:	5b 81       	ldd	r21, Y+3	; 0x03
    3c98:	9e 01       	movw	r18, r28
    3c9a:	41 15       	cp	r20, r1
    3c9c:	51 05       	cpc	r21, r1
    3c9e:	f1 f0       	breq	.+60     	; 0x3cdc <free+0x92>
    3ca0:	ea 01       	movw	r28, r20
    3ca2:	f5 cf       	rjmp	.-22     	; 0x3c8e <free+0x44>
    3ca4:	d3 83       	std	Z+3, r29	; 0x03
    3ca6:	c2 83       	std	Z+2, r28	; 0x02
    3ca8:	40 81       	ld	r20, Z
    3caa:	51 81       	ldd	r21, Z+1	; 0x01
    3cac:	84 0f       	add	r24, r20
    3cae:	95 1f       	adc	r25, r21
    3cb0:	c8 17       	cp	r28, r24
    3cb2:	d9 07       	cpc	r29, r25
    3cb4:	59 f4       	brne	.+22     	; 0x3ccc <free+0x82>
    3cb6:	88 81       	ld	r24, Y
    3cb8:	99 81       	ldd	r25, Y+1	; 0x01
    3cba:	84 0f       	add	r24, r20
    3cbc:	95 1f       	adc	r25, r21
    3cbe:	02 96       	adiw	r24, 0x02	; 2
    3cc0:	91 83       	std	Z+1, r25	; 0x01
    3cc2:	80 83       	st	Z, r24
    3cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc8:	93 83       	std	Z+3, r25	; 0x03
    3cca:	82 83       	std	Z+2, r24	; 0x02
    3ccc:	21 15       	cp	r18, r1
    3cce:	31 05       	cpc	r19, r1
    3cd0:	29 f4       	brne	.+10     	; 0x3cdc <free+0x92>
    3cd2:	f0 93 34 05 	sts	0x0534, r31	; 0x800534 <__flp+0x1>
    3cd6:	e0 93 33 05 	sts	0x0533, r30	; 0x800533 <__flp>
    3cda:	3d c0       	rjmp	.+122    	; 0x3d56 <free+0x10c>
    3cdc:	e9 01       	movw	r28, r18
    3cde:	fb 83       	std	Y+3, r31	; 0x03
    3ce0:	ea 83       	std	Y+2, r30	; 0x02
    3ce2:	49 91       	ld	r20, Y+
    3ce4:	59 91       	ld	r21, Y+
    3ce6:	c4 0f       	add	r28, r20
    3ce8:	d5 1f       	adc	r29, r21
    3cea:	ec 17       	cp	r30, r28
    3cec:	fd 07       	cpc	r31, r29
    3cee:	61 f4       	brne	.+24     	; 0x3d08 <free+0xbe>
    3cf0:	80 81       	ld	r24, Z
    3cf2:	91 81       	ldd	r25, Z+1	; 0x01
    3cf4:	84 0f       	add	r24, r20
    3cf6:	95 1f       	adc	r25, r21
    3cf8:	02 96       	adiw	r24, 0x02	; 2
    3cfa:	e9 01       	movw	r28, r18
    3cfc:	99 83       	std	Y+1, r25	; 0x01
    3cfe:	88 83       	st	Y, r24
    3d00:	82 81       	ldd	r24, Z+2	; 0x02
    3d02:	93 81       	ldd	r25, Z+3	; 0x03
    3d04:	9b 83       	std	Y+3, r25	; 0x03
    3d06:	8a 83       	std	Y+2, r24	; 0x02
    3d08:	e0 e0       	ldi	r30, 0x00	; 0
    3d0a:	f0 e0       	ldi	r31, 0x00	; 0
    3d0c:	12 96       	adiw	r26, 0x02	; 2
    3d0e:	8d 91       	ld	r24, X+
    3d10:	9c 91       	ld	r25, X
    3d12:	13 97       	sbiw	r26, 0x03	; 3
    3d14:	00 97       	sbiw	r24, 0x00	; 0
    3d16:	19 f0       	breq	.+6      	; 0x3d1e <free+0xd4>
    3d18:	fd 01       	movw	r30, r26
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	f7 cf       	rjmp	.-18     	; 0x3d0c <free+0xc2>
    3d1e:	8d 91       	ld	r24, X+
    3d20:	9c 91       	ld	r25, X
    3d22:	11 97       	sbiw	r26, 0x01	; 1
    3d24:	9d 01       	movw	r18, r26
    3d26:	2e 5f       	subi	r18, 0xFE	; 254
    3d28:	3f 4f       	sbci	r19, 0xFF	; 255
    3d2a:	82 0f       	add	r24, r18
    3d2c:	93 1f       	adc	r25, r19
    3d2e:	20 91 31 05 	lds	r18, 0x0531	; 0x800531 <__brkval>
    3d32:	30 91 32 05 	lds	r19, 0x0532	; 0x800532 <__brkval+0x1>
    3d36:	28 17       	cp	r18, r24
    3d38:	39 07       	cpc	r19, r25
    3d3a:	69 f4       	brne	.+26     	; 0x3d56 <free+0x10c>
    3d3c:	30 97       	sbiw	r30, 0x00	; 0
    3d3e:	29 f4       	brne	.+10     	; 0x3d4a <free+0x100>
    3d40:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <__flp+0x1>
    3d44:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <__flp>
    3d48:	02 c0       	rjmp	.+4      	; 0x3d4e <free+0x104>
    3d4a:	13 82       	std	Z+3, r1	; 0x03
    3d4c:	12 82       	std	Z+2, r1	; 0x02
    3d4e:	b0 93 32 05 	sts	0x0532, r27	; 0x800532 <__brkval+0x1>
    3d52:	a0 93 31 05 	sts	0x0531, r26	; 0x800531 <__brkval>
    3d56:	df 91       	pop	r29
    3d58:	cf 91       	pop	r28
    3d5a:	08 95       	ret

00003d5c <realloc>:
    3d5c:	a0 e0       	ldi	r26, 0x00	; 0
    3d5e:	b0 e0       	ldi	r27, 0x00	; 0
    3d60:	e4 eb       	ldi	r30, 0xB4	; 180
    3d62:	fe e1       	ldi	r31, 0x1E	; 30
    3d64:	0c 94 20 20 	jmp	0x4040	; 0x4040 <__prologue_saves__+0x8>
    3d68:	ec 01       	movw	r28, r24
    3d6a:	00 97       	sbiw	r24, 0x00	; 0
    3d6c:	21 f4       	brne	.+8      	; 0x3d76 <realloc+0x1a>
    3d6e:	cb 01       	movw	r24, r22
    3d70:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <malloc>
    3d74:	b4 c0       	rjmp	.+360    	; 0x3ede <realloc+0x182>
    3d76:	fc 01       	movw	r30, r24
    3d78:	e6 0f       	add	r30, r22
    3d7a:	f7 1f       	adc	r31, r23
    3d7c:	9c 01       	movw	r18, r24
    3d7e:	22 50       	subi	r18, 0x02	; 2
    3d80:	31 09       	sbc	r19, r1
    3d82:	e2 17       	cp	r30, r18
    3d84:	f3 07       	cpc	r31, r19
    3d86:	08 f4       	brcc	.+2      	; 0x3d8a <realloc+0x2e>
    3d88:	a8 c0       	rjmp	.+336    	; 0x3eda <realloc+0x17e>
    3d8a:	d9 01       	movw	r26, r18
    3d8c:	0d 91       	ld	r16, X+
    3d8e:	1c 91       	ld	r17, X
    3d90:	11 97       	sbiw	r26, 0x01	; 1
    3d92:	06 17       	cp	r16, r22
    3d94:	17 07       	cpc	r17, r23
    3d96:	b0 f0       	brcs	.+44     	; 0x3dc4 <realloc+0x68>
    3d98:	05 30       	cpi	r16, 0x05	; 5
    3d9a:	11 05       	cpc	r17, r1
    3d9c:	08 f4       	brcc	.+2      	; 0x3da0 <realloc+0x44>
    3d9e:	9b c0       	rjmp	.+310    	; 0x3ed6 <realloc+0x17a>
    3da0:	c8 01       	movw	r24, r16
    3da2:	04 97       	sbiw	r24, 0x04	; 4
    3da4:	86 17       	cp	r24, r22
    3da6:	97 07       	cpc	r25, r23
    3da8:	08 f4       	brcc	.+2      	; 0x3dac <realloc+0x50>
    3daa:	95 c0       	rjmp	.+298    	; 0x3ed6 <realloc+0x17a>
    3dac:	02 50       	subi	r16, 0x02	; 2
    3dae:	11 09       	sbc	r17, r1
    3db0:	06 1b       	sub	r16, r22
    3db2:	17 0b       	sbc	r17, r23
    3db4:	01 93       	st	Z+, r16
    3db6:	11 93       	st	Z+, r17
    3db8:	6d 93       	st	X+, r22
    3dba:	7c 93       	st	X, r23
    3dbc:	cf 01       	movw	r24, r30
    3dbe:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <free>
    3dc2:	89 c0       	rjmp	.+274    	; 0x3ed6 <realloc+0x17a>
    3dc4:	5b 01       	movw	r10, r22
    3dc6:	a0 1a       	sub	r10, r16
    3dc8:	b1 0a       	sbc	r11, r17
    3dca:	4c 01       	movw	r8, r24
    3dcc:	80 0e       	add	r8, r16
    3dce:	91 1e       	adc	r9, r17
    3dd0:	a0 91 33 05 	lds	r26, 0x0533	; 0x800533 <__flp>
    3dd4:	b0 91 34 05 	lds	r27, 0x0534	; 0x800534 <__flp+0x1>
    3dd8:	61 2c       	mov	r6, r1
    3dda:	71 2c       	mov	r7, r1
    3ddc:	e1 2c       	mov	r14, r1
    3dde:	f1 2c       	mov	r15, r1
    3de0:	10 97       	sbiw	r26, 0x00	; 0
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <realloc+0x8a>
    3de4:	46 c0       	rjmp	.+140    	; 0x3e72 <realloc+0x116>
    3de6:	8d 91       	ld	r24, X+
    3de8:	9c 91       	ld	r25, X
    3dea:	11 97       	sbiw	r26, 0x01	; 1
    3dec:	a8 15       	cp	r26, r8
    3dee:	b9 05       	cpc	r27, r9
    3df0:	b1 f5       	brne	.+108    	; 0x3e5e <realloc+0x102>
    3df2:	6c 01       	movw	r12, r24
    3df4:	42 e0       	ldi	r20, 0x02	; 2
    3df6:	c4 0e       	add	r12, r20
    3df8:	d1 1c       	adc	r13, r1
    3dfa:	ca 14       	cp	r12, r10
    3dfc:	db 04       	cpc	r13, r11
    3dfe:	78 f1       	brcs	.+94     	; 0x3e5e <realloc+0x102>
    3e00:	4c 01       	movw	r8, r24
    3e02:	8a 18       	sub	r8, r10
    3e04:	9b 08       	sbc	r9, r11
    3e06:	64 01       	movw	r12, r8
    3e08:	42 e0       	ldi	r20, 0x02	; 2
    3e0a:	c4 0e       	add	r12, r20
    3e0c:	d1 1c       	adc	r13, r1
    3e0e:	12 96       	adiw	r26, 0x02	; 2
    3e10:	bc 90       	ld	r11, X
    3e12:	12 97       	sbiw	r26, 0x02	; 2
    3e14:	13 96       	adiw	r26, 0x03	; 3
    3e16:	ac 91       	ld	r26, X
    3e18:	b5 e0       	ldi	r27, 0x05	; 5
    3e1a:	cb 16       	cp	r12, r27
    3e1c:	d1 04       	cpc	r13, r1
    3e1e:	40 f0       	brcs	.+16     	; 0x3e30 <realloc+0xd4>
    3e20:	b2 82       	std	Z+2, r11	; 0x02
    3e22:	a3 83       	std	Z+3, r26	; 0x03
    3e24:	91 82       	std	Z+1, r9	; 0x01
    3e26:	80 82       	st	Z, r8
    3e28:	d9 01       	movw	r26, r18
    3e2a:	6d 93       	st	X+, r22
    3e2c:	7c 93       	st	X, r23
    3e2e:	09 c0       	rjmp	.+18     	; 0x3e42 <realloc+0xe6>
    3e30:	0e 5f       	subi	r16, 0xFE	; 254
    3e32:	1f 4f       	sbci	r17, 0xFF	; 255
    3e34:	80 0f       	add	r24, r16
    3e36:	91 1f       	adc	r25, r17
    3e38:	f9 01       	movw	r30, r18
    3e3a:	91 83       	std	Z+1, r25	; 0x01
    3e3c:	80 83       	st	Z, r24
    3e3e:	eb 2d       	mov	r30, r11
    3e40:	fa 2f       	mov	r31, r26
    3e42:	e1 14       	cp	r14, r1
    3e44:	f1 04       	cpc	r15, r1
    3e46:	31 f0       	breq	.+12     	; 0x3e54 <realloc+0xf8>
    3e48:	d7 01       	movw	r26, r14
    3e4a:	13 96       	adiw	r26, 0x03	; 3
    3e4c:	fc 93       	st	X, r31
    3e4e:	ee 93       	st	-X, r30
    3e50:	12 97       	sbiw	r26, 0x02	; 2
    3e52:	41 c0       	rjmp	.+130    	; 0x3ed6 <realloc+0x17a>
    3e54:	f0 93 34 05 	sts	0x0534, r31	; 0x800534 <__flp+0x1>
    3e58:	e0 93 33 05 	sts	0x0533, r30	; 0x800533 <__flp>
    3e5c:	3c c0       	rjmp	.+120    	; 0x3ed6 <realloc+0x17a>
    3e5e:	68 16       	cp	r6, r24
    3e60:	79 06       	cpc	r7, r25
    3e62:	08 f4       	brcc	.+2      	; 0x3e66 <realloc+0x10a>
    3e64:	3c 01       	movw	r6, r24
    3e66:	7d 01       	movw	r14, r26
    3e68:	12 96       	adiw	r26, 0x02	; 2
    3e6a:	0d 90       	ld	r0, X+
    3e6c:	bc 91       	ld	r27, X
    3e6e:	a0 2d       	mov	r26, r0
    3e70:	b7 cf       	rjmp	.-146    	; 0x3de0 <realloc+0x84>
    3e72:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <__brkval>
    3e76:	90 91 32 05 	lds	r25, 0x0532	; 0x800532 <__brkval+0x1>
    3e7a:	88 16       	cp	r8, r24
    3e7c:	99 06       	cpc	r9, r25
    3e7e:	e1 f4       	brne	.+56     	; 0x3eb8 <realloc+0x15c>
    3e80:	66 16       	cp	r6, r22
    3e82:	77 06       	cpc	r7, r23
    3e84:	c8 f4       	brcc	.+50     	; 0x3eb8 <realloc+0x15c>
    3e86:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3e8a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3e8e:	00 97       	sbiw	r24, 0x00	; 0
    3e90:	41 f4       	brne	.+16     	; 0x3ea2 <realloc+0x146>
    3e92:	8d b7       	in	r24, 0x3d	; 61
    3e94:	9e b7       	in	r25, 0x3e	; 62
    3e96:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3e9a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3e9e:	84 1b       	sub	r24, r20
    3ea0:	95 0b       	sbc	r25, r21
    3ea2:	e8 17       	cp	r30, r24
    3ea4:	f9 07       	cpc	r31, r25
    3ea6:	c8 f4       	brcc	.+50     	; 0x3eda <realloc+0x17e>
    3ea8:	f0 93 32 05 	sts	0x0532, r31	; 0x800532 <__brkval+0x1>
    3eac:	e0 93 31 05 	sts	0x0531, r30	; 0x800531 <__brkval>
    3eb0:	f9 01       	movw	r30, r18
    3eb2:	71 83       	std	Z+1, r23	; 0x01
    3eb4:	60 83       	st	Z, r22
    3eb6:	0f c0       	rjmp	.+30     	; 0x3ed6 <realloc+0x17a>
    3eb8:	cb 01       	movw	r24, r22
    3eba:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <malloc>
    3ebe:	7c 01       	movw	r14, r24
    3ec0:	00 97       	sbiw	r24, 0x00	; 0
    3ec2:	59 f0       	breq	.+22     	; 0x3eda <realloc+0x17e>
    3ec4:	a8 01       	movw	r20, r16
    3ec6:	be 01       	movw	r22, r28
    3ec8:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <memcpy>
    3ecc:	ce 01       	movw	r24, r28
    3ece:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <free>
    3ed2:	c7 01       	movw	r24, r14
    3ed4:	04 c0       	rjmp	.+8      	; 0x3ede <realloc+0x182>
    3ed6:	ce 01       	movw	r24, r28
    3ed8:	02 c0       	rjmp	.+4      	; 0x3ede <realloc+0x182>
    3eda:	80 e0       	ldi	r24, 0x00	; 0
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	cd b7       	in	r28, 0x3d	; 61
    3ee0:	de b7       	in	r29, 0x3e	; 62
    3ee2:	ee e0       	ldi	r30, 0x0E	; 14
    3ee4:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <__epilogue_restores__+0x8>

00003ee8 <atol>:
    3ee8:	1f 93       	push	r17
    3eea:	fc 01       	movw	r30, r24
    3eec:	99 27       	eor	r25, r25
    3eee:	88 27       	eor	r24, r24
    3ef0:	bc 01       	movw	r22, r24
    3ef2:	e8 94       	clt
    3ef4:	11 91       	ld	r17, Z+
    3ef6:	10 32       	cpi	r17, 0x20	; 32
    3ef8:	e9 f3       	breq	.-6      	; 0x3ef4 <atol+0xc>
    3efa:	19 30       	cpi	r17, 0x09	; 9
    3efc:	10 f0       	brcs	.+4      	; 0x3f02 <atol+0x1a>
    3efe:	1e 30       	cpi	r17, 0x0E	; 14
    3f00:	c8 f3       	brcs	.-14     	; 0x3ef4 <atol+0xc>
    3f02:	1b 32       	cpi	r17, 0x2B	; 43
    3f04:	51 f0       	breq	.+20     	; 0x3f1a <atol+0x32>
    3f06:	1d 32       	cpi	r17, 0x2D	; 45
    3f08:	49 f4       	brne	.+18     	; 0x3f1c <atol+0x34>
    3f0a:	68 94       	set
    3f0c:	06 c0       	rjmp	.+12     	; 0x3f1a <atol+0x32>
    3f0e:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__mulsi_const_10>
    3f12:	61 0f       	add	r22, r17
    3f14:	71 1d       	adc	r23, r1
    3f16:	81 1d       	adc	r24, r1
    3f18:	91 1d       	adc	r25, r1
    3f1a:	11 91       	ld	r17, Z+
    3f1c:	10 53       	subi	r17, 0x30	; 48
    3f1e:	1a 30       	cpi	r17, 0x0A	; 10
    3f20:	b0 f3       	brcs	.-20     	; 0x3f0e <atol+0x26>
    3f22:	3e f4       	brtc	.+14     	; 0x3f32 <atol+0x4a>
    3f24:	90 95       	com	r25
    3f26:	80 95       	com	r24
    3f28:	70 95       	com	r23
    3f2a:	61 95       	neg	r22
    3f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f2e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f30:	9f 4f       	sbci	r25, 0xFF	; 255
    3f32:	1f 91       	pop	r17
    3f34:	08 95       	ret

00003f36 <memcmp>:
    3f36:	fb 01       	movw	r30, r22
    3f38:	dc 01       	movw	r26, r24
    3f3a:	04 c0       	rjmp	.+8      	; 0x3f44 <memcmp+0xe>
    3f3c:	8d 91       	ld	r24, X+
    3f3e:	01 90       	ld	r0, Z+
    3f40:	80 19       	sub	r24, r0
    3f42:	21 f4       	brne	.+8      	; 0x3f4c <memcmp+0x16>
    3f44:	41 50       	subi	r20, 0x01	; 1
    3f46:	50 40       	sbci	r21, 0x00	; 0
    3f48:	c8 f7       	brcc	.-14     	; 0x3f3c <memcmp+0x6>
    3f4a:	88 1b       	sub	r24, r24
    3f4c:	99 0b       	sbc	r25, r25
    3f4e:	08 95       	ret

00003f50 <memcpy>:
    3f50:	fb 01       	movw	r30, r22
    3f52:	dc 01       	movw	r26, r24
    3f54:	02 c0       	rjmp	.+4      	; 0x3f5a <memcpy+0xa>
    3f56:	01 90       	ld	r0, Z+
    3f58:	0d 92       	st	X+, r0
    3f5a:	41 50       	subi	r20, 0x01	; 1
    3f5c:	50 40       	sbci	r21, 0x00	; 0
    3f5e:	d8 f7       	brcc	.-10     	; 0x3f56 <memcpy+0x6>
    3f60:	08 95       	ret

00003f62 <strchr>:
    3f62:	fc 01       	movw	r30, r24
    3f64:	81 91       	ld	r24, Z+
    3f66:	86 17       	cp	r24, r22
    3f68:	21 f0       	breq	.+8      	; 0x3f72 <strchr+0x10>
    3f6a:	88 23       	and	r24, r24
    3f6c:	d9 f7       	brne	.-10     	; 0x3f64 <strchr+0x2>
    3f6e:	99 27       	eor	r25, r25
    3f70:	08 95       	ret
    3f72:	31 97       	sbiw	r30, 0x01	; 1
    3f74:	cf 01       	movw	r24, r30
    3f76:	08 95       	ret

00003f78 <strcpy>:
    3f78:	fb 01       	movw	r30, r22
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	01 90       	ld	r0, Z+
    3f7e:	0d 92       	st	X+, r0
    3f80:	00 20       	and	r0, r0
    3f82:	e1 f7       	brne	.-8      	; 0x3f7c <strcpy+0x4>
    3f84:	08 95       	ret

00003f86 <strncpy>:
    3f86:	fb 01       	movw	r30, r22
    3f88:	dc 01       	movw	r26, r24
    3f8a:	41 50       	subi	r20, 0x01	; 1
    3f8c:	50 40       	sbci	r21, 0x00	; 0
    3f8e:	48 f0       	brcs	.+18     	; 0x3fa2 <strncpy+0x1c>
    3f90:	01 90       	ld	r0, Z+
    3f92:	0d 92       	st	X+, r0
    3f94:	00 20       	and	r0, r0
    3f96:	c9 f7       	brne	.-14     	; 0x3f8a <strncpy+0x4>
    3f98:	01 c0       	rjmp	.+2      	; 0x3f9c <strncpy+0x16>
    3f9a:	1d 92       	st	X+, r1
    3f9c:	41 50       	subi	r20, 0x01	; 1
    3f9e:	50 40       	sbci	r21, 0x00	; 0
    3fa0:	e0 f7       	brcc	.-8      	; 0x3f9a <strncpy+0x14>
    3fa2:	08 95       	ret

00003fa4 <__itoa_ncheck>:
    3fa4:	bb 27       	eor	r27, r27
    3fa6:	4a 30       	cpi	r20, 0x0A	; 10
    3fa8:	31 f4       	brne	.+12     	; 0x3fb6 <__itoa_ncheck+0x12>
    3faa:	99 23       	and	r25, r25
    3fac:	22 f4       	brpl	.+8      	; 0x3fb6 <__itoa_ncheck+0x12>
    3fae:	bd e2       	ldi	r27, 0x2D	; 45
    3fb0:	90 95       	com	r25
    3fb2:	81 95       	neg	r24
    3fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb6:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <__utoa_common>

00003fba <__mulsi_const_10>:
    3fba:	59 2f       	mov	r21, r25
    3fbc:	48 2f       	mov	r20, r24
    3fbe:	37 2f       	mov	r19, r23
    3fc0:	26 2f       	mov	r18, r22
    3fc2:	66 0f       	add	r22, r22
    3fc4:	77 1f       	adc	r23, r23
    3fc6:	88 1f       	adc	r24, r24
    3fc8:	99 1f       	adc	r25, r25
    3fca:	66 0f       	add	r22, r22
    3fcc:	77 1f       	adc	r23, r23
    3fce:	88 1f       	adc	r24, r24
    3fd0:	99 1f       	adc	r25, r25
    3fd2:	62 0f       	add	r22, r18
    3fd4:	73 1f       	adc	r23, r19
    3fd6:	84 1f       	adc	r24, r20
    3fd8:	95 1f       	adc	r25, r21
    3fda:	66 0f       	add	r22, r22
    3fdc:	77 1f       	adc	r23, r23
    3fde:	88 1f       	adc	r24, r24
    3fe0:	99 1f       	adc	r25, r25
    3fe2:	08 95       	ret

00003fe4 <__utoa_ncheck>:
    3fe4:	bb 27       	eor	r27, r27

00003fe6 <__utoa_common>:
    3fe6:	fb 01       	movw	r30, r22
    3fe8:	55 27       	eor	r21, r21
    3fea:	aa 27       	eor	r26, r26
    3fec:	88 0f       	add	r24, r24
    3fee:	99 1f       	adc	r25, r25
    3ff0:	aa 1f       	adc	r26, r26
    3ff2:	a4 17       	cp	r26, r20
    3ff4:	10 f0       	brcs	.+4      	; 0x3ffa <__utoa_common+0x14>
    3ff6:	a4 1b       	sub	r26, r20
    3ff8:	83 95       	inc	r24
    3ffa:	50 51       	subi	r21, 0x10	; 16
    3ffc:	b9 f7       	brne	.-18     	; 0x3fec <__utoa_common+0x6>
    3ffe:	a0 5d       	subi	r26, 0xD0	; 208
    4000:	aa 33       	cpi	r26, 0x3A	; 58
    4002:	08 f0       	brcs	.+2      	; 0x4006 <__utoa_common+0x20>
    4004:	a9 5d       	subi	r26, 0xD9	; 217
    4006:	a1 93       	st	Z+, r26
    4008:	00 97       	sbiw	r24, 0x00	; 0
    400a:	79 f7       	brne	.-34     	; 0x3fea <__utoa_common+0x4>
    400c:	b1 11       	cpse	r27, r1
    400e:	b1 93       	st	Z+, r27
    4010:	11 92       	st	Z+, r1
    4012:	cb 01       	movw	r24, r22
    4014:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <strrev>

00004018 <strrev>:
    4018:	dc 01       	movw	r26, r24
    401a:	fc 01       	movw	r30, r24
    401c:	67 2f       	mov	r22, r23
    401e:	71 91       	ld	r23, Z+
    4020:	77 23       	and	r23, r23
    4022:	e1 f7       	brne	.-8      	; 0x401c <strrev+0x4>
    4024:	32 97       	sbiw	r30, 0x02	; 2
    4026:	04 c0       	rjmp	.+8      	; 0x4030 <strrev+0x18>
    4028:	7c 91       	ld	r23, X
    402a:	6d 93       	st	X+, r22
    402c:	70 83       	st	Z, r23
    402e:	62 91       	ld	r22, -Z
    4030:	ae 17       	cp	r26, r30
    4032:	bf 07       	cpc	r27, r31
    4034:	c8 f3       	brcs	.-14     	; 0x4028 <strrev+0x10>
    4036:	08 95       	ret

00004038 <__prologue_saves__>:
    4038:	2f 92       	push	r2
    403a:	3f 92       	push	r3
    403c:	4f 92       	push	r4
    403e:	5f 92       	push	r5
    4040:	6f 92       	push	r6
    4042:	7f 92       	push	r7
    4044:	8f 92       	push	r8
    4046:	9f 92       	push	r9
    4048:	af 92       	push	r10
    404a:	bf 92       	push	r11
    404c:	cf 92       	push	r12
    404e:	df 92       	push	r13
    4050:	ef 92       	push	r14
    4052:	ff 92       	push	r15
    4054:	0f 93       	push	r16
    4056:	1f 93       	push	r17
    4058:	cf 93       	push	r28
    405a:	df 93       	push	r29
    405c:	cd b7       	in	r28, 0x3d	; 61
    405e:	de b7       	in	r29, 0x3e	; 62
    4060:	ca 1b       	sub	r28, r26
    4062:	db 0b       	sbc	r29, r27
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	f8 94       	cli
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	cd bf       	out	0x3d, r28	; 61
    406e:	09 94       	ijmp

00004070 <__epilogue_restores__>:
    4070:	2a 88       	ldd	r2, Y+18	; 0x12
    4072:	39 88       	ldd	r3, Y+17	; 0x11
    4074:	48 88       	ldd	r4, Y+16	; 0x10
    4076:	5f 84       	ldd	r5, Y+15	; 0x0f
    4078:	6e 84       	ldd	r6, Y+14	; 0x0e
    407a:	7d 84       	ldd	r7, Y+13	; 0x0d
    407c:	8c 84       	ldd	r8, Y+12	; 0x0c
    407e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4080:	aa 84       	ldd	r10, Y+10	; 0x0a
    4082:	b9 84       	ldd	r11, Y+9	; 0x09
    4084:	c8 84       	ldd	r12, Y+8	; 0x08
    4086:	df 80       	ldd	r13, Y+7	; 0x07
    4088:	ee 80       	ldd	r14, Y+6	; 0x06
    408a:	fd 80       	ldd	r15, Y+5	; 0x05
    408c:	0c 81       	ldd	r16, Y+4	; 0x04
    408e:	1b 81       	ldd	r17, Y+3	; 0x03
    4090:	aa 81       	ldd	r26, Y+2	; 0x02
    4092:	b9 81       	ldd	r27, Y+1	; 0x01
    4094:	ce 0f       	add	r28, r30
    4096:	d1 1d       	adc	r29, r1
    4098:	0f b6       	in	r0, 0x3f	; 63
    409a:	f8 94       	cli
    409c:	de bf       	out	0x3e, r29	; 62
    409e:	0f be       	out	0x3f, r0	; 63
    40a0:	cd bf       	out	0x3d, r28	; 61
    40a2:	ed 01       	movw	r28, r26
    40a4:	08 95       	ret

000040a6 <__do_global_dtors>:
    40a6:	10 e0       	ldi	r17, 0x00	; 0
    40a8:	c8 e6       	ldi	r28, 0x68	; 104
    40aa:	d0 e0       	ldi	r29, 0x00	; 0
    40ac:	04 c0       	rjmp	.+8      	; 0x40b6 <__do_global_dtors+0x10>
    40ae:	fe 01       	movw	r30, r28
    40b0:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__tablejump2__>
    40b4:	21 96       	adiw	r28, 0x01	; 1
    40b6:	c9 36       	cpi	r28, 0x69	; 105
    40b8:	d1 07       	cpc	r29, r17
    40ba:	c9 f7       	brne	.-14     	; 0x40ae <__do_global_dtors+0x8>
    40bc:	f8 94       	cli

000040be <__stop_program>:
    40be:	ff cf       	rjmp	.-2      	; 0x40be <__stop_program>
