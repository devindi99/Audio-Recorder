
i2c_lcd_atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00000812  000008a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000812  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  008001aa  008001aa  00000950  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000135f  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000786  00000000  00000000  00001df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad0  00000000  00000000  0000257d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00003050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ae  00000000  00000000  0000320c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000300  00000000  00000000  000036ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000039ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3a       	cpi	r26, 0xAA	; 170
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa ea       	ldi	r26, 0xAA	; 170
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3b       	cpi	r26, 0xB1	; 177
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a5 03 	call	0x74a	; 0x74a <main>
  9e:	0c 94 07 04 	jmp	0x80e	; 0x80e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
}

void lcd_lef_sh()
{
	lcd_cmd(0x18);      //----Command for Left Shift
	delay(200);
  a6:	88 e4       	ldi	r24, 0x48	; 72
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  b6:	08 95       	ret

000000b8 <i2c_start>:
  b8:	84 ea       	ldi	r24, 0xA4	; 164
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c2:	88 23       	and	r24, r24
  c4:	e4 f7       	brge	.-8      	; 0xbe <i2c_start+0x6>
  c6:	08 95       	ret

000000c8 <i2c_write>:
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d6:	88 23       	and	r24, r24
  d8:	e4 f7       	brge	.-8      	; 0xd2 <i2c_write+0xa>
  da:	08 95       	ret

000000dc <delay>:
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	0a c0       	rjmp	.+20     	; 0xf6 <delay+0x1a>
  e2:	2f 5f       	subi	r18, 0xFF	; 255
  e4:	3f 4f       	sbci	r19, 0xFF	; 255
  e6:	02 c0       	rjmp	.+4      	; 0xec <delay+0x10>
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	29 37       	cpi	r18, 0x79	; 121
  ee:	31 05       	cpc	r19, r1
  f0:	c4 f3       	brlt	.-16     	; 0xe2 <delay+0x6>
  f2:	4f 5f       	subi	r20, 0xFF	; 255
  f4:	5f 4f       	sbci	r21, 0xFF	; 255
  f6:	84 17       	cp	r24, r20
  f8:	95 07       	cpc	r25, r21
  fa:	b4 f7       	brge	.-20     	; 0xe8 <delay+0xc>
  fc:	08 95       	ret

000000fe <toggle>:
  fe:	eb eb       	ldi	r30, 0xBB	; 187
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	82 60       	ori	r24, 0x02	; 2
 106:	80 83       	st	Z, r24
 108:	84 e8       	ldi	r24, 0x84	; 132
 10a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 10e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 112:	88 23       	and	r24, r24
 114:	e4 f7       	brge	.-8      	; 0x10e <toggle+0x10>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 6e 00 	call	0xdc	; 0xdc <delay>
 11e:	eb eb       	ldi	r30, 0xBB	; 187
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8d 7f       	andi	r24, 0xFD	; 253
 126:	80 83       	st	Z, r24
 128:	84 e8       	ldi	r24, 0x84	; 132
 12a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 132:	88 23       	and	r24, r24
 134:	e4 f7       	brge	.-8      	; 0x12e <toggle+0x30>
 136:	08 95       	ret

00000138 <lcd_cmd_hf>:
 138:	eb eb       	ldi	r30, 0xBB	; 187
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	90 81       	ld	r25, Z
 13e:	9e 7f       	andi	r25, 0xFE	; 254
 140:	90 83       	st	Z, r25
 142:	94 e8       	ldi	r25, 0x84	; 132
 144:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 148:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 14c:	99 23       	and	r25, r25
 14e:	e4 f7       	brge	.-8      	; 0x148 <lcd_cmd_hf+0x10>
 150:	eb eb       	ldi	r30, 0xBB	; 187
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	90 81       	ld	r25, Z
 156:	9f 70       	andi	r25, 0x0F	; 15
 158:	90 83       	st	Z, r25
 15a:	94 e8       	ldi	r25, 0x84	; 132
 15c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 160:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 164:	99 23       	and	r25, r25
 166:	e4 f7       	brge	.-8      	; 0x160 <lcd_cmd_hf+0x28>
 168:	eb eb       	ldi	r30, 0xBB	; 187
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	90 81       	ld	r25, Z
 16e:	80 7f       	andi	r24, 0xF0	; 240
 170:	89 2b       	or	r24, r25
 172:	80 83       	st	Z, r24
 174:	84 e8       	ldi	r24, 0x84	; 132
 176:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17e:	88 23       	and	r24, r24
 180:	e4 f7       	brge	.-8      	; 0x17a <lcd_cmd_hf+0x42>
 182:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle>
 186:	08 95       	ret

00000188 <lcd_cmd>:
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
 18c:	eb eb       	ldi	r30, 0xBB	; 187
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	8e 7f       	andi	r24, 0xFE	; 254
 194:	80 83       	st	Z, r24
 196:	84 e8       	ldi	r24, 0x84	; 132
 198:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 19c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a0:	88 23       	and	r24, r24
 1a2:	e4 f7       	brge	.-8      	; 0x19c <lcd_cmd+0x14>
 1a4:	eb eb       	ldi	r30, 0xBB	; 187
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	80 83       	st	Z, r24
 1ae:	84 e8       	ldi	r24, 0x84	; 132
 1b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b8:	88 23       	and	r24, r24
 1ba:	e4 f7       	brge	.-8      	; 0x1b4 <lcd_cmd+0x2c>
 1bc:	eb eb       	ldi	r30, 0xBB	; 187
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	9c 2f       	mov	r25, r28
 1c4:	90 7f       	andi	r25, 0xF0	; 240
 1c6:	89 2b       	or	r24, r25
 1c8:	80 83       	st	Z, r24
 1ca:	84 e8       	ldi	r24, 0x84	; 132
 1cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d4:	88 23       	and	r24, r24
 1d6:	e4 f7       	brge	.-8      	; 0x1d0 <lcd_cmd+0x48>
 1d8:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle>
 1dc:	eb eb       	ldi	r30, 0xBB	; 187
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8f 70       	andi	r24, 0x0F	; 15
 1e4:	80 83       	st	Z, r24
 1e6:	84 e8       	ldi	r24, 0x84	; 132
 1e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1f0:	88 23       	and	r24, r24
 1f2:	e4 f7       	brge	.-8      	; 0x1ec <lcd_cmd+0x64>
 1f4:	eb eb       	ldi	r30, 0xBB	; 187
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	20 81       	ld	r18, Z
 1fa:	30 e1       	ldi	r19, 0x10	; 16
 1fc:	c3 9f       	mul	r28, r19
 1fe:	c0 01       	movw	r24, r0
 200:	11 24       	eor	r1, r1
 202:	82 2b       	or	r24, r18
 204:	80 83       	st	Z, r24
 206:	84 e8       	ldi	r24, 0x84	; 132
 208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 20c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 210:	88 23       	and	r24, r24
 212:	e4 f7       	brge	.-8      	; 0x20c <lcd_cmd+0x84>
 214:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle>
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <lcd_init>:
 21c:	80 e3       	ldi	r24, 0x30	; 48
 21e:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_cmd_hf>
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_cmd_hf>
 228:	80 e2       	ldi	r24, 0x20	; 32
 22a:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_cmd_hf>
 22e:	88 e2       	ldi	r24, 0x28	; 40
 230:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
 246:	8f e0       	ldi	r24, 0x0F	; 15
 248:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
 24c:	08 95       	ret

0000024e <lcd_dwr>:
 24e:	cf 93       	push	r28
 250:	c8 2f       	mov	r28, r24
 252:	eb eb       	ldi	r30, 0xBB	; 187
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	80 83       	st	Z, r24
 25c:	84 e8       	ldi	r24, 0x84	; 132
 25e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 262:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 266:	88 23       	and	r24, r24
 268:	e4 f7       	brge	.-8      	; 0x262 <lcd_dwr+0x14>
 26a:	eb eb       	ldi	r30, 0xBB	; 187
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	8f 70       	andi	r24, 0x0F	; 15
 272:	80 83       	st	Z, r24
 274:	84 e8       	ldi	r24, 0x84	; 132
 276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 27a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 27e:	88 23       	and	r24, r24
 280:	e4 f7       	brge	.-8      	; 0x27a <lcd_dwr+0x2c>
 282:	eb eb       	ldi	r30, 0xBB	; 187
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	9c 2f       	mov	r25, r28
 28a:	90 7f       	andi	r25, 0xF0	; 240
 28c:	89 2b       	or	r24, r25
 28e:	80 83       	st	Z, r24
 290:	84 e8       	ldi	r24, 0x84	; 132
 292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 296:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 29a:	88 23       	and	r24, r24
 29c:	e4 f7       	brge	.-8      	; 0x296 <lcd_dwr+0x48>
 29e:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle>
 2a2:	eb eb       	ldi	r30, 0xBB	; 187
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	8f 70       	andi	r24, 0x0F	; 15
 2aa:	80 83       	st	Z, r24
 2ac:	84 e8       	ldi	r24, 0x84	; 132
 2ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b6:	88 23       	and	r24, r24
 2b8:	e4 f7       	brge	.-8      	; 0x2b2 <lcd_dwr+0x64>
 2ba:	eb eb       	ldi	r30, 0xBB	; 187
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	20 81       	ld	r18, Z
 2c0:	30 e1       	ldi	r19, 0x10	; 16
 2c2:	c3 9f       	mul	r28, r19
 2c4:	c0 01       	movw	r24, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	82 2b       	or	r24, r18
 2ca:	80 83       	st	Z, r24
 2cc:	84 e8       	ldi	r24, 0x84	; 132
 2ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d6:	88 23       	and	r24, r24
 2d8:	e4 f7       	brge	.-8      	; 0x2d2 <lcd_dwr+0x84>
 2da:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle>
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <lcd_msg>:
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ec 01       	movw	r28, r24
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <lcd_msg+0xe>
 2ea:	21 96       	adiw	r28, 0x01	; 1
 2ec:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_dwr>
 2f0:	88 81       	ld	r24, Y
 2f2:	81 11       	cpse	r24, r1
 2f4:	fa cf       	rjmp	.-12     	; 0x2ea <lcd_msg+0x8>
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <Navigate>:
	Screen=1;
	}
}

void Navigate(){
	if (UPval==2)
 2fc:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <UPval>
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	49 f4       	brne	.+18     	; 0x316 <Navigate+0x1a>
	{
		lcd_cmd(0x80);
 304:	80 e8       	ldi	r24, 0x80	; 128
 306:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		
		Row=1;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__data_end+0x1>
 312:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
		}
		
	if (DOWNval==4)
 316:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <DOWNval>
 31a:	84 30       	cpi	r24, 0x04	; 4
 31c:	49 f4       	brne	.+18     	; 0x330 <Navigate+0x34>
	{
	
		lcd_cmd(0xC0);
 31e:	80 ec       	ldi	r24, 0xC0	; 192
 320:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		
		Row=2;
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__data_end+0x1>
 32c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
 330:	08 95       	ret

00000332 <Menu>:
		
	}
}
void Menu(){
	lcd_cmd(0x01);
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_cmd(0x80);
 338:	80 e8       	ldi	r24, 0x80	; 128
 33a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_cmd(0x14);
 33e:	84 e1       	ldi	r24, 0x14	; 20
 340:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_msg("Playback audio");
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
	lcd_cmd(0xC0);
 34c:	80 ec       	ldi	r24, 0xC0	; 192
 34e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_cmd(0x14);
 352:	84 e1       	ldi	r24, 0x14	; 20
 354:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_msg("Delete Audio");
 358:	81 e1       	ldi	r24, 0x11	; 17
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
	Screen = 1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 368:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	Row = 0;
 36c:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
 370:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
 374:	08 95       	ret

00000376 <Recording>:
		DeleteClipII();
		Back();
		
    }
}
void Recording(){
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
	if(RECval==1){
 37a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <RECval>
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	09 f0       	breq	.+2      	; 0x384 <Recording+0xe>
 382:	40 c0       	rjmp	.+128    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 384:	22 c0       	rjmp	.+68     	; 0x3ca <Recording+0x54>
	while ( RECval == 1 )
	{
		//printf(RECval);
		lcd_cmd(0x01);
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("Recording");
 38c:	8e e1       	ldi	r24, 0x1E	; 30
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
		for (int i = 0; i <= 4; i++){
 394:	c0 e0       	ldi	r28, 0x00	; 0
 396:	d0 e0       	ldi	r29, 0x00	; 0
 398:	0e c0       	rjmp	.+28     	; 0x3b6 <Recording+0x40>
			lcd_msg(".");
 39a:	88 e2       	ldi	r24, 0x28	; 40
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a2:	2f ef       	ldi	r18, 0xFF	; 255
 3a4:	80 e7       	ldi	r24, 0x70	; 112
 3a6:	92 e0       	ldi	r25, 0x02	; 2
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	80 40       	sbci	r24, 0x00	; 0
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <Recording+0x32>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <Recording+0x3c>
 3b2:	00 00       	nop
	while ( RECval == 1 )
	{
		//printf(RECval);
		lcd_cmd(0x01);
		lcd_msg("Recording");
		for (int i = 0; i <= 4; i++){
 3b4:	21 96       	adiw	r28, 0x01	; 1
 3b6:	c5 30       	cpi	r28, 0x05	; 5
 3b8:	d1 05       	cpc	r29, r1
 3ba:	7c f3       	brlt	.-34     	; 0x39a <Recording+0x24>
			lcd_msg(".");
			_delay_ms(50);
		}
		RECval = PIND & (1<<PIND0);
 3bc:	89 b1       	in	r24, 0x09	; 9
 3be:	81 70       	andi	r24, 0x01	; 1
 3c0:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <RECval>
		lcd_cmd(0x01);
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		
    }
}
void Recording(){
	if(RECval==1){
	while ( RECval == 1 )
 3ca:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <RECval>
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	d1 f2       	breq	.-76     	; 0x386 <Recording+0x10>
			_delay_ms(50);
		}
		RECval = PIND & (1<<PIND0);
		lcd_cmd(0x01);
	}
	lcd_msg("File Saved");
 3d2:	8a e2       	ldi	r24, 0x2A	; 42
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
 3da:	2f ef       	ldi	r18, 0xFF	; 255
 3dc:	83 ed       	ldi	r24, 0xD3	; 211
 3de:	90 e3       	ldi	r25, 0x30	; 48
 3e0:	21 50       	subi	r18, 0x01	; 1
 3e2:	80 40       	sbci	r24, 0x00	; 0
 3e4:	90 40       	sbci	r25, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <Recording+0x6a>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <Recording+0x74>
 3ea:	00 00       	nop
	_delay_ms(1000);
	Menu();
 3ec:	0e 94 99 01 	call	0x332	; 0x332 <Menu>
	Row=0;
 3f0:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
 3f4:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
	Screen=1;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 400:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <PlayBackAudio>:
	lcd_msg("Delete Audio");
	Screen = 1;
	Row = 0;
}
void PlayBackAudio(){
	lcd_cmd(0x01);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_cmd(0x80);
 410:	80 e8       	ldi	r24, 0x80	; 128
 412:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_cmd(0x14);
 416:	84 e1       	ldi	r24, 0x14	; 20
 418:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_msg("Audio 1");
 41c:	85 e5       	ldi	r24, 0x55	; 85
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
	lcd_cmd(0xC0);
 424:	80 ec       	ldi	r24, 0xC0	; 192
 426:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_cmd(0x14);
 42a:	84 e1       	ldi	r24, 0x14	; 20
 42c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_msg("Audio 2");
 430:	83 e7       	ldi	r24, 0x73	; 115
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
	Screen = 2;
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 440:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	Row = 0;
 444:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
 448:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
 44c:	08 95       	ret

0000044e <DeleteAudio>:
}
void DeleteAudio(){
	lcd_cmd(0x01);
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_cmd(0x80);
 454:	80 e8       	ldi	r24, 0x80	; 128
 456:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_cmd(0x14);
 45a:	84 e1       	ldi	r24, 0x14	; 20
 45c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_msg("Audio 1");
 460:	85 e5       	ldi	r24, 0x55	; 85
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
	lcd_cmd(0xC0);
 468:	80 ec       	ldi	r24, 0xC0	; 192
 46a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_cmd(0x14);
 46e:	84 e1       	ldi	r24, 0x14	; 20
 470:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
	lcd_msg("Audio 2");
 474:	83 e7       	ldi	r24, 0x73	; 115
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
	Screen = 3;
 47c:	83 e0       	ldi	r24, 0x03	; 3
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 484:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	Row = 0;
 488:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
 48c:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
 490:	08 95       	ret

00000492 <PlayClipI>:
}
void PlayClipI(){
	if ((SELval == 8) && (Row == 1) && (Screen == 2)){
 492:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <SELval>
 496:	88 30       	cpi	r24, 0x08	; 8
 498:	69 f5       	brne	.+90     	; 0x4f4 <PlayClipI+0x62>
 49a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 49e:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	39 f5       	brne	.+78     	; 0x4f4 <PlayClipI+0x62>
 4a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4ae:	02 97       	sbiw	r24, 0x02	; 2
 4b0:	09 f5       	brne	.+66     	; 0x4f4 <PlayClipI+0x62>
		lcd_cmd(0x01);
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x80);
 4b8:	80 e8       	ldi	r24, 0x80	; 128
 4ba:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x14);
 4be:	84 e1       	ldi	r24, 0x14	; 20
 4c0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("No Effect");
 4c4:	85 e3       	ldi	r24, 0x35	; 53
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
		lcd_cmd(0xC0);
 4cc:	80 ec       	ldi	r24, 0xC0	; 192
 4ce:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x14);
 4d2:	84 e1       	ldi	r24, 0x14	; 20
 4d4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("Effect 1");
 4d8:	82 e6       	ldi	r24, 0x62	; 98
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
		Screen = 4;
 4e0:	84 e0       	ldi	r24, 0x04	; 4
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		Row =0;
 4ec:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
 4f0:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
	}
	if ((SELval == 8) && (Row == 2) && (Screen == 2)){
 4f4:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <SELval>
 4f8:	88 30       	cpi	r24, 0x08	; 8
 4fa:	69 f5       	brne	.+90     	; 0x556 <PlayClipI+0xc4>
 4fc:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 500:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 504:	02 97       	sbiw	r24, 0x02	; 2
 506:	39 f5       	brne	.+78     	; 0x556 <PlayClipI+0xc4>
 508:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 50c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 510:	02 97       	sbiw	r24, 0x02	; 2
 512:	09 f5       	brne	.+66     	; 0x556 <PlayClipI+0xc4>
		lcd_cmd(0x01);
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x80);
 51a:	80 e8       	ldi	r24, 0x80	; 128
 51c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x14);
 520:	84 e1       	ldi	r24, 0x14	; 20
 522:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("No Effect");
 526:	85 e3       	ldi	r24, 0x35	; 53
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
		lcd_cmd(0xC0);
 52e:	80 ec       	ldi	r24, 0xC0	; 192
 530:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x14);
 534:	84 e1       	ldi	r24, 0x14	; 20
 536:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("Effect 1");
 53a:	82 e6       	ldi	r24, 0x62	; 98
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
		Screen = 5;
 542:	85 e0       	ldi	r24, 0x05	; 5
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 54a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		Row =0;
 54e:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
 552:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
 556:	08 95       	ret

00000558 <PlayClipII>:
	}
}
void PlayClipII(){
	if ((SELval == 8) && (Row == 1) && (Screen == 4)){
 558:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <SELval>
 55c:	88 30       	cpi	r24, 0x08	; 8
 55e:	c9 f4       	brne	.+50     	; 0x592 <PlayClipII+0x3a>
 560:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 564:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	99 f4       	brne	.+38     	; 0x592 <PlayClipII+0x3a>
 56c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 570:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 574:	04 97       	sbiw	r24, 0x04	; 4
 576:	69 f4       	brne	.+26     	; 0x592 <PlayClipII+0x3a>
		lcd_cmd(0x01);
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x80);
 57e:	80 e8       	ldi	r24, 0x80	; 128
 580:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x14);
 584:	84 e1       	ldi	r24, 0x14	; 20
 586:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("Playing Audio");
 58a:	8f e3       	ldi	r24, 0x3F	; 63
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
	}
	if ((SELval == 8) && (Row == 2) && (Screen == 4)){
 592:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <SELval>
 596:	88 30       	cpi	r24, 0x08	; 8
 598:	19 f5       	brne	.+70     	; 0x5e0 <PlayClipII+0x88>
 59a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 59e:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 5a2:	02 97       	sbiw	r24, 0x02	; 2
 5a4:	e9 f4       	brne	.+58     	; 0x5e0 <PlayClipII+0x88>
 5a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5ae:	04 97       	sbiw	r24, 0x04	; 4
 5b0:	b9 f4       	brne	.+46     	; 0x5e0 <PlayClipII+0x88>
		lcd_cmd(0x01);
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x80);
 5b8:	80 e8       	ldi	r24, 0x80	; 128
 5ba:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x14);
 5be:	84 e1       	ldi	r24, 0x14	; 20
 5c0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("Playing Audio 1");
 5c4:	8d e4       	ldi	r24, 0x4D	; 77
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
		lcd_cmd(0xC0);
 5cc:	80 ec       	ldi	r24, 0xC0	; 192
 5ce:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x14);
 5d2:	84 e1       	ldi	r24, 0x14	; 20
 5d4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("with Effect 1");
 5d8:	8d e5       	ldi	r24, 0x5D	; 93
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
	}
	if ((SELval == 8) && (Row == 1) && (Screen == 5)){
 5e0:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <SELval>
 5e4:	88 30       	cpi	r24, 0x08	; 8
 5e6:	c9 f4       	brne	.+50     	; 0x61a <PlayClipII+0xc2>
 5e8:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 5ec:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	99 f4       	brne	.+38     	; 0x61a <PlayClipII+0xc2>
 5f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5fc:	05 97       	sbiw	r24, 0x05	; 5
 5fe:	69 f4       	brne	.+26     	; 0x61a <PlayClipII+0xc2>
		lcd_cmd(0x01);
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x80);
 606:	80 e8       	ldi	r24, 0x80	; 128
 608:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x14);
 60c:	84 e1       	ldi	r24, 0x14	; 20
 60e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("Playing Audio 2");
 612:	8b e6       	ldi	r24, 0x6B	; 107
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
	}
	if ((SELval == 8) && (Row == 2) && (Screen == 5)){
 61a:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <SELval>
 61e:	88 30       	cpi	r24, 0x08	; 8
 620:	19 f5       	brne	.+70     	; 0x668 <PlayClipII+0x110>
 622:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 626:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 62a:	02 97       	sbiw	r24, 0x02	; 2
 62c:	e9 f4       	brne	.+58     	; 0x668 <PlayClipII+0x110>
 62e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 632:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 636:	05 97       	sbiw	r24, 0x05	; 5
 638:	b9 f4       	brne	.+46     	; 0x668 <PlayClipII+0x110>
		lcd_cmd(0x01);
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x80);
 640:	80 e8       	ldi	r24, 0x80	; 128
 642:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x14);
 646:	84 e1       	ldi	r24, 0x14	; 20
 648:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("Playing Audio 2");
 64c:	8b e6       	ldi	r24, 0x6B	; 107
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
		lcd_cmd(0xC0);
 654:	80 ec       	ldi	r24, 0xC0	; 192
 656:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x14);
 65a:	84 e1       	ldi	r24, 0x14	; 20
 65c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("with Effect 1");
 660:	8d e5       	ldi	r24, 0x5D	; 93
 662:	91 e0       	ldi	r25, 0x01	; 1
 664:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
 668:	08 95       	ret

0000066a <DeleteClipI>:
	}
}
void DeleteClipI(){
	if ((SELval == 8) && (Row != 0) && (Screen == 3)){
 66a:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <SELval>
 66e:	88 30       	cpi	r24, 0x08	; 8
 670:	69 f5       	brne	.+90     	; 0x6cc <DeleteClipI+0x62>
 672:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 676:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 67a:	89 2b       	or	r24, r25
 67c:	39 f1       	breq	.+78     	; 0x6cc <DeleteClipI+0x62>
 67e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 682:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 686:	03 97       	sbiw	r24, 0x03	; 3
 688:	09 f5       	brne	.+66     	; 0x6cc <DeleteClipI+0x62>
		lcd_cmd(0x01);
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x80);
 690:	80 e8       	ldi	r24, 0x80	; 128
 692:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x14);
 696:	84 e1       	ldi	r24, 0x14	; 20
 698:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("Press Select");
 69c:	8b e7       	ldi	r24, 0x7B	; 123
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
		lcd_cmd(0xC0);
 6a4:	80 ec       	ldi	r24, 0xC0	; 192
 6a6:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x14);
 6aa:	84 e1       	ldi	r24, 0x14	; 20
 6ac:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("to delete");
 6b0:	88 e8       	ldi	r24, 0x88	; 136
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
		Screen = 6;
 6b8:	86 e0       	ldi	r24, 0x06	; 6
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		Row = 0;
 6c4:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
 6c8:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
 6cc:	08 95       	ret

000006ce <DeleteClipII>:
	}
}

void DeleteClipII(){
	if ((SELval == 8 ) && (Screen == 6)){
 6ce:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <SELval>
 6d2:	88 30       	cpi	r24, 0x08	; 8
 6d4:	f1 f4       	brne	.+60     	; 0x712 <DeleteClipII+0x44>
 6d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6de:	06 97       	sbiw	r24, 0x06	; 6
 6e0:	c1 f4       	brne	.+48     	; 0x712 <DeleteClipII+0x44>
		lcd_cmd(0x01);
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x80);
 6e8:	80 e8       	ldi	r24, 0x80	; 128
 6ea:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_cmd(0x14);
 6ee:	84 e1       	ldi	r24, 0x14	; 20
 6f0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("Deleted");
 6f4:	82 e9       	ldi	r24, 0x92	; 146
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
 6fc:	2f ef       	ldi	r18, 0xFF	; 255
 6fe:	83 ed       	ldi	r24, 0xD3	; 211
 700:	90 e3       	ldi	r25, 0x30	; 48
 702:	21 50       	subi	r18, 0x01	; 1
 704:	80 40       	sbci	r24, 0x00	; 0
 706:	90 40       	sbci	r25, 0x00	; 0
 708:	e1 f7       	brne	.-8      	; 0x702 <DeleteClipII+0x34>
 70a:	00 c0       	rjmp	.+0      	; 0x70c <DeleteClipII+0x3e>
 70c:	00 00       	nop
		_delay_ms(1000);
		Menu();
 70e:	0e 94 99 01 	call	0x332	; 0x332 <Menu>
 712:	08 95       	ret

00000714 <Back>:
	}
}
void Back(){
	if ((BACKval == 16) && ((Screen == 2) || (Screen == 3))){
 714:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <BACKval>
 718:	80 31       	cpi	r24, 0x10	; 16
 71a:	49 f4       	brne	.+18     	; 0x72e <Back+0x1a>
 71c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 720:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 724:	02 97       	sbiw	r24, 0x02	; 2
 726:	02 97       	sbiw	r24, 0x02	; 2
 728:	10 f4       	brcc	.+4      	; 0x72e <Back+0x1a>
		Menu();
 72a:	0e 94 99 01 	call	0x332	; 0x332 <Menu>
	}
	if ((BACKval == 16) && ((Screen == 4) || (Screen == 5))){
 72e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <BACKval>
 732:	80 31       	cpi	r24, 0x10	; 16
 734:	49 f4       	brne	.+18     	; 0x748 <Back+0x34>
 736:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 73a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 73e:	04 97       	sbiw	r24, 0x04	; 4
 740:	02 97       	sbiw	r24, 0x02	; 2
 742:	10 f4       	brcc	.+4      	; 0x748 <Back+0x34>
		PlayBackAudio();
 744:	0e 94 05 02 	call	0x40a	; 0x40a <PlayBackAudio>
 748:	08 95       	ret

0000074a <main>:
void DeleteClipII();
void Back();

int main(void)
{
	DDRD &=~((1<<PIND0)|(1<<PIND1)|(1<<PIND2)|(1<<PIND3)|(1<<PIND4)) ;
 74a:	8a b1       	in	r24, 0x0a	; 10
 74c:	80 7e       	andi	r24, 0xE0	; 224
 74e:	8a b9       	out	0x0a, r24	; 10
	i2c_init();
 750:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	i2c_start();
 754:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_start>
	i2c_write(0x70);
 758:	80 e7       	ldi	r24, 0x70	; 112
 75a:	0e 94 64 00 	call	0xc8	; 0xc8 <i2c_write>
	lcd_init();
 75e:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_init>
	lcd_msg("Voice Recorder");
 762:	8a e9       	ldi	r24, 0x9A	; 154
 764:	91 e0       	ldi	r25, 0x01	; 1
 766:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
 76a:	2f ef       	ldi	r18, 0xFF	; 255
 76c:	80 e7       	ldi	r24, 0x70	; 112
 76e:	92 e0       	ldi	r25, 0x02	; 2
 770:	21 50       	subi	r18, 0x01	; 1
 772:	80 40       	sbci	r24, 0x00	; 0
 774:	90 40       	sbci	r25, 0x00	; 0
 776:	e1 f7       	brne	.-8      	; 0x770 <main+0x26>
 778:	00 c0       	rjmp	.+0      	; 0x77a <main+0x30>
 77a:	00 00       	nop
	_delay_ms(50);
	Menu();
 77c:	0e 94 99 01 	call	0x332	; 0x332 <Menu>
    /* Replace with your application code */
    while (1) 
    {
		RECval = PIND & (1<<PIND0); /*1*/
 780:	89 b1       	in	r24, 0x09	; 9
 782:	81 70       	andi	r24, 0x01	; 1
 784:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <RECval>
		UPval = PIND & (1<<PIND1);/*2*/
 788:	89 b1       	in	r24, 0x09	; 9
 78a:	82 70       	andi	r24, 0x02	; 2
 78c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <UPval>
		DOWNval = PIND & (1<<PIND2);//4
 790:	89 b1       	in	r24, 0x09	; 9
 792:	84 70       	andi	r24, 0x04	; 4
 794:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <DOWNval>
		SELval = PIND & (1<<PIND3);//8
 798:	89 b1       	in	r24, 0x09	; 9
 79a:	88 70       	andi	r24, 0x08	; 8
 79c:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <SELval>
		BACKval = PIND & (1<<PIND4); //16
 7a0:	89 b1       	in	r24, 0x09	; 9
 7a2:	80 71       	andi	r24, 0x10	; 16
 7a4:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <BACKval>
		
		Recording();
 7a8:	0e 94 bb 01 	call	0x376	; 0x376 <Recording>
		Navigate();
 7ac:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Navigate>
		if ((SELval == 8) && (Screen == 1) && (Row == 1)){
 7b0:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <SELval>
 7b4:	88 30       	cpi	r24, 0x08	; 8
 7b6:	71 f4       	brne	.+28     	; 0x7d4 <main+0x8a>
 7b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	41 f4       	brne	.+16     	; 0x7d4 <main+0x8a>
 7c4:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 7c8:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 7cc:	01 97       	sbiw	r24, 0x01	; 1
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <main+0x8a>
			PlayBackAudio();
 7d0:	0e 94 05 02 	call	0x40a	; 0x40a <PlayBackAudio>
		}
		if ((SELval == 8) && (Screen == 1) && (Row == 2)){
 7d4:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <SELval>
 7d8:	88 30       	cpi	r24, 0x08	; 8
 7da:	71 f4       	brne	.+28     	; 0x7f8 <main+0xae>
 7dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7e4:	01 97       	sbiw	r24, 0x01	; 1
 7e6:	41 f4       	brne	.+16     	; 0x7f8 <main+0xae>
 7e8:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 7ec:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 7f0:	02 97       	sbiw	r24, 0x02	; 2
 7f2:	11 f4       	brne	.+4      	; 0x7f8 <main+0xae>
			DeleteAudio();
 7f4:	0e 94 27 02 	call	0x44e	; 0x44e <DeleteAudio>
		}
		PlayClipI();
 7f8:	0e 94 49 02 	call	0x492	; 0x492 <PlayClipI>
		PlayClipII();
 7fc:	0e 94 ac 02 	call	0x558	; 0x558 <PlayClipII>
		DeleteClipI();
 800:	0e 94 35 03 	call	0x66a	; 0x66a <DeleteClipI>
		DeleteClipII();
 804:	0e 94 67 03 	call	0x6ce	; 0x6ce <DeleteClipII>
		Back();
 808:	0e 94 8a 03 	call	0x714	; 0x714 <Back>
		
    }
 80c:	b9 cf       	rjmp	.-142    	; 0x780 <main+0x36>

0000080e <_exit>:
 80e:	f8 94       	cli

00000810 <__stop_program>:
 810:	ff cf       	rjmp	.-2      	; 0x810 <__stop_program>
